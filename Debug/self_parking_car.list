
self_parking_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004498  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c8  080045c8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080045c8  080045c8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045c8  080045c8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c8  080045c8  000055c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045cc  080045cc  000055cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080045dc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080045dc  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cc3  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001588  00000000  00000000  0000dcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0000f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000714  00000000  00000000  0000fba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018561  00000000  00000000  000102b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a282  00000000  00000000  00028815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000904a9  00000000  00000000  00032a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2f40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b0  00000000  00000000  000c2f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c5234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004540 	.word	0x08004540

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004540 	.word	0x08004540

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 fa29 	bl	8001680 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 f98f 	bl	8001558 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fdec 	bl	8000e20 <__aeabi_dsub>
 8000248:	f001 f986 	bl	8001558 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	46de      	mov	lr, fp
 8000260:	4645      	mov	r5, r8
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	b087      	sub	sp, #28
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	030b      	lsls	r3, r1, #12
 8000270:	0b1b      	lsrs	r3, r3, #12
 8000272:	469b      	mov	fp, r3
 8000274:	0fca      	lsrs	r2, r1, #31
 8000276:	004b      	lsls	r3, r1, #1
 8000278:	0004      	movs	r4, r0
 800027a:	4680      	mov	r8, r0
 800027c:	0d5b      	lsrs	r3, r3, #21
 800027e:	9202      	str	r2, [sp, #8]
 8000280:	d100      	bne.n	8000284 <__aeabi_ddiv+0x28>
 8000282:	e16a      	b.n	800055a <__aeabi_ddiv+0x2fe>
 8000284:	4ad4      	ldr	r2, [pc, #848]	@ (80005d8 <__aeabi_ddiv+0x37c>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d100      	bne.n	800028c <__aeabi_ddiv+0x30>
 800028a:	e18c      	b.n	80005a6 <__aeabi_ddiv+0x34a>
 800028c:	4659      	mov	r1, fp
 800028e:	0f42      	lsrs	r2, r0, #29
 8000290:	00c9      	lsls	r1, r1, #3
 8000292:	430a      	orrs	r2, r1
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	0409      	lsls	r1, r1, #16
 8000298:	4311      	orrs	r1, r2
 800029a:	00c2      	lsls	r2, r0, #3
 800029c:	4690      	mov	r8, r2
 800029e:	4acf      	ldr	r2, [pc, #828]	@ (80005dc <__aeabi_ddiv+0x380>)
 80002a0:	4689      	mov	r9, r1
 80002a2:	4692      	mov	sl, r2
 80002a4:	449a      	add	sl, r3
 80002a6:	2300      	movs	r3, #0
 80002a8:	2400      	movs	r4, #0
 80002aa:	9303      	str	r3, [sp, #12]
 80002ac:	9e00      	ldr	r6, [sp, #0]
 80002ae:	9f01      	ldr	r7, [sp, #4]
 80002b0:	033b      	lsls	r3, r7, #12
 80002b2:	0b1b      	lsrs	r3, r3, #12
 80002b4:	469b      	mov	fp, r3
 80002b6:	007b      	lsls	r3, r7, #1
 80002b8:	0030      	movs	r0, r6
 80002ba:	0d5b      	lsrs	r3, r3, #21
 80002bc:	0ffd      	lsrs	r5, r7, #31
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d100      	bne.n	80002c4 <__aeabi_ddiv+0x68>
 80002c2:	e128      	b.n	8000516 <__aeabi_ddiv+0x2ba>
 80002c4:	4ac4      	ldr	r2, [pc, #784]	@ (80005d8 <__aeabi_ddiv+0x37c>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d100      	bne.n	80002cc <__aeabi_ddiv+0x70>
 80002ca:	e177      	b.n	80005bc <__aeabi_ddiv+0x360>
 80002cc:	4659      	mov	r1, fp
 80002ce:	0f72      	lsrs	r2, r6, #29
 80002d0:	00c9      	lsls	r1, r1, #3
 80002d2:	430a      	orrs	r2, r1
 80002d4:	2180      	movs	r1, #128	@ 0x80
 80002d6:	0409      	lsls	r1, r1, #16
 80002d8:	4311      	orrs	r1, r2
 80002da:	468b      	mov	fp, r1
 80002dc:	49bf      	ldr	r1, [pc, #764]	@ (80005dc <__aeabi_ddiv+0x380>)
 80002de:	00f2      	lsls	r2, r6, #3
 80002e0:	468c      	mov	ip, r1
 80002e2:	4651      	mov	r1, sl
 80002e4:	4463      	add	r3, ip
 80002e6:	1acb      	subs	r3, r1, r3
 80002e8:	469a      	mov	sl, r3
 80002ea:	2300      	movs	r3, #0
 80002ec:	9e02      	ldr	r6, [sp, #8]
 80002ee:	406e      	eors	r6, r5
 80002f0:	2c0f      	cmp	r4, #15
 80002f2:	d827      	bhi.n	8000344 <__aeabi_ddiv+0xe8>
 80002f4:	49ba      	ldr	r1, [pc, #744]	@ (80005e0 <__aeabi_ddiv+0x384>)
 80002f6:	00a4      	lsls	r4, r4, #2
 80002f8:	5909      	ldr	r1, [r1, r4]
 80002fa:	468f      	mov	pc, r1
 80002fc:	46cb      	mov	fp, r9
 80002fe:	4642      	mov	r2, r8
 8000300:	9e02      	ldr	r6, [sp, #8]
 8000302:	9b03      	ldr	r3, [sp, #12]
 8000304:	2b02      	cmp	r3, #2
 8000306:	d016      	beq.n	8000336 <__aeabi_ddiv+0xda>
 8000308:	2b03      	cmp	r3, #3
 800030a:	d100      	bne.n	800030e <__aeabi_ddiv+0xb2>
 800030c:	e2a6      	b.n	800085c <__aeabi_ddiv+0x600>
 800030e:	2b01      	cmp	r3, #1
 8000310:	d000      	beq.n	8000314 <__aeabi_ddiv+0xb8>
 8000312:	e0df      	b.n	80004d4 <__aeabi_ddiv+0x278>
 8000314:	2200      	movs	r2, #0
 8000316:	2300      	movs	r3, #0
 8000318:	2400      	movs	r4, #0
 800031a:	4690      	mov	r8, r2
 800031c:	051b      	lsls	r3, r3, #20
 800031e:	4323      	orrs	r3, r4
 8000320:	07f6      	lsls	r6, r6, #31
 8000322:	4333      	orrs	r3, r6
 8000324:	4640      	mov	r0, r8
 8000326:	0019      	movs	r1, r3
 8000328:	b007      	add	sp, #28
 800032a:	bcf0      	pop	{r4, r5, r6, r7}
 800032c:	46bb      	mov	fp, r7
 800032e:	46b2      	mov	sl, r6
 8000330:	46a9      	mov	r9, r5
 8000332:	46a0      	mov	r8, r4
 8000334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000336:	2200      	movs	r2, #0
 8000338:	2400      	movs	r4, #0
 800033a:	4690      	mov	r8, r2
 800033c:	4ba6      	ldr	r3, [pc, #664]	@ (80005d8 <__aeabi_ddiv+0x37c>)
 800033e:	e7ed      	b.n	800031c <__aeabi_ddiv+0xc0>
 8000340:	002e      	movs	r6, r5
 8000342:	e7df      	b.n	8000304 <__aeabi_ddiv+0xa8>
 8000344:	45cb      	cmp	fp, r9
 8000346:	d200      	bcs.n	800034a <__aeabi_ddiv+0xee>
 8000348:	e1d4      	b.n	80006f4 <__aeabi_ddiv+0x498>
 800034a:	d100      	bne.n	800034e <__aeabi_ddiv+0xf2>
 800034c:	e1cf      	b.n	80006ee <__aeabi_ddiv+0x492>
 800034e:	2301      	movs	r3, #1
 8000350:	425b      	negs	r3, r3
 8000352:	469c      	mov	ip, r3
 8000354:	4644      	mov	r4, r8
 8000356:	4648      	mov	r0, r9
 8000358:	2700      	movs	r7, #0
 800035a:	44e2      	add	sl, ip
 800035c:	465b      	mov	r3, fp
 800035e:	0e15      	lsrs	r5, r2, #24
 8000360:	021b      	lsls	r3, r3, #8
 8000362:	431d      	orrs	r5, r3
 8000364:	0c19      	lsrs	r1, r3, #16
 8000366:	042b      	lsls	r3, r5, #16
 8000368:	0212      	lsls	r2, r2, #8
 800036a:	9500      	str	r5, [sp, #0]
 800036c:	0c1d      	lsrs	r5, r3, #16
 800036e:	4691      	mov	r9, r2
 8000370:	9102      	str	r1, [sp, #8]
 8000372:	9503      	str	r5, [sp, #12]
 8000374:	f7ff ff4e 	bl	8000214 <__aeabi_uidivmod>
 8000378:	0002      	movs	r2, r0
 800037a:	436a      	muls	r2, r5
 800037c:	040b      	lsls	r3, r1, #16
 800037e:	0c21      	lsrs	r1, r4, #16
 8000380:	4680      	mov	r8, r0
 8000382:	4319      	orrs	r1, r3
 8000384:	428a      	cmp	r2, r1
 8000386:	d909      	bls.n	800039c <__aeabi_ddiv+0x140>
 8000388:	9d00      	ldr	r5, [sp, #0]
 800038a:	2301      	movs	r3, #1
 800038c:	46ac      	mov	ip, r5
 800038e:	425b      	negs	r3, r3
 8000390:	4461      	add	r1, ip
 8000392:	469c      	mov	ip, r3
 8000394:	44e0      	add	r8, ip
 8000396:	428d      	cmp	r5, r1
 8000398:	d800      	bhi.n	800039c <__aeabi_ddiv+0x140>
 800039a:	e1fb      	b.n	8000794 <__aeabi_ddiv+0x538>
 800039c:	1a88      	subs	r0, r1, r2
 800039e:	9902      	ldr	r1, [sp, #8]
 80003a0:	f7ff ff38 	bl	8000214 <__aeabi_uidivmod>
 80003a4:	9a03      	ldr	r2, [sp, #12]
 80003a6:	0424      	lsls	r4, r4, #16
 80003a8:	4342      	muls	r2, r0
 80003aa:	0409      	lsls	r1, r1, #16
 80003ac:	0c24      	lsrs	r4, r4, #16
 80003ae:	0003      	movs	r3, r0
 80003b0:	430c      	orrs	r4, r1
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d906      	bls.n	80003c4 <__aeabi_ddiv+0x168>
 80003b6:	9900      	ldr	r1, [sp, #0]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	468c      	mov	ip, r1
 80003bc:	4464      	add	r4, ip
 80003be:	42a1      	cmp	r1, r4
 80003c0:	d800      	bhi.n	80003c4 <__aeabi_ddiv+0x168>
 80003c2:	e1e1      	b.n	8000788 <__aeabi_ddiv+0x52c>
 80003c4:	1aa0      	subs	r0, r4, r2
 80003c6:	4642      	mov	r2, r8
 80003c8:	0412      	lsls	r2, r2, #16
 80003ca:	431a      	orrs	r2, r3
 80003cc:	4693      	mov	fp, r2
 80003ce:	464b      	mov	r3, r9
 80003d0:	4659      	mov	r1, fp
 80003d2:	0c1b      	lsrs	r3, r3, #16
 80003d4:	001d      	movs	r5, r3
 80003d6:	9304      	str	r3, [sp, #16]
 80003d8:	040b      	lsls	r3, r1, #16
 80003da:	4649      	mov	r1, r9
 80003dc:	0409      	lsls	r1, r1, #16
 80003de:	0c09      	lsrs	r1, r1, #16
 80003e0:	000c      	movs	r4, r1
 80003e2:	0c1b      	lsrs	r3, r3, #16
 80003e4:	435c      	muls	r4, r3
 80003e6:	0c12      	lsrs	r2, r2, #16
 80003e8:	436b      	muls	r3, r5
 80003ea:	4688      	mov	r8, r1
 80003ec:	4351      	muls	r1, r2
 80003ee:	436a      	muls	r2, r5
 80003f0:	0c25      	lsrs	r5, r4, #16
 80003f2:	46ac      	mov	ip, r5
 80003f4:	185b      	adds	r3, r3, r1
 80003f6:	4463      	add	r3, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d903      	bls.n	8000404 <__aeabi_ddiv+0x1a8>
 80003fc:	2180      	movs	r1, #128	@ 0x80
 80003fe:	0249      	lsls	r1, r1, #9
 8000400:	468c      	mov	ip, r1
 8000402:	4462      	add	r2, ip
 8000404:	0c19      	lsrs	r1, r3, #16
 8000406:	0424      	lsls	r4, r4, #16
 8000408:	041b      	lsls	r3, r3, #16
 800040a:	0c24      	lsrs	r4, r4, #16
 800040c:	188a      	adds	r2, r1, r2
 800040e:	191c      	adds	r4, r3, r4
 8000410:	4290      	cmp	r0, r2
 8000412:	d302      	bcc.n	800041a <__aeabi_ddiv+0x1be>
 8000414:	d116      	bne.n	8000444 <__aeabi_ddiv+0x1e8>
 8000416:	42a7      	cmp	r7, r4
 8000418:	d214      	bcs.n	8000444 <__aeabi_ddiv+0x1e8>
 800041a:	465b      	mov	r3, fp
 800041c:	9d00      	ldr	r5, [sp, #0]
 800041e:	3b01      	subs	r3, #1
 8000420:	444f      	add	r7, r9
 8000422:	9305      	str	r3, [sp, #20]
 8000424:	454f      	cmp	r7, r9
 8000426:	419b      	sbcs	r3, r3
 8000428:	46ac      	mov	ip, r5
 800042a:	425b      	negs	r3, r3
 800042c:	4463      	add	r3, ip
 800042e:	18c0      	adds	r0, r0, r3
 8000430:	4285      	cmp	r5, r0
 8000432:	d300      	bcc.n	8000436 <__aeabi_ddiv+0x1da>
 8000434:	e1a1      	b.n	800077a <__aeabi_ddiv+0x51e>
 8000436:	4282      	cmp	r2, r0
 8000438:	d900      	bls.n	800043c <__aeabi_ddiv+0x1e0>
 800043a:	e1f6      	b.n	800082a <__aeabi_ddiv+0x5ce>
 800043c:	d100      	bne.n	8000440 <__aeabi_ddiv+0x1e4>
 800043e:	e1f1      	b.n	8000824 <__aeabi_ddiv+0x5c8>
 8000440:	9b05      	ldr	r3, [sp, #20]
 8000442:	469b      	mov	fp, r3
 8000444:	1b3c      	subs	r4, r7, r4
 8000446:	42a7      	cmp	r7, r4
 8000448:	41bf      	sbcs	r7, r7
 800044a:	9d00      	ldr	r5, [sp, #0]
 800044c:	1a80      	subs	r0, r0, r2
 800044e:	427f      	negs	r7, r7
 8000450:	1bc0      	subs	r0, r0, r7
 8000452:	4285      	cmp	r5, r0
 8000454:	d100      	bne.n	8000458 <__aeabi_ddiv+0x1fc>
 8000456:	e1d0      	b.n	80007fa <__aeabi_ddiv+0x59e>
 8000458:	9902      	ldr	r1, [sp, #8]
 800045a:	f7ff fedb 	bl	8000214 <__aeabi_uidivmod>
 800045e:	9a03      	ldr	r2, [sp, #12]
 8000460:	040b      	lsls	r3, r1, #16
 8000462:	4342      	muls	r2, r0
 8000464:	0c21      	lsrs	r1, r4, #16
 8000466:	0007      	movs	r7, r0
 8000468:	4319      	orrs	r1, r3
 800046a:	428a      	cmp	r2, r1
 800046c:	d900      	bls.n	8000470 <__aeabi_ddiv+0x214>
 800046e:	e178      	b.n	8000762 <__aeabi_ddiv+0x506>
 8000470:	1a88      	subs	r0, r1, r2
 8000472:	9902      	ldr	r1, [sp, #8]
 8000474:	f7ff fece 	bl	8000214 <__aeabi_uidivmod>
 8000478:	9a03      	ldr	r2, [sp, #12]
 800047a:	0424      	lsls	r4, r4, #16
 800047c:	4342      	muls	r2, r0
 800047e:	0409      	lsls	r1, r1, #16
 8000480:	0c24      	lsrs	r4, r4, #16
 8000482:	0003      	movs	r3, r0
 8000484:	430c      	orrs	r4, r1
 8000486:	42a2      	cmp	r2, r4
 8000488:	d900      	bls.n	800048c <__aeabi_ddiv+0x230>
 800048a:	e15d      	b.n	8000748 <__aeabi_ddiv+0x4ec>
 800048c:	4641      	mov	r1, r8
 800048e:	1aa4      	subs	r4, r4, r2
 8000490:	043a      	lsls	r2, r7, #16
 8000492:	431a      	orrs	r2, r3
 8000494:	9d04      	ldr	r5, [sp, #16]
 8000496:	0413      	lsls	r3, r2, #16
 8000498:	0c1b      	lsrs	r3, r3, #16
 800049a:	4359      	muls	r1, r3
 800049c:	4647      	mov	r7, r8
 800049e:	436b      	muls	r3, r5
 80004a0:	469c      	mov	ip, r3
 80004a2:	0c10      	lsrs	r0, r2, #16
 80004a4:	4347      	muls	r7, r0
 80004a6:	0c0b      	lsrs	r3, r1, #16
 80004a8:	44bc      	add	ip, r7
 80004aa:	4463      	add	r3, ip
 80004ac:	4368      	muls	r0, r5
 80004ae:	429f      	cmp	r7, r3
 80004b0:	d903      	bls.n	80004ba <__aeabi_ddiv+0x25e>
 80004b2:	2580      	movs	r5, #128	@ 0x80
 80004b4:	026d      	lsls	r5, r5, #9
 80004b6:	46ac      	mov	ip, r5
 80004b8:	4460      	add	r0, ip
 80004ba:	0c1f      	lsrs	r7, r3, #16
 80004bc:	0409      	lsls	r1, r1, #16
 80004be:	041b      	lsls	r3, r3, #16
 80004c0:	0c09      	lsrs	r1, r1, #16
 80004c2:	183f      	adds	r7, r7, r0
 80004c4:	185b      	adds	r3, r3, r1
 80004c6:	42bc      	cmp	r4, r7
 80004c8:	d200      	bcs.n	80004cc <__aeabi_ddiv+0x270>
 80004ca:	e102      	b.n	80006d2 <__aeabi_ddiv+0x476>
 80004cc:	d100      	bne.n	80004d0 <__aeabi_ddiv+0x274>
 80004ce:	e0fd      	b.n	80006cc <__aeabi_ddiv+0x470>
 80004d0:	2301      	movs	r3, #1
 80004d2:	431a      	orrs	r2, r3
 80004d4:	4b43      	ldr	r3, [pc, #268]	@ (80005e4 <__aeabi_ddiv+0x388>)
 80004d6:	4453      	add	r3, sl
 80004d8:	2b00      	cmp	r3, #0
 80004da:	dc00      	bgt.n	80004de <__aeabi_ddiv+0x282>
 80004dc:	e0ae      	b.n	800063c <__aeabi_ddiv+0x3e0>
 80004de:	0751      	lsls	r1, r2, #29
 80004e0:	d000      	beq.n	80004e4 <__aeabi_ddiv+0x288>
 80004e2:	e198      	b.n	8000816 <__aeabi_ddiv+0x5ba>
 80004e4:	4659      	mov	r1, fp
 80004e6:	01c9      	lsls	r1, r1, #7
 80004e8:	d506      	bpl.n	80004f8 <__aeabi_ddiv+0x29c>
 80004ea:	4659      	mov	r1, fp
 80004ec:	4b3e      	ldr	r3, [pc, #248]	@ (80005e8 <__aeabi_ddiv+0x38c>)
 80004ee:	4019      	ands	r1, r3
 80004f0:	2380      	movs	r3, #128	@ 0x80
 80004f2:	468b      	mov	fp, r1
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	4453      	add	r3, sl
 80004f8:	493c      	ldr	r1, [pc, #240]	@ (80005ec <__aeabi_ddiv+0x390>)
 80004fa:	428b      	cmp	r3, r1
 80004fc:	dd00      	ble.n	8000500 <__aeabi_ddiv+0x2a4>
 80004fe:	e71a      	b.n	8000336 <__aeabi_ddiv+0xda>
 8000500:	4659      	mov	r1, fp
 8000502:	08d2      	lsrs	r2, r2, #3
 8000504:	0749      	lsls	r1, r1, #29
 8000506:	4311      	orrs	r1, r2
 8000508:	465a      	mov	r2, fp
 800050a:	055b      	lsls	r3, r3, #21
 800050c:	0254      	lsls	r4, r2, #9
 800050e:	4688      	mov	r8, r1
 8000510:	0b24      	lsrs	r4, r4, #12
 8000512:	0d5b      	lsrs	r3, r3, #21
 8000514:	e702      	b.n	800031c <__aeabi_ddiv+0xc0>
 8000516:	465a      	mov	r2, fp
 8000518:	9b00      	ldr	r3, [sp, #0]
 800051a:	431a      	orrs	r2, r3
 800051c:	d100      	bne.n	8000520 <__aeabi_ddiv+0x2c4>
 800051e:	e07e      	b.n	800061e <__aeabi_ddiv+0x3c2>
 8000520:	465b      	mov	r3, fp
 8000522:	2b00      	cmp	r3, #0
 8000524:	d100      	bne.n	8000528 <__aeabi_ddiv+0x2cc>
 8000526:	e100      	b.n	800072a <__aeabi_ddiv+0x4ce>
 8000528:	4658      	mov	r0, fp
 800052a:	f001 f8b3 	bl	8001694 <__clzsi2>
 800052e:	0002      	movs	r2, r0
 8000530:	0003      	movs	r3, r0
 8000532:	3a0b      	subs	r2, #11
 8000534:	271d      	movs	r7, #29
 8000536:	9e00      	ldr	r6, [sp, #0]
 8000538:	1aba      	subs	r2, r7, r2
 800053a:	0019      	movs	r1, r3
 800053c:	4658      	mov	r0, fp
 800053e:	40d6      	lsrs	r6, r2
 8000540:	3908      	subs	r1, #8
 8000542:	4088      	lsls	r0, r1
 8000544:	0032      	movs	r2, r6
 8000546:	4302      	orrs	r2, r0
 8000548:	4693      	mov	fp, r2
 800054a:	9a00      	ldr	r2, [sp, #0]
 800054c:	408a      	lsls	r2, r1
 800054e:	4928      	ldr	r1, [pc, #160]	@ (80005f0 <__aeabi_ddiv+0x394>)
 8000550:	4453      	add	r3, sl
 8000552:	468a      	mov	sl, r1
 8000554:	449a      	add	sl, r3
 8000556:	2300      	movs	r3, #0
 8000558:	e6c8      	b.n	80002ec <__aeabi_ddiv+0x90>
 800055a:	465b      	mov	r3, fp
 800055c:	4303      	orrs	r3, r0
 800055e:	4699      	mov	r9, r3
 8000560:	d056      	beq.n	8000610 <__aeabi_ddiv+0x3b4>
 8000562:	465b      	mov	r3, fp
 8000564:	2b00      	cmp	r3, #0
 8000566:	d100      	bne.n	800056a <__aeabi_ddiv+0x30e>
 8000568:	e0cd      	b.n	8000706 <__aeabi_ddiv+0x4aa>
 800056a:	4658      	mov	r0, fp
 800056c:	f001 f892 	bl	8001694 <__clzsi2>
 8000570:	230b      	movs	r3, #11
 8000572:	425b      	negs	r3, r3
 8000574:	469c      	mov	ip, r3
 8000576:	0002      	movs	r2, r0
 8000578:	4484      	add	ip, r0
 800057a:	4666      	mov	r6, ip
 800057c:	231d      	movs	r3, #29
 800057e:	1b9b      	subs	r3, r3, r6
 8000580:	0026      	movs	r6, r4
 8000582:	0011      	movs	r1, r2
 8000584:	4658      	mov	r0, fp
 8000586:	40de      	lsrs	r6, r3
 8000588:	3908      	subs	r1, #8
 800058a:	4088      	lsls	r0, r1
 800058c:	0033      	movs	r3, r6
 800058e:	4303      	orrs	r3, r0
 8000590:	4699      	mov	r9, r3
 8000592:	0023      	movs	r3, r4
 8000594:	408b      	lsls	r3, r1
 8000596:	4698      	mov	r8, r3
 8000598:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <__aeabi_ddiv+0x398>)
 800059a:	2400      	movs	r4, #0
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	469a      	mov	sl, r3
 80005a0:	2300      	movs	r3, #0
 80005a2:	9303      	str	r3, [sp, #12]
 80005a4:	e682      	b.n	80002ac <__aeabi_ddiv+0x50>
 80005a6:	465a      	mov	r2, fp
 80005a8:	4302      	orrs	r2, r0
 80005aa:	4691      	mov	r9, r2
 80005ac:	d12a      	bne.n	8000604 <__aeabi_ddiv+0x3a8>
 80005ae:	2200      	movs	r2, #0
 80005b0:	469a      	mov	sl, r3
 80005b2:	2302      	movs	r3, #2
 80005b4:	4690      	mov	r8, r2
 80005b6:	2408      	movs	r4, #8
 80005b8:	9303      	str	r3, [sp, #12]
 80005ba:	e677      	b.n	80002ac <__aeabi_ddiv+0x50>
 80005bc:	465a      	mov	r2, fp
 80005be:	9b00      	ldr	r3, [sp, #0]
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <__aeabi_ddiv+0x39c>)
 80005c4:	469c      	mov	ip, r3
 80005c6:	44e2      	add	sl, ip
 80005c8:	2a00      	cmp	r2, #0
 80005ca:	d117      	bne.n	80005fc <__aeabi_ddiv+0x3a0>
 80005cc:	2302      	movs	r3, #2
 80005ce:	431c      	orrs	r4, r3
 80005d0:	2300      	movs	r3, #0
 80005d2:	469b      	mov	fp, r3
 80005d4:	3302      	adds	r3, #2
 80005d6:	e689      	b.n	80002ec <__aeabi_ddiv+0x90>
 80005d8:	000007ff 	.word	0x000007ff
 80005dc:	fffffc01 	.word	0xfffffc01
 80005e0:	08004558 	.word	0x08004558
 80005e4:	000003ff 	.word	0x000003ff
 80005e8:	feffffff 	.word	0xfeffffff
 80005ec:	000007fe 	.word	0x000007fe
 80005f0:	000003f3 	.word	0x000003f3
 80005f4:	fffffc0d 	.word	0xfffffc0d
 80005f8:	fffff801 	.word	0xfffff801
 80005fc:	2303      	movs	r3, #3
 80005fe:	0032      	movs	r2, r6
 8000600:	431c      	orrs	r4, r3
 8000602:	e673      	b.n	80002ec <__aeabi_ddiv+0x90>
 8000604:	469a      	mov	sl, r3
 8000606:	2303      	movs	r3, #3
 8000608:	46d9      	mov	r9, fp
 800060a:	240c      	movs	r4, #12
 800060c:	9303      	str	r3, [sp, #12]
 800060e:	e64d      	b.n	80002ac <__aeabi_ddiv+0x50>
 8000610:	2300      	movs	r3, #0
 8000612:	4698      	mov	r8, r3
 8000614:	469a      	mov	sl, r3
 8000616:	3301      	adds	r3, #1
 8000618:	2404      	movs	r4, #4
 800061a:	9303      	str	r3, [sp, #12]
 800061c:	e646      	b.n	80002ac <__aeabi_ddiv+0x50>
 800061e:	2301      	movs	r3, #1
 8000620:	431c      	orrs	r4, r3
 8000622:	2300      	movs	r3, #0
 8000624:	469b      	mov	fp, r3
 8000626:	3301      	adds	r3, #1
 8000628:	e660      	b.n	80002ec <__aeabi_ddiv+0x90>
 800062a:	2300      	movs	r3, #0
 800062c:	2480      	movs	r4, #128	@ 0x80
 800062e:	4698      	mov	r8, r3
 8000630:	2600      	movs	r6, #0
 8000632:	4b92      	ldr	r3, [pc, #584]	@ (800087c <__aeabi_ddiv+0x620>)
 8000634:	0324      	lsls	r4, r4, #12
 8000636:	e671      	b.n	800031c <__aeabi_ddiv+0xc0>
 8000638:	2201      	movs	r2, #1
 800063a:	4252      	negs	r2, r2
 800063c:	2101      	movs	r1, #1
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	2938      	cmp	r1, #56	@ 0x38
 8000642:	dd00      	ble.n	8000646 <__aeabi_ddiv+0x3ea>
 8000644:	e666      	b.n	8000314 <__aeabi_ddiv+0xb8>
 8000646:	291f      	cmp	r1, #31
 8000648:	dc00      	bgt.n	800064c <__aeabi_ddiv+0x3f0>
 800064a:	e0ab      	b.n	80007a4 <__aeabi_ddiv+0x548>
 800064c:	201f      	movs	r0, #31
 800064e:	4240      	negs	r0, r0
 8000650:	1ac3      	subs	r3, r0, r3
 8000652:	4658      	mov	r0, fp
 8000654:	40d8      	lsrs	r0, r3
 8000656:	0003      	movs	r3, r0
 8000658:	2920      	cmp	r1, #32
 800065a:	d004      	beq.n	8000666 <__aeabi_ddiv+0x40a>
 800065c:	4658      	mov	r0, fp
 800065e:	4988      	ldr	r1, [pc, #544]	@ (8000880 <__aeabi_ddiv+0x624>)
 8000660:	4451      	add	r1, sl
 8000662:	4088      	lsls	r0, r1
 8000664:	4302      	orrs	r2, r0
 8000666:	1e51      	subs	r1, r2, #1
 8000668:	418a      	sbcs	r2, r1
 800066a:	431a      	orrs	r2, r3
 800066c:	2307      	movs	r3, #7
 800066e:	0019      	movs	r1, r3
 8000670:	2400      	movs	r4, #0
 8000672:	4011      	ands	r1, r2
 8000674:	4213      	tst	r3, r2
 8000676:	d00c      	beq.n	8000692 <__aeabi_ddiv+0x436>
 8000678:	230f      	movs	r3, #15
 800067a:	4013      	ands	r3, r2
 800067c:	2b04      	cmp	r3, #4
 800067e:	d100      	bne.n	8000682 <__aeabi_ddiv+0x426>
 8000680:	e0f9      	b.n	8000876 <__aeabi_ddiv+0x61a>
 8000682:	1d11      	adds	r1, r2, #4
 8000684:	4291      	cmp	r1, r2
 8000686:	419b      	sbcs	r3, r3
 8000688:	000a      	movs	r2, r1
 800068a:	425b      	negs	r3, r3
 800068c:	0759      	lsls	r1, r3, #29
 800068e:	025b      	lsls	r3, r3, #9
 8000690:	0b1c      	lsrs	r4, r3, #12
 8000692:	08d2      	lsrs	r2, r2, #3
 8000694:	430a      	orrs	r2, r1
 8000696:	4690      	mov	r8, r2
 8000698:	2300      	movs	r3, #0
 800069a:	e63f      	b.n	800031c <__aeabi_ddiv+0xc0>
 800069c:	2480      	movs	r4, #128	@ 0x80
 800069e:	464b      	mov	r3, r9
 80006a0:	0324      	lsls	r4, r4, #12
 80006a2:	4223      	tst	r3, r4
 80006a4:	d009      	beq.n	80006ba <__aeabi_ddiv+0x45e>
 80006a6:	465b      	mov	r3, fp
 80006a8:	4223      	tst	r3, r4
 80006aa:	d106      	bne.n	80006ba <__aeabi_ddiv+0x45e>
 80006ac:	431c      	orrs	r4, r3
 80006ae:	0324      	lsls	r4, r4, #12
 80006b0:	002e      	movs	r6, r5
 80006b2:	4690      	mov	r8, r2
 80006b4:	4b71      	ldr	r3, [pc, #452]	@ (800087c <__aeabi_ddiv+0x620>)
 80006b6:	0b24      	lsrs	r4, r4, #12
 80006b8:	e630      	b.n	800031c <__aeabi_ddiv+0xc0>
 80006ba:	2480      	movs	r4, #128	@ 0x80
 80006bc:	464b      	mov	r3, r9
 80006be:	0324      	lsls	r4, r4, #12
 80006c0:	431c      	orrs	r4, r3
 80006c2:	0324      	lsls	r4, r4, #12
 80006c4:	9e02      	ldr	r6, [sp, #8]
 80006c6:	4b6d      	ldr	r3, [pc, #436]	@ (800087c <__aeabi_ddiv+0x620>)
 80006c8:	0b24      	lsrs	r4, r4, #12
 80006ca:	e627      	b.n	800031c <__aeabi_ddiv+0xc0>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_ddiv+0x476>
 80006d0:	e700      	b.n	80004d4 <__aeabi_ddiv+0x278>
 80006d2:	9800      	ldr	r0, [sp, #0]
 80006d4:	1e51      	subs	r1, r2, #1
 80006d6:	4684      	mov	ip, r0
 80006d8:	4464      	add	r4, ip
 80006da:	4284      	cmp	r4, r0
 80006dc:	d200      	bcs.n	80006e0 <__aeabi_ddiv+0x484>
 80006de:	e084      	b.n	80007ea <__aeabi_ddiv+0x58e>
 80006e0:	42bc      	cmp	r4, r7
 80006e2:	d200      	bcs.n	80006e6 <__aeabi_ddiv+0x48a>
 80006e4:	e0ae      	b.n	8000844 <__aeabi_ddiv+0x5e8>
 80006e6:	d100      	bne.n	80006ea <__aeabi_ddiv+0x48e>
 80006e8:	e0c1      	b.n	800086e <__aeabi_ddiv+0x612>
 80006ea:	000a      	movs	r2, r1
 80006ec:	e6f0      	b.n	80004d0 <__aeabi_ddiv+0x274>
 80006ee:	4542      	cmp	r2, r8
 80006f0:	d900      	bls.n	80006f4 <__aeabi_ddiv+0x498>
 80006f2:	e62c      	b.n	800034e <__aeabi_ddiv+0xf2>
 80006f4:	464b      	mov	r3, r9
 80006f6:	07dc      	lsls	r4, r3, #31
 80006f8:	0858      	lsrs	r0, r3, #1
 80006fa:	4643      	mov	r3, r8
 80006fc:	085b      	lsrs	r3, r3, #1
 80006fe:	431c      	orrs	r4, r3
 8000700:	4643      	mov	r3, r8
 8000702:	07df      	lsls	r7, r3, #31
 8000704:	e62a      	b.n	800035c <__aeabi_ddiv+0x100>
 8000706:	f000 ffc5 	bl	8001694 <__clzsi2>
 800070a:	2315      	movs	r3, #21
 800070c:	469c      	mov	ip, r3
 800070e:	4484      	add	ip, r0
 8000710:	0002      	movs	r2, r0
 8000712:	4663      	mov	r3, ip
 8000714:	3220      	adds	r2, #32
 8000716:	2b1c      	cmp	r3, #28
 8000718:	dc00      	bgt.n	800071c <__aeabi_ddiv+0x4c0>
 800071a:	e72e      	b.n	800057a <__aeabi_ddiv+0x31e>
 800071c:	0023      	movs	r3, r4
 800071e:	3808      	subs	r0, #8
 8000720:	4083      	lsls	r3, r0
 8000722:	4699      	mov	r9, r3
 8000724:	2300      	movs	r3, #0
 8000726:	4698      	mov	r8, r3
 8000728:	e736      	b.n	8000598 <__aeabi_ddiv+0x33c>
 800072a:	f000 ffb3 	bl	8001694 <__clzsi2>
 800072e:	0002      	movs	r2, r0
 8000730:	0003      	movs	r3, r0
 8000732:	3215      	adds	r2, #21
 8000734:	3320      	adds	r3, #32
 8000736:	2a1c      	cmp	r2, #28
 8000738:	dc00      	bgt.n	800073c <__aeabi_ddiv+0x4e0>
 800073a:	e6fb      	b.n	8000534 <__aeabi_ddiv+0x2d8>
 800073c:	9900      	ldr	r1, [sp, #0]
 800073e:	3808      	subs	r0, #8
 8000740:	4081      	lsls	r1, r0
 8000742:	2200      	movs	r2, #0
 8000744:	468b      	mov	fp, r1
 8000746:	e702      	b.n	800054e <__aeabi_ddiv+0x2f2>
 8000748:	9900      	ldr	r1, [sp, #0]
 800074a:	3b01      	subs	r3, #1
 800074c:	468c      	mov	ip, r1
 800074e:	4464      	add	r4, ip
 8000750:	42a1      	cmp	r1, r4
 8000752:	d900      	bls.n	8000756 <__aeabi_ddiv+0x4fa>
 8000754:	e69a      	b.n	800048c <__aeabi_ddiv+0x230>
 8000756:	42a2      	cmp	r2, r4
 8000758:	d800      	bhi.n	800075c <__aeabi_ddiv+0x500>
 800075a:	e697      	b.n	800048c <__aeabi_ddiv+0x230>
 800075c:	1e83      	subs	r3, r0, #2
 800075e:	4464      	add	r4, ip
 8000760:	e694      	b.n	800048c <__aeabi_ddiv+0x230>
 8000762:	46ac      	mov	ip, r5
 8000764:	4461      	add	r1, ip
 8000766:	3f01      	subs	r7, #1
 8000768:	428d      	cmp	r5, r1
 800076a:	d900      	bls.n	800076e <__aeabi_ddiv+0x512>
 800076c:	e680      	b.n	8000470 <__aeabi_ddiv+0x214>
 800076e:	428a      	cmp	r2, r1
 8000770:	d800      	bhi.n	8000774 <__aeabi_ddiv+0x518>
 8000772:	e67d      	b.n	8000470 <__aeabi_ddiv+0x214>
 8000774:	1e87      	subs	r7, r0, #2
 8000776:	4461      	add	r1, ip
 8000778:	e67a      	b.n	8000470 <__aeabi_ddiv+0x214>
 800077a:	4285      	cmp	r5, r0
 800077c:	d000      	beq.n	8000780 <__aeabi_ddiv+0x524>
 800077e:	e65f      	b.n	8000440 <__aeabi_ddiv+0x1e4>
 8000780:	45b9      	cmp	r9, r7
 8000782:	d900      	bls.n	8000786 <__aeabi_ddiv+0x52a>
 8000784:	e65c      	b.n	8000440 <__aeabi_ddiv+0x1e4>
 8000786:	e656      	b.n	8000436 <__aeabi_ddiv+0x1da>
 8000788:	42a2      	cmp	r2, r4
 800078a:	d800      	bhi.n	800078e <__aeabi_ddiv+0x532>
 800078c:	e61a      	b.n	80003c4 <__aeabi_ddiv+0x168>
 800078e:	1e83      	subs	r3, r0, #2
 8000790:	4464      	add	r4, ip
 8000792:	e617      	b.n	80003c4 <__aeabi_ddiv+0x168>
 8000794:	428a      	cmp	r2, r1
 8000796:	d800      	bhi.n	800079a <__aeabi_ddiv+0x53e>
 8000798:	e600      	b.n	800039c <__aeabi_ddiv+0x140>
 800079a:	46ac      	mov	ip, r5
 800079c:	1e83      	subs	r3, r0, #2
 800079e:	4698      	mov	r8, r3
 80007a0:	4461      	add	r1, ip
 80007a2:	e5fb      	b.n	800039c <__aeabi_ddiv+0x140>
 80007a4:	4837      	ldr	r0, [pc, #220]	@ (8000884 <__aeabi_ddiv+0x628>)
 80007a6:	0014      	movs	r4, r2
 80007a8:	4450      	add	r0, sl
 80007aa:	4082      	lsls	r2, r0
 80007ac:	465b      	mov	r3, fp
 80007ae:	0017      	movs	r7, r2
 80007b0:	4083      	lsls	r3, r0
 80007b2:	40cc      	lsrs	r4, r1
 80007b4:	1e7a      	subs	r2, r7, #1
 80007b6:	4197      	sbcs	r7, r2
 80007b8:	4323      	orrs	r3, r4
 80007ba:	433b      	orrs	r3, r7
 80007bc:	001a      	movs	r2, r3
 80007be:	465b      	mov	r3, fp
 80007c0:	40cb      	lsrs	r3, r1
 80007c2:	0751      	lsls	r1, r2, #29
 80007c4:	d009      	beq.n	80007da <__aeabi_ddiv+0x57e>
 80007c6:	210f      	movs	r1, #15
 80007c8:	4011      	ands	r1, r2
 80007ca:	2904      	cmp	r1, #4
 80007cc:	d005      	beq.n	80007da <__aeabi_ddiv+0x57e>
 80007ce:	1d11      	adds	r1, r2, #4
 80007d0:	4291      	cmp	r1, r2
 80007d2:	4192      	sbcs	r2, r2
 80007d4:	4252      	negs	r2, r2
 80007d6:	189b      	adds	r3, r3, r2
 80007d8:	000a      	movs	r2, r1
 80007da:	0219      	lsls	r1, r3, #8
 80007dc:	d400      	bmi.n	80007e0 <__aeabi_ddiv+0x584>
 80007de:	e755      	b.n	800068c <__aeabi_ddiv+0x430>
 80007e0:	2200      	movs	r2, #0
 80007e2:	2301      	movs	r3, #1
 80007e4:	2400      	movs	r4, #0
 80007e6:	4690      	mov	r8, r2
 80007e8:	e598      	b.n	800031c <__aeabi_ddiv+0xc0>
 80007ea:	000a      	movs	r2, r1
 80007ec:	42bc      	cmp	r4, r7
 80007ee:	d000      	beq.n	80007f2 <__aeabi_ddiv+0x596>
 80007f0:	e66e      	b.n	80004d0 <__aeabi_ddiv+0x274>
 80007f2:	454b      	cmp	r3, r9
 80007f4:	d000      	beq.n	80007f8 <__aeabi_ddiv+0x59c>
 80007f6:	e66b      	b.n	80004d0 <__aeabi_ddiv+0x274>
 80007f8:	e66c      	b.n	80004d4 <__aeabi_ddiv+0x278>
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <__aeabi_ddiv+0x62c>)
 80007fc:	4a23      	ldr	r2, [pc, #140]	@ (800088c <__aeabi_ddiv+0x630>)
 80007fe:	4453      	add	r3, sl
 8000800:	4592      	cmp	sl, r2
 8000802:	da00      	bge.n	8000806 <__aeabi_ddiv+0x5aa>
 8000804:	e718      	b.n	8000638 <__aeabi_ddiv+0x3dc>
 8000806:	2101      	movs	r1, #1
 8000808:	4249      	negs	r1, r1
 800080a:	1d0a      	adds	r2, r1, #4
 800080c:	428a      	cmp	r2, r1
 800080e:	4189      	sbcs	r1, r1
 8000810:	4249      	negs	r1, r1
 8000812:	448b      	add	fp, r1
 8000814:	e666      	b.n	80004e4 <__aeabi_ddiv+0x288>
 8000816:	210f      	movs	r1, #15
 8000818:	4011      	ands	r1, r2
 800081a:	2904      	cmp	r1, #4
 800081c:	d100      	bne.n	8000820 <__aeabi_ddiv+0x5c4>
 800081e:	e661      	b.n	80004e4 <__aeabi_ddiv+0x288>
 8000820:	0011      	movs	r1, r2
 8000822:	e7f2      	b.n	800080a <__aeabi_ddiv+0x5ae>
 8000824:	42bc      	cmp	r4, r7
 8000826:	d800      	bhi.n	800082a <__aeabi_ddiv+0x5ce>
 8000828:	e60a      	b.n	8000440 <__aeabi_ddiv+0x1e4>
 800082a:	2302      	movs	r3, #2
 800082c:	425b      	negs	r3, r3
 800082e:	469c      	mov	ip, r3
 8000830:	9900      	ldr	r1, [sp, #0]
 8000832:	444f      	add	r7, r9
 8000834:	454f      	cmp	r7, r9
 8000836:	419b      	sbcs	r3, r3
 8000838:	44e3      	add	fp, ip
 800083a:	468c      	mov	ip, r1
 800083c:	425b      	negs	r3, r3
 800083e:	4463      	add	r3, ip
 8000840:	18c0      	adds	r0, r0, r3
 8000842:	e5ff      	b.n	8000444 <__aeabi_ddiv+0x1e8>
 8000844:	4649      	mov	r1, r9
 8000846:	9d00      	ldr	r5, [sp, #0]
 8000848:	0048      	lsls	r0, r1, #1
 800084a:	4548      	cmp	r0, r9
 800084c:	4189      	sbcs	r1, r1
 800084e:	46ac      	mov	ip, r5
 8000850:	4249      	negs	r1, r1
 8000852:	4461      	add	r1, ip
 8000854:	4681      	mov	r9, r0
 8000856:	3a02      	subs	r2, #2
 8000858:	1864      	adds	r4, r4, r1
 800085a:	e7c7      	b.n	80007ec <__aeabi_ddiv+0x590>
 800085c:	2480      	movs	r4, #128	@ 0x80
 800085e:	465b      	mov	r3, fp
 8000860:	0324      	lsls	r4, r4, #12
 8000862:	431c      	orrs	r4, r3
 8000864:	0324      	lsls	r4, r4, #12
 8000866:	4690      	mov	r8, r2
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <__aeabi_ddiv+0x620>)
 800086a:	0b24      	lsrs	r4, r4, #12
 800086c:	e556      	b.n	800031c <__aeabi_ddiv+0xc0>
 800086e:	4599      	cmp	r9, r3
 8000870:	d3e8      	bcc.n	8000844 <__aeabi_ddiv+0x5e8>
 8000872:	000a      	movs	r2, r1
 8000874:	e7bd      	b.n	80007f2 <__aeabi_ddiv+0x596>
 8000876:	2300      	movs	r3, #0
 8000878:	e708      	b.n	800068c <__aeabi_ddiv+0x430>
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	000007ff 	.word	0x000007ff
 8000880:	0000043e 	.word	0x0000043e
 8000884:	0000041e 	.word	0x0000041e
 8000888:	000003ff 	.word	0x000003ff
 800088c:	fffffc02 	.word	0xfffffc02

08000890 <__aeabi_dmul>:
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	4657      	mov	r7, sl
 8000894:	46de      	mov	lr, fp
 8000896:	464e      	mov	r6, r9
 8000898:	4645      	mov	r5, r8
 800089a:	b5e0      	push	{r5, r6, r7, lr}
 800089c:	001f      	movs	r7, r3
 800089e:	030b      	lsls	r3, r1, #12
 80008a0:	0b1b      	lsrs	r3, r3, #12
 80008a2:	0016      	movs	r6, r2
 80008a4:	469a      	mov	sl, r3
 80008a6:	0fca      	lsrs	r2, r1, #31
 80008a8:	004b      	lsls	r3, r1, #1
 80008aa:	0004      	movs	r4, r0
 80008ac:	4693      	mov	fp, r2
 80008ae:	b087      	sub	sp, #28
 80008b0:	0d5b      	lsrs	r3, r3, #21
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dmul+0x26>
 80008b4:	e0d5      	b.n	8000a62 <__aeabi_dmul+0x1d2>
 80008b6:	4abb      	ldr	r2, [pc, #748]	@ (8000ba4 <__aeabi_dmul+0x314>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d100      	bne.n	80008be <__aeabi_dmul+0x2e>
 80008bc:	e0f8      	b.n	8000ab0 <__aeabi_dmul+0x220>
 80008be:	4651      	mov	r1, sl
 80008c0:	0f42      	lsrs	r2, r0, #29
 80008c2:	00c9      	lsls	r1, r1, #3
 80008c4:	430a      	orrs	r2, r1
 80008c6:	2180      	movs	r1, #128	@ 0x80
 80008c8:	0409      	lsls	r1, r1, #16
 80008ca:	4311      	orrs	r1, r2
 80008cc:	00c2      	lsls	r2, r0, #3
 80008ce:	4691      	mov	r9, r2
 80008d0:	4ab5      	ldr	r2, [pc, #724]	@ (8000ba8 <__aeabi_dmul+0x318>)
 80008d2:	468a      	mov	sl, r1
 80008d4:	189d      	adds	r5, r3, r2
 80008d6:	2300      	movs	r3, #0
 80008d8:	4698      	mov	r8, r3
 80008da:	9302      	str	r3, [sp, #8]
 80008dc:	033c      	lsls	r4, r7, #12
 80008de:	007b      	lsls	r3, r7, #1
 80008e0:	0ffa      	lsrs	r2, r7, #31
 80008e2:	0030      	movs	r0, r6
 80008e4:	0b24      	lsrs	r4, r4, #12
 80008e6:	0d5b      	lsrs	r3, r3, #21
 80008e8:	9200      	str	r2, [sp, #0]
 80008ea:	d100      	bne.n	80008ee <__aeabi_dmul+0x5e>
 80008ec:	e096      	b.n	8000a1c <__aeabi_dmul+0x18c>
 80008ee:	4aad      	ldr	r2, [pc, #692]	@ (8000ba4 <__aeabi_dmul+0x314>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d031      	beq.n	8000958 <__aeabi_dmul+0xc8>
 80008f4:	0f72      	lsrs	r2, r6, #29
 80008f6:	00e4      	lsls	r4, r4, #3
 80008f8:	4322      	orrs	r2, r4
 80008fa:	2480      	movs	r4, #128	@ 0x80
 80008fc:	0424      	lsls	r4, r4, #16
 80008fe:	4314      	orrs	r4, r2
 8000900:	4aa9      	ldr	r2, [pc, #676]	@ (8000ba8 <__aeabi_dmul+0x318>)
 8000902:	00f0      	lsls	r0, r6, #3
 8000904:	4694      	mov	ip, r2
 8000906:	4463      	add	r3, ip
 8000908:	195b      	adds	r3, r3, r5
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	9201      	str	r2, [sp, #4]
 800090e:	4642      	mov	r2, r8
 8000910:	2600      	movs	r6, #0
 8000912:	2a0a      	cmp	r2, #10
 8000914:	dc42      	bgt.n	800099c <__aeabi_dmul+0x10c>
 8000916:	465a      	mov	r2, fp
 8000918:	9900      	ldr	r1, [sp, #0]
 800091a:	404a      	eors	r2, r1
 800091c:	4693      	mov	fp, r2
 800091e:	4642      	mov	r2, r8
 8000920:	2a02      	cmp	r2, #2
 8000922:	dc32      	bgt.n	800098a <__aeabi_dmul+0xfa>
 8000924:	3a01      	subs	r2, #1
 8000926:	2a01      	cmp	r2, #1
 8000928:	d900      	bls.n	800092c <__aeabi_dmul+0x9c>
 800092a:	e149      	b.n	8000bc0 <__aeabi_dmul+0x330>
 800092c:	2e02      	cmp	r6, #2
 800092e:	d100      	bne.n	8000932 <__aeabi_dmul+0xa2>
 8000930:	e0ca      	b.n	8000ac8 <__aeabi_dmul+0x238>
 8000932:	2e01      	cmp	r6, #1
 8000934:	d13d      	bne.n	80009b2 <__aeabi_dmul+0x122>
 8000936:	2300      	movs	r3, #0
 8000938:	2400      	movs	r4, #0
 800093a:	2200      	movs	r2, #0
 800093c:	0010      	movs	r0, r2
 800093e:	465a      	mov	r2, fp
 8000940:	051b      	lsls	r3, r3, #20
 8000942:	4323      	orrs	r3, r4
 8000944:	07d2      	lsls	r2, r2, #31
 8000946:	4313      	orrs	r3, r2
 8000948:	0019      	movs	r1, r3
 800094a:	b007      	add	sp, #28
 800094c:	bcf0      	pop	{r4, r5, r6, r7}
 800094e:	46bb      	mov	fp, r7
 8000950:	46b2      	mov	sl, r6
 8000952:	46a9      	mov	r9, r5
 8000954:	46a0      	mov	r8, r4
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000958:	4b92      	ldr	r3, [pc, #584]	@ (8000ba4 <__aeabi_dmul+0x314>)
 800095a:	4326      	orrs	r6, r4
 800095c:	18eb      	adds	r3, r5, r3
 800095e:	2e00      	cmp	r6, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_dmul+0xd4>
 8000962:	e0bb      	b.n	8000adc <__aeabi_dmul+0x24c>
 8000964:	2203      	movs	r2, #3
 8000966:	4641      	mov	r1, r8
 8000968:	4311      	orrs	r1, r2
 800096a:	465a      	mov	r2, fp
 800096c:	4688      	mov	r8, r1
 800096e:	9900      	ldr	r1, [sp, #0]
 8000970:	404a      	eors	r2, r1
 8000972:	2180      	movs	r1, #128	@ 0x80
 8000974:	0109      	lsls	r1, r1, #4
 8000976:	468c      	mov	ip, r1
 8000978:	0029      	movs	r1, r5
 800097a:	4461      	add	r1, ip
 800097c:	9101      	str	r1, [sp, #4]
 800097e:	4641      	mov	r1, r8
 8000980:	290a      	cmp	r1, #10
 8000982:	dd00      	ble.n	8000986 <__aeabi_dmul+0xf6>
 8000984:	e233      	b.n	8000dee <__aeabi_dmul+0x55e>
 8000986:	4693      	mov	fp, r2
 8000988:	2603      	movs	r6, #3
 800098a:	4642      	mov	r2, r8
 800098c:	2701      	movs	r7, #1
 800098e:	4097      	lsls	r7, r2
 8000990:	21a6      	movs	r1, #166	@ 0xa6
 8000992:	003a      	movs	r2, r7
 8000994:	00c9      	lsls	r1, r1, #3
 8000996:	400a      	ands	r2, r1
 8000998:	420f      	tst	r7, r1
 800099a:	d031      	beq.n	8000a00 <__aeabi_dmul+0x170>
 800099c:	9e02      	ldr	r6, [sp, #8]
 800099e:	2e02      	cmp	r6, #2
 80009a0:	d100      	bne.n	80009a4 <__aeabi_dmul+0x114>
 80009a2:	e235      	b.n	8000e10 <__aeabi_dmul+0x580>
 80009a4:	2e03      	cmp	r6, #3
 80009a6:	d100      	bne.n	80009aa <__aeabi_dmul+0x11a>
 80009a8:	e1d2      	b.n	8000d50 <__aeabi_dmul+0x4c0>
 80009aa:	4654      	mov	r4, sl
 80009ac:	4648      	mov	r0, r9
 80009ae:	2e01      	cmp	r6, #1
 80009b0:	d0c1      	beq.n	8000936 <__aeabi_dmul+0xa6>
 80009b2:	9a01      	ldr	r2, [sp, #4]
 80009b4:	4b7d      	ldr	r3, [pc, #500]	@ (8000bac <__aeabi_dmul+0x31c>)
 80009b6:	4694      	mov	ip, r2
 80009b8:	4463      	add	r3, ip
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	dc00      	bgt.n	80009c0 <__aeabi_dmul+0x130>
 80009be:	e0c0      	b.n	8000b42 <__aeabi_dmul+0x2b2>
 80009c0:	0742      	lsls	r2, r0, #29
 80009c2:	d009      	beq.n	80009d8 <__aeabi_dmul+0x148>
 80009c4:	220f      	movs	r2, #15
 80009c6:	4002      	ands	r2, r0
 80009c8:	2a04      	cmp	r2, #4
 80009ca:	d005      	beq.n	80009d8 <__aeabi_dmul+0x148>
 80009cc:	1d02      	adds	r2, r0, #4
 80009ce:	4282      	cmp	r2, r0
 80009d0:	4180      	sbcs	r0, r0
 80009d2:	4240      	negs	r0, r0
 80009d4:	1824      	adds	r4, r4, r0
 80009d6:	0010      	movs	r0, r2
 80009d8:	01e2      	lsls	r2, r4, #7
 80009da:	d506      	bpl.n	80009ea <__aeabi_dmul+0x15a>
 80009dc:	4b74      	ldr	r3, [pc, #464]	@ (8000bb0 <__aeabi_dmul+0x320>)
 80009de:	9a01      	ldr	r2, [sp, #4]
 80009e0:	401c      	ands	r4, r3
 80009e2:	2380      	movs	r3, #128	@ 0x80
 80009e4:	4694      	mov	ip, r2
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	4463      	add	r3, ip
 80009ea:	4a72      	ldr	r2, [pc, #456]	@ (8000bb4 <__aeabi_dmul+0x324>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	dc6b      	bgt.n	8000ac8 <__aeabi_dmul+0x238>
 80009f0:	0762      	lsls	r2, r4, #29
 80009f2:	08c0      	lsrs	r0, r0, #3
 80009f4:	0264      	lsls	r4, r4, #9
 80009f6:	055b      	lsls	r3, r3, #21
 80009f8:	4302      	orrs	r2, r0
 80009fa:	0b24      	lsrs	r4, r4, #12
 80009fc:	0d5b      	lsrs	r3, r3, #21
 80009fe:	e79d      	b.n	800093c <__aeabi_dmul+0xac>
 8000a00:	2190      	movs	r1, #144	@ 0x90
 8000a02:	0089      	lsls	r1, r1, #2
 8000a04:	420f      	tst	r7, r1
 8000a06:	d163      	bne.n	8000ad0 <__aeabi_dmul+0x240>
 8000a08:	2288      	movs	r2, #136	@ 0x88
 8000a0a:	423a      	tst	r2, r7
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dmul+0x180>
 8000a0e:	e0d7      	b.n	8000bc0 <__aeabi_dmul+0x330>
 8000a10:	9b00      	ldr	r3, [sp, #0]
 8000a12:	46a2      	mov	sl, r4
 8000a14:	469b      	mov	fp, r3
 8000a16:	4681      	mov	r9, r0
 8000a18:	9602      	str	r6, [sp, #8]
 8000a1a:	e7bf      	b.n	800099c <__aeabi_dmul+0x10c>
 8000a1c:	0023      	movs	r3, r4
 8000a1e:	4333      	orrs	r3, r6
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dmul+0x194>
 8000a22:	e07f      	b.n	8000b24 <__aeabi_dmul+0x294>
 8000a24:	2c00      	cmp	r4, #0
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dmul+0x19a>
 8000a28:	e1ad      	b.n	8000d86 <__aeabi_dmul+0x4f6>
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	f000 fe32 	bl	8001694 <__clzsi2>
 8000a30:	0002      	movs	r2, r0
 8000a32:	0003      	movs	r3, r0
 8000a34:	3a0b      	subs	r2, #11
 8000a36:	201d      	movs	r0, #29
 8000a38:	0019      	movs	r1, r3
 8000a3a:	1a82      	subs	r2, r0, r2
 8000a3c:	0030      	movs	r0, r6
 8000a3e:	3908      	subs	r1, #8
 8000a40:	40d0      	lsrs	r0, r2
 8000a42:	408c      	lsls	r4, r1
 8000a44:	4304      	orrs	r4, r0
 8000a46:	0030      	movs	r0, r6
 8000a48:	4088      	lsls	r0, r1
 8000a4a:	4a5b      	ldr	r2, [pc, #364]	@ (8000bb8 <__aeabi_dmul+0x328>)
 8000a4c:	1aeb      	subs	r3, r5, r3
 8000a4e:	4694      	mov	ip, r2
 8000a50:	4463      	add	r3, ip
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	9201      	str	r2, [sp, #4]
 8000a56:	4642      	mov	r2, r8
 8000a58:	2600      	movs	r6, #0
 8000a5a:	2a0a      	cmp	r2, #10
 8000a5c:	dc00      	bgt.n	8000a60 <__aeabi_dmul+0x1d0>
 8000a5e:	e75a      	b.n	8000916 <__aeabi_dmul+0x86>
 8000a60:	e79c      	b.n	800099c <__aeabi_dmul+0x10c>
 8000a62:	4653      	mov	r3, sl
 8000a64:	4303      	orrs	r3, r0
 8000a66:	4699      	mov	r9, r3
 8000a68:	d054      	beq.n	8000b14 <__aeabi_dmul+0x284>
 8000a6a:	4653      	mov	r3, sl
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dmul+0x1e2>
 8000a70:	e177      	b.n	8000d62 <__aeabi_dmul+0x4d2>
 8000a72:	4650      	mov	r0, sl
 8000a74:	f000 fe0e 	bl	8001694 <__clzsi2>
 8000a78:	230b      	movs	r3, #11
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	469c      	mov	ip, r3
 8000a7e:	0002      	movs	r2, r0
 8000a80:	4484      	add	ip, r0
 8000a82:	0011      	movs	r1, r2
 8000a84:	4650      	mov	r0, sl
 8000a86:	3908      	subs	r1, #8
 8000a88:	4088      	lsls	r0, r1
 8000a8a:	231d      	movs	r3, #29
 8000a8c:	4680      	mov	r8, r0
 8000a8e:	4660      	mov	r0, ip
 8000a90:	1a1b      	subs	r3, r3, r0
 8000a92:	0020      	movs	r0, r4
 8000a94:	40d8      	lsrs	r0, r3
 8000a96:	0003      	movs	r3, r0
 8000a98:	4640      	mov	r0, r8
 8000a9a:	4303      	orrs	r3, r0
 8000a9c:	469a      	mov	sl, r3
 8000a9e:	0023      	movs	r3, r4
 8000aa0:	408b      	lsls	r3, r1
 8000aa2:	4699      	mov	r9, r3
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	4d44      	ldr	r5, [pc, #272]	@ (8000bb8 <__aeabi_dmul+0x328>)
 8000aa8:	4698      	mov	r8, r3
 8000aaa:	1aad      	subs	r5, r5, r2
 8000aac:	9302      	str	r3, [sp, #8]
 8000aae:	e715      	b.n	80008dc <__aeabi_dmul+0x4c>
 8000ab0:	4652      	mov	r2, sl
 8000ab2:	4302      	orrs	r2, r0
 8000ab4:	4691      	mov	r9, r2
 8000ab6:	d126      	bne.n	8000b06 <__aeabi_dmul+0x276>
 8000ab8:	2200      	movs	r2, #0
 8000aba:	001d      	movs	r5, r3
 8000abc:	2302      	movs	r3, #2
 8000abe:	4692      	mov	sl, r2
 8000ac0:	3208      	adds	r2, #8
 8000ac2:	4690      	mov	r8, r2
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	e709      	b.n	80008dc <__aeabi_dmul+0x4c>
 8000ac8:	2400      	movs	r4, #0
 8000aca:	2200      	movs	r2, #0
 8000acc:	4b35      	ldr	r3, [pc, #212]	@ (8000ba4 <__aeabi_dmul+0x314>)
 8000ace:	e735      	b.n	800093c <__aeabi_dmul+0xac>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2480      	movs	r4, #128	@ 0x80
 8000ad4:	469b      	mov	fp, r3
 8000ad6:	0324      	lsls	r4, r4, #12
 8000ad8:	4b32      	ldr	r3, [pc, #200]	@ (8000ba4 <__aeabi_dmul+0x314>)
 8000ada:	e72f      	b.n	800093c <__aeabi_dmul+0xac>
 8000adc:	2202      	movs	r2, #2
 8000ade:	4641      	mov	r1, r8
 8000ae0:	4311      	orrs	r1, r2
 8000ae2:	2280      	movs	r2, #128	@ 0x80
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	4694      	mov	ip, r2
 8000ae8:	002a      	movs	r2, r5
 8000aea:	4462      	add	r2, ip
 8000aec:	4688      	mov	r8, r1
 8000aee:	9201      	str	r2, [sp, #4]
 8000af0:	290a      	cmp	r1, #10
 8000af2:	dd00      	ble.n	8000af6 <__aeabi_dmul+0x266>
 8000af4:	e752      	b.n	800099c <__aeabi_dmul+0x10c>
 8000af6:	465a      	mov	r2, fp
 8000af8:	2000      	movs	r0, #0
 8000afa:	9900      	ldr	r1, [sp, #0]
 8000afc:	0004      	movs	r4, r0
 8000afe:	404a      	eors	r2, r1
 8000b00:	4693      	mov	fp, r2
 8000b02:	2602      	movs	r6, #2
 8000b04:	e70b      	b.n	800091e <__aeabi_dmul+0x8e>
 8000b06:	220c      	movs	r2, #12
 8000b08:	001d      	movs	r5, r3
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	4690      	mov	r8, r2
 8000b10:	9302      	str	r3, [sp, #8]
 8000b12:	e6e3      	b.n	80008dc <__aeabi_dmul+0x4c>
 8000b14:	2300      	movs	r3, #0
 8000b16:	469a      	mov	sl, r3
 8000b18:	3304      	adds	r3, #4
 8000b1a:	4698      	mov	r8, r3
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	2500      	movs	r5, #0
 8000b20:	9302      	str	r3, [sp, #8]
 8000b22:	e6db      	b.n	80008dc <__aeabi_dmul+0x4c>
 8000b24:	4642      	mov	r2, r8
 8000b26:	3301      	adds	r3, #1
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	002b      	movs	r3, r5
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	9201      	str	r2, [sp, #4]
 8000b32:	4642      	mov	r2, r8
 8000b34:	2400      	movs	r4, #0
 8000b36:	2000      	movs	r0, #0
 8000b38:	2601      	movs	r6, #1
 8000b3a:	2a0a      	cmp	r2, #10
 8000b3c:	dc00      	bgt.n	8000b40 <__aeabi_dmul+0x2b0>
 8000b3e:	e6ea      	b.n	8000916 <__aeabi_dmul+0x86>
 8000b40:	e72c      	b.n	800099c <__aeabi_dmul+0x10c>
 8000b42:	2201      	movs	r2, #1
 8000b44:	1ad2      	subs	r2, r2, r3
 8000b46:	2a38      	cmp	r2, #56	@ 0x38
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dmul+0x2bc>
 8000b4a:	e6f4      	b.n	8000936 <__aeabi_dmul+0xa6>
 8000b4c:	2a1f      	cmp	r2, #31
 8000b4e:	dc00      	bgt.n	8000b52 <__aeabi_dmul+0x2c2>
 8000b50:	e12a      	b.n	8000da8 <__aeabi_dmul+0x518>
 8000b52:	211f      	movs	r1, #31
 8000b54:	4249      	negs	r1, r1
 8000b56:	1acb      	subs	r3, r1, r3
 8000b58:	0021      	movs	r1, r4
 8000b5a:	40d9      	lsrs	r1, r3
 8000b5c:	000b      	movs	r3, r1
 8000b5e:	2a20      	cmp	r2, #32
 8000b60:	d005      	beq.n	8000b6e <__aeabi_dmul+0x2de>
 8000b62:	4a16      	ldr	r2, [pc, #88]	@ (8000bbc <__aeabi_dmul+0x32c>)
 8000b64:	9d01      	ldr	r5, [sp, #4]
 8000b66:	4694      	mov	ip, r2
 8000b68:	4465      	add	r5, ip
 8000b6a:	40ac      	lsls	r4, r5
 8000b6c:	4320      	orrs	r0, r4
 8000b6e:	1e42      	subs	r2, r0, #1
 8000b70:	4190      	sbcs	r0, r2
 8000b72:	4318      	orrs	r0, r3
 8000b74:	2307      	movs	r3, #7
 8000b76:	0019      	movs	r1, r3
 8000b78:	2400      	movs	r4, #0
 8000b7a:	4001      	ands	r1, r0
 8000b7c:	4203      	tst	r3, r0
 8000b7e:	d00c      	beq.n	8000b9a <__aeabi_dmul+0x30a>
 8000b80:	230f      	movs	r3, #15
 8000b82:	4003      	ands	r3, r0
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dmul+0x2fa>
 8000b88:	e140      	b.n	8000e0c <__aeabi_dmul+0x57c>
 8000b8a:	1d03      	adds	r3, r0, #4
 8000b8c:	4283      	cmp	r3, r0
 8000b8e:	41a4      	sbcs	r4, r4
 8000b90:	0018      	movs	r0, r3
 8000b92:	4264      	negs	r4, r4
 8000b94:	0761      	lsls	r1, r4, #29
 8000b96:	0264      	lsls	r4, r4, #9
 8000b98:	0b24      	lsrs	r4, r4, #12
 8000b9a:	08c2      	lsrs	r2, r0, #3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	e6cc      	b.n	800093c <__aeabi_dmul+0xac>
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	000007ff 	.word	0x000007ff
 8000ba8:	fffffc01 	.word	0xfffffc01
 8000bac:	000003ff 	.word	0x000003ff
 8000bb0:	feffffff 	.word	0xfeffffff
 8000bb4:	000007fe 	.word	0x000007fe
 8000bb8:	fffffc0d 	.word	0xfffffc0d
 8000bbc:	0000043e 	.word	0x0000043e
 8000bc0:	4649      	mov	r1, r9
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	0409      	lsls	r1, r1, #16
 8000bc6:	0c09      	lsrs	r1, r1, #16
 8000bc8:	000d      	movs	r5, r1
 8000bca:	0c16      	lsrs	r6, r2, #16
 8000bcc:	0c02      	lsrs	r2, r0, #16
 8000bce:	0400      	lsls	r0, r0, #16
 8000bd0:	0c00      	lsrs	r0, r0, #16
 8000bd2:	4345      	muls	r5, r0
 8000bd4:	46ac      	mov	ip, r5
 8000bd6:	0005      	movs	r5, r0
 8000bd8:	4375      	muls	r5, r6
 8000bda:	46a8      	mov	r8, r5
 8000bdc:	0015      	movs	r5, r2
 8000bde:	000f      	movs	r7, r1
 8000be0:	4375      	muls	r5, r6
 8000be2:	9200      	str	r2, [sp, #0]
 8000be4:	9502      	str	r5, [sp, #8]
 8000be6:	002a      	movs	r2, r5
 8000be8:	9d00      	ldr	r5, [sp, #0]
 8000bea:	436f      	muls	r7, r5
 8000bec:	4665      	mov	r5, ip
 8000bee:	0c2d      	lsrs	r5, r5, #16
 8000bf0:	46a9      	mov	r9, r5
 8000bf2:	4447      	add	r7, r8
 8000bf4:	444f      	add	r7, r9
 8000bf6:	45b8      	cmp	r8, r7
 8000bf8:	d905      	bls.n	8000c06 <__aeabi_dmul+0x376>
 8000bfa:	0015      	movs	r5, r2
 8000bfc:	2280      	movs	r2, #128	@ 0x80
 8000bfe:	0252      	lsls	r2, r2, #9
 8000c00:	4690      	mov	r8, r2
 8000c02:	4445      	add	r5, r8
 8000c04:	9502      	str	r5, [sp, #8]
 8000c06:	0c3d      	lsrs	r5, r7, #16
 8000c08:	9503      	str	r5, [sp, #12]
 8000c0a:	4665      	mov	r5, ip
 8000c0c:	042d      	lsls	r5, r5, #16
 8000c0e:	043f      	lsls	r7, r7, #16
 8000c10:	0c2d      	lsrs	r5, r5, #16
 8000c12:	46ac      	mov	ip, r5
 8000c14:	003d      	movs	r5, r7
 8000c16:	4465      	add	r5, ip
 8000c18:	9504      	str	r5, [sp, #16]
 8000c1a:	0c25      	lsrs	r5, r4, #16
 8000c1c:	0424      	lsls	r4, r4, #16
 8000c1e:	0c24      	lsrs	r4, r4, #16
 8000c20:	46ac      	mov	ip, r5
 8000c22:	0025      	movs	r5, r4
 8000c24:	4375      	muls	r5, r6
 8000c26:	46a8      	mov	r8, r5
 8000c28:	4665      	mov	r5, ip
 8000c2a:	000f      	movs	r7, r1
 8000c2c:	4369      	muls	r1, r5
 8000c2e:	4441      	add	r1, r8
 8000c30:	4689      	mov	r9, r1
 8000c32:	4367      	muls	r7, r4
 8000c34:	0c39      	lsrs	r1, r7, #16
 8000c36:	4449      	add	r1, r9
 8000c38:	436e      	muls	r6, r5
 8000c3a:	4588      	cmp	r8, r1
 8000c3c:	d903      	bls.n	8000c46 <__aeabi_dmul+0x3b6>
 8000c3e:	2280      	movs	r2, #128	@ 0x80
 8000c40:	0252      	lsls	r2, r2, #9
 8000c42:	4690      	mov	r8, r2
 8000c44:	4446      	add	r6, r8
 8000c46:	0c0d      	lsrs	r5, r1, #16
 8000c48:	46a8      	mov	r8, r5
 8000c4a:	0035      	movs	r5, r6
 8000c4c:	4445      	add	r5, r8
 8000c4e:	9505      	str	r5, [sp, #20]
 8000c50:	9d03      	ldr	r5, [sp, #12]
 8000c52:	043f      	lsls	r7, r7, #16
 8000c54:	46a8      	mov	r8, r5
 8000c56:	0c3f      	lsrs	r7, r7, #16
 8000c58:	0409      	lsls	r1, r1, #16
 8000c5a:	19c9      	adds	r1, r1, r7
 8000c5c:	4488      	add	r8, r1
 8000c5e:	4645      	mov	r5, r8
 8000c60:	9503      	str	r5, [sp, #12]
 8000c62:	4655      	mov	r5, sl
 8000c64:	042e      	lsls	r6, r5, #16
 8000c66:	0c36      	lsrs	r6, r6, #16
 8000c68:	0c2f      	lsrs	r7, r5, #16
 8000c6a:	0035      	movs	r5, r6
 8000c6c:	4345      	muls	r5, r0
 8000c6e:	4378      	muls	r0, r7
 8000c70:	4681      	mov	r9, r0
 8000c72:	0038      	movs	r0, r7
 8000c74:	46a8      	mov	r8, r5
 8000c76:	0c2d      	lsrs	r5, r5, #16
 8000c78:	46aa      	mov	sl, r5
 8000c7a:	9a00      	ldr	r2, [sp, #0]
 8000c7c:	4350      	muls	r0, r2
 8000c7e:	4372      	muls	r2, r6
 8000c80:	444a      	add	r2, r9
 8000c82:	4452      	add	r2, sl
 8000c84:	4591      	cmp	r9, r2
 8000c86:	d903      	bls.n	8000c90 <__aeabi_dmul+0x400>
 8000c88:	2580      	movs	r5, #128	@ 0x80
 8000c8a:	026d      	lsls	r5, r5, #9
 8000c8c:	46a9      	mov	r9, r5
 8000c8e:	4448      	add	r0, r9
 8000c90:	0c15      	lsrs	r5, r2, #16
 8000c92:	46a9      	mov	r9, r5
 8000c94:	4645      	mov	r5, r8
 8000c96:	042d      	lsls	r5, r5, #16
 8000c98:	0c2d      	lsrs	r5, r5, #16
 8000c9a:	46a8      	mov	r8, r5
 8000c9c:	4665      	mov	r5, ip
 8000c9e:	437d      	muls	r5, r7
 8000ca0:	0412      	lsls	r2, r2, #16
 8000ca2:	4448      	add	r0, r9
 8000ca4:	4490      	add	r8, r2
 8000ca6:	46a9      	mov	r9, r5
 8000ca8:	0032      	movs	r2, r6
 8000caa:	4665      	mov	r5, ip
 8000cac:	4362      	muls	r2, r4
 8000cae:	436e      	muls	r6, r5
 8000cb0:	437c      	muls	r4, r7
 8000cb2:	0c17      	lsrs	r7, r2, #16
 8000cb4:	1936      	adds	r6, r6, r4
 8000cb6:	19bf      	adds	r7, r7, r6
 8000cb8:	42bc      	cmp	r4, r7
 8000cba:	d903      	bls.n	8000cc4 <__aeabi_dmul+0x434>
 8000cbc:	2480      	movs	r4, #128	@ 0x80
 8000cbe:	0264      	lsls	r4, r4, #9
 8000cc0:	46a4      	mov	ip, r4
 8000cc2:	44e1      	add	r9, ip
 8000cc4:	9c02      	ldr	r4, [sp, #8]
 8000cc6:	9e03      	ldr	r6, [sp, #12]
 8000cc8:	46a4      	mov	ip, r4
 8000cca:	9d05      	ldr	r5, [sp, #20]
 8000ccc:	4466      	add	r6, ip
 8000cce:	428e      	cmp	r6, r1
 8000cd0:	4189      	sbcs	r1, r1
 8000cd2:	46ac      	mov	ip, r5
 8000cd4:	0412      	lsls	r2, r2, #16
 8000cd6:	043c      	lsls	r4, r7, #16
 8000cd8:	0c12      	lsrs	r2, r2, #16
 8000cda:	18a2      	adds	r2, r4, r2
 8000cdc:	4462      	add	r2, ip
 8000cde:	4249      	negs	r1, r1
 8000ce0:	1854      	adds	r4, r2, r1
 8000ce2:	4446      	add	r6, r8
 8000ce4:	46a4      	mov	ip, r4
 8000ce6:	4546      	cmp	r6, r8
 8000ce8:	41a4      	sbcs	r4, r4
 8000cea:	4682      	mov	sl, r0
 8000cec:	4264      	negs	r4, r4
 8000cee:	46a0      	mov	r8, r4
 8000cf0:	42aa      	cmp	r2, r5
 8000cf2:	4192      	sbcs	r2, r2
 8000cf4:	458c      	cmp	ip, r1
 8000cf6:	4189      	sbcs	r1, r1
 8000cf8:	44e2      	add	sl, ip
 8000cfa:	44d0      	add	r8, sl
 8000cfc:	4249      	negs	r1, r1
 8000cfe:	4252      	negs	r2, r2
 8000d00:	430a      	orrs	r2, r1
 8000d02:	45a0      	cmp	r8, r4
 8000d04:	41a4      	sbcs	r4, r4
 8000d06:	4582      	cmp	sl, r0
 8000d08:	4189      	sbcs	r1, r1
 8000d0a:	4264      	negs	r4, r4
 8000d0c:	4249      	negs	r1, r1
 8000d0e:	430c      	orrs	r4, r1
 8000d10:	4641      	mov	r1, r8
 8000d12:	0c3f      	lsrs	r7, r7, #16
 8000d14:	19d2      	adds	r2, r2, r7
 8000d16:	1912      	adds	r2, r2, r4
 8000d18:	0dcc      	lsrs	r4, r1, #23
 8000d1a:	9904      	ldr	r1, [sp, #16]
 8000d1c:	0270      	lsls	r0, r6, #9
 8000d1e:	4308      	orrs	r0, r1
 8000d20:	1e41      	subs	r1, r0, #1
 8000d22:	4188      	sbcs	r0, r1
 8000d24:	4641      	mov	r1, r8
 8000d26:	444a      	add	r2, r9
 8000d28:	0df6      	lsrs	r6, r6, #23
 8000d2a:	0252      	lsls	r2, r2, #9
 8000d2c:	4330      	orrs	r0, r6
 8000d2e:	0249      	lsls	r1, r1, #9
 8000d30:	4314      	orrs	r4, r2
 8000d32:	4308      	orrs	r0, r1
 8000d34:	01d2      	lsls	r2, r2, #7
 8000d36:	d535      	bpl.n	8000da4 <__aeabi_dmul+0x514>
 8000d38:	2201      	movs	r2, #1
 8000d3a:	0843      	lsrs	r3, r0, #1
 8000d3c:	4002      	ands	r2, r0
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	07e0      	lsls	r0, r4, #31
 8000d42:	4318      	orrs	r0, r3
 8000d44:	0864      	lsrs	r4, r4, #1
 8000d46:	e634      	b.n	80009b2 <__aeabi_dmul+0x122>
 8000d48:	9b00      	ldr	r3, [sp, #0]
 8000d4a:	46a2      	mov	sl, r4
 8000d4c:	469b      	mov	fp, r3
 8000d4e:	4681      	mov	r9, r0
 8000d50:	2480      	movs	r4, #128	@ 0x80
 8000d52:	4653      	mov	r3, sl
 8000d54:	0324      	lsls	r4, r4, #12
 8000d56:	431c      	orrs	r4, r3
 8000d58:	0324      	lsls	r4, r4, #12
 8000d5a:	464a      	mov	r2, r9
 8000d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e18 <__aeabi_dmul+0x588>)
 8000d5e:	0b24      	lsrs	r4, r4, #12
 8000d60:	e5ec      	b.n	800093c <__aeabi_dmul+0xac>
 8000d62:	f000 fc97 	bl	8001694 <__clzsi2>
 8000d66:	2315      	movs	r3, #21
 8000d68:	469c      	mov	ip, r3
 8000d6a:	4484      	add	ip, r0
 8000d6c:	0002      	movs	r2, r0
 8000d6e:	4663      	mov	r3, ip
 8000d70:	3220      	adds	r2, #32
 8000d72:	2b1c      	cmp	r3, #28
 8000d74:	dc00      	bgt.n	8000d78 <__aeabi_dmul+0x4e8>
 8000d76:	e684      	b.n	8000a82 <__aeabi_dmul+0x1f2>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4699      	mov	r9, r3
 8000d7c:	0023      	movs	r3, r4
 8000d7e:	3808      	subs	r0, #8
 8000d80:	4083      	lsls	r3, r0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e68e      	b.n	8000aa4 <__aeabi_dmul+0x214>
 8000d86:	f000 fc85 	bl	8001694 <__clzsi2>
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	3215      	adds	r2, #21
 8000d90:	3320      	adds	r3, #32
 8000d92:	2a1c      	cmp	r2, #28
 8000d94:	dc00      	bgt.n	8000d98 <__aeabi_dmul+0x508>
 8000d96:	e64e      	b.n	8000a36 <__aeabi_dmul+0x1a6>
 8000d98:	0002      	movs	r2, r0
 8000d9a:	0034      	movs	r4, r6
 8000d9c:	3a08      	subs	r2, #8
 8000d9e:	2000      	movs	r0, #0
 8000da0:	4094      	lsls	r4, r2
 8000da2:	e652      	b.n	8000a4a <__aeabi_dmul+0x1ba>
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	e604      	b.n	80009b2 <__aeabi_dmul+0x122>
 8000da8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <__aeabi_dmul+0x58c>)
 8000daa:	0021      	movs	r1, r4
 8000dac:	469c      	mov	ip, r3
 8000dae:	0003      	movs	r3, r0
 8000db0:	9d01      	ldr	r5, [sp, #4]
 8000db2:	40d3      	lsrs	r3, r2
 8000db4:	4465      	add	r5, ip
 8000db6:	40a9      	lsls	r1, r5
 8000db8:	4319      	orrs	r1, r3
 8000dba:	0003      	movs	r3, r0
 8000dbc:	40ab      	lsls	r3, r5
 8000dbe:	1e58      	subs	r0, r3, #1
 8000dc0:	4183      	sbcs	r3, r0
 8000dc2:	4319      	orrs	r1, r3
 8000dc4:	0008      	movs	r0, r1
 8000dc6:	40d4      	lsrs	r4, r2
 8000dc8:	074b      	lsls	r3, r1, #29
 8000dca:	d009      	beq.n	8000de0 <__aeabi_dmul+0x550>
 8000dcc:	230f      	movs	r3, #15
 8000dce:	400b      	ands	r3, r1
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d005      	beq.n	8000de0 <__aeabi_dmul+0x550>
 8000dd4:	1d0b      	adds	r3, r1, #4
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	4180      	sbcs	r0, r0
 8000dda:	4240      	negs	r0, r0
 8000ddc:	1824      	adds	r4, r4, r0
 8000dde:	0018      	movs	r0, r3
 8000de0:	0223      	lsls	r3, r4, #8
 8000de2:	d400      	bmi.n	8000de6 <__aeabi_dmul+0x556>
 8000de4:	e6d6      	b.n	8000b94 <__aeabi_dmul+0x304>
 8000de6:	2301      	movs	r3, #1
 8000de8:	2400      	movs	r4, #0
 8000dea:	2200      	movs	r2, #0
 8000dec:	e5a6      	b.n	800093c <__aeabi_dmul+0xac>
 8000dee:	290f      	cmp	r1, #15
 8000df0:	d1aa      	bne.n	8000d48 <__aeabi_dmul+0x4b8>
 8000df2:	2380      	movs	r3, #128	@ 0x80
 8000df4:	4652      	mov	r2, sl
 8000df6:	031b      	lsls	r3, r3, #12
 8000df8:	421a      	tst	r2, r3
 8000dfa:	d0a9      	beq.n	8000d50 <__aeabi_dmul+0x4c0>
 8000dfc:	421c      	tst	r4, r3
 8000dfe:	d1a7      	bne.n	8000d50 <__aeabi_dmul+0x4c0>
 8000e00:	431c      	orrs	r4, r3
 8000e02:	9b00      	ldr	r3, [sp, #0]
 8000e04:	0002      	movs	r2, r0
 8000e06:	469b      	mov	fp, r3
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <__aeabi_dmul+0x588>)
 8000e0a:	e597      	b.n	800093c <__aeabi_dmul+0xac>
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	e6c1      	b.n	8000b94 <__aeabi_dmul+0x304>
 8000e10:	2400      	movs	r4, #0
 8000e12:	4b01      	ldr	r3, [pc, #4]	@ (8000e18 <__aeabi_dmul+0x588>)
 8000e14:	0022      	movs	r2, r4
 8000e16:	e591      	b.n	800093c <__aeabi_dmul+0xac>
 8000e18:	000007ff 	.word	0x000007ff
 8000e1c:	0000041e 	.word	0x0000041e

08000e20 <__aeabi_dsub>:
 8000e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e22:	464e      	mov	r6, r9
 8000e24:	4645      	mov	r5, r8
 8000e26:	46de      	mov	lr, fp
 8000e28:	4657      	mov	r7, sl
 8000e2a:	b5e0      	push	{r5, r6, r7, lr}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	9000      	str	r0, [sp, #0]
 8000e30:	9101      	str	r1, [sp, #4]
 8000e32:	030c      	lsls	r4, r1, #12
 8000e34:	004f      	lsls	r7, r1, #1
 8000e36:	0fce      	lsrs	r6, r1, #31
 8000e38:	0a61      	lsrs	r1, r4, #9
 8000e3a:	9c00      	ldr	r4, [sp, #0]
 8000e3c:	46b0      	mov	r8, r6
 8000e3e:	0f64      	lsrs	r4, r4, #29
 8000e40:	430c      	orrs	r4, r1
 8000e42:	9900      	ldr	r1, [sp, #0]
 8000e44:	0d7f      	lsrs	r7, r7, #21
 8000e46:	00c8      	lsls	r0, r1, #3
 8000e48:	0011      	movs	r1, r2
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	031b      	lsls	r3, r3, #12
 8000e4e:	469c      	mov	ip, r3
 8000e50:	9100      	str	r1, [sp, #0]
 8000e52:	9201      	str	r2, [sp, #4]
 8000e54:	0051      	lsls	r1, r2, #1
 8000e56:	0d4b      	lsrs	r3, r1, #21
 8000e58:	4699      	mov	r9, r3
 8000e5a:	9b01      	ldr	r3, [sp, #4]
 8000e5c:	9d00      	ldr	r5, [sp, #0]
 8000e5e:	0fd9      	lsrs	r1, r3, #31
 8000e60:	4663      	mov	r3, ip
 8000e62:	0f6a      	lsrs	r2, r5, #29
 8000e64:	0a5b      	lsrs	r3, r3, #9
 8000e66:	4313      	orrs	r3, r2
 8000e68:	00ea      	lsls	r2, r5, #3
 8000e6a:	4694      	mov	ip, r2
 8000e6c:	4693      	mov	fp, r2
 8000e6e:	4ac1      	ldr	r2, [pc, #772]	@ (8001174 <__aeabi_dsub+0x354>)
 8000e70:	9003      	str	r0, [sp, #12]
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	4591      	cmp	r9, r2
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dsub+0x5a>
 8000e78:	e0cd      	b.n	8001016 <__aeabi_dsub+0x1f6>
 8000e7a:	2501      	movs	r5, #1
 8000e7c:	4069      	eors	r1, r5
 8000e7e:	464d      	mov	r5, r9
 8000e80:	1b7d      	subs	r5, r7, r5
 8000e82:	46aa      	mov	sl, r5
 8000e84:	428e      	cmp	r6, r1
 8000e86:	d100      	bne.n	8000e8a <__aeabi_dsub+0x6a>
 8000e88:	e080      	b.n	8000f8c <__aeabi_dsub+0x16c>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	dc00      	bgt.n	8000e90 <__aeabi_dsub+0x70>
 8000e8e:	e335      	b.n	80014fc <__aeabi_dsub+0x6dc>
 8000e90:	4649      	mov	r1, r9
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d100      	bne.n	8000e98 <__aeabi_dsub+0x78>
 8000e96:	e0df      	b.n	8001058 <__aeabi_dsub+0x238>
 8000e98:	4297      	cmp	r7, r2
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_dsub+0x7e>
 8000e9c:	e194      	b.n	80011c8 <__aeabi_dsub+0x3a8>
 8000e9e:	4652      	mov	r2, sl
 8000ea0:	2501      	movs	r5, #1
 8000ea2:	2a38      	cmp	r2, #56	@ 0x38
 8000ea4:	dc19      	bgt.n	8000eda <__aeabi_dsub+0xba>
 8000ea6:	2280      	movs	r2, #128	@ 0x80
 8000ea8:	9b02      	ldr	r3, [sp, #8]
 8000eaa:	0412      	lsls	r2, r2, #16
 8000eac:	4313      	orrs	r3, r2
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	2a1f      	cmp	r2, #31
 8000eb4:	dd00      	ble.n	8000eb8 <__aeabi_dsub+0x98>
 8000eb6:	e1e3      	b.n	8001280 <__aeabi_dsub+0x460>
 8000eb8:	4653      	mov	r3, sl
 8000eba:	2220      	movs	r2, #32
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	9d02      	ldr	r5, [sp, #8]
 8000ec0:	1ad2      	subs	r2, r2, r3
 8000ec2:	4095      	lsls	r5, r2
 8000ec4:	40d9      	lsrs	r1, r3
 8000ec6:	430d      	orrs	r5, r1
 8000ec8:	4661      	mov	r1, ip
 8000eca:	4091      	lsls	r1, r2
 8000ecc:	000a      	movs	r2, r1
 8000ece:	1e51      	subs	r1, r2, #1
 8000ed0:	418a      	sbcs	r2, r1
 8000ed2:	4315      	orrs	r5, r2
 8000ed4:	9a02      	ldr	r2, [sp, #8]
 8000ed6:	40da      	lsrs	r2, r3
 8000ed8:	1aa4      	subs	r4, r4, r2
 8000eda:	1b45      	subs	r5, r0, r5
 8000edc:	42a8      	cmp	r0, r5
 8000ede:	4180      	sbcs	r0, r0
 8000ee0:	4240      	negs	r0, r0
 8000ee2:	1a24      	subs	r4, r4, r0
 8000ee4:	0223      	lsls	r3, r4, #8
 8000ee6:	d400      	bmi.n	8000eea <__aeabi_dsub+0xca>
 8000ee8:	e13d      	b.n	8001166 <__aeabi_dsub+0x346>
 8000eea:	0264      	lsls	r4, r4, #9
 8000eec:	0a64      	lsrs	r4, r4, #9
 8000eee:	2c00      	cmp	r4, #0
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dsub+0xd4>
 8000ef2:	e147      	b.n	8001184 <__aeabi_dsub+0x364>
 8000ef4:	0020      	movs	r0, r4
 8000ef6:	f000 fbcd 	bl	8001694 <__clzsi2>
 8000efa:	0003      	movs	r3, r0
 8000efc:	3b08      	subs	r3, #8
 8000efe:	2120      	movs	r1, #32
 8000f00:	0028      	movs	r0, r5
 8000f02:	1aca      	subs	r2, r1, r3
 8000f04:	40d0      	lsrs	r0, r2
 8000f06:	409c      	lsls	r4, r3
 8000f08:	0002      	movs	r2, r0
 8000f0a:	409d      	lsls	r5, r3
 8000f0c:	4322      	orrs	r2, r4
 8000f0e:	429f      	cmp	r7, r3
 8000f10:	dd00      	ble.n	8000f14 <__aeabi_dsub+0xf4>
 8000f12:	e177      	b.n	8001204 <__aeabi_dsub+0x3e4>
 8000f14:	1bd8      	subs	r0, r3, r7
 8000f16:	3001      	adds	r0, #1
 8000f18:	1a09      	subs	r1, r1, r0
 8000f1a:	002c      	movs	r4, r5
 8000f1c:	408d      	lsls	r5, r1
 8000f1e:	40c4      	lsrs	r4, r0
 8000f20:	1e6b      	subs	r3, r5, #1
 8000f22:	419d      	sbcs	r5, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	40c2      	lsrs	r2, r0
 8000f28:	408b      	lsls	r3, r1
 8000f2a:	4325      	orrs	r5, r4
 8000f2c:	2700      	movs	r7, #0
 8000f2e:	0014      	movs	r4, r2
 8000f30:	431d      	orrs	r5, r3
 8000f32:	076b      	lsls	r3, r5, #29
 8000f34:	d009      	beq.n	8000f4a <__aeabi_dsub+0x12a>
 8000f36:	230f      	movs	r3, #15
 8000f38:	402b      	ands	r3, r5
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d005      	beq.n	8000f4a <__aeabi_dsub+0x12a>
 8000f3e:	1d2b      	adds	r3, r5, #4
 8000f40:	42ab      	cmp	r3, r5
 8000f42:	41ad      	sbcs	r5, r5
 8000f44:	426d      	negs	r5, r5
 8000f46:	1964      	adds	r4, r4, r5
 8000f48:	001d      	movs	r5, r3
 8000f4a:	0223      	lsls	r3, r4, #8
 8000f4c:	d400      	bmi.n	8000f50 <__aeabi_dsub+0x130>
 8000f4e:	e140      	b.n	80011d2 <__aeabi_dsub+0x3b2>
 8000f50:	4a88      	ldr	r2, [pc, #544]	@ (8001174 <__aeabi_dsub+0x354>)
 8000f52:	3701      	adds	r7, #1
 8000f54:	4297      	cmp	r7, r2
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dsub+0x13a>
 8000f58:	e101      	b.n	800115e <__aeabi_dsub+0x33e>
 8000f5a:	2601      	movs	r6, #1
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	4986      	ldr	r1, [pc, #536]	@ (8001178 <__aeabi_dsub+0x358>)
 8000f60:	08ed      	lsrs	r5, r5, #3
 8000f62:	4021      	ands	r1, r4
 8000f64:	074a      	lsls	r2, r1, #29
 8000f66:	432a      	orrs	r2, r5
 8000f68:	057c      	lsls	r4, r7, #21
 8000f6a:	024d      	lsls	r5, r1, #9
 8000f6c:	0b2d      	lsrs	r5, r5, #12
 8000f6e:	0d64      	lsrs	r4, r4, #21
 8000f70:	401e      	ands	r6, r3
 8000f72:	0524      	lsls	r4, r4, #20
 8000f74:	432c      	orrs	r4, r5
 8000f76:	07f6      	lsls	r6, r6, #31
 8000f78:	4334      	orrs	r4, r6
 8000f7a:	0010      	movs	r0, r2
 8000f7c:	0021      	movs	r1, r4
 8000f7e:	b005      	add	sp, #20
 8000f80:	bcf0      	pop	{r4, r5, r6, r7}
 8000f82:	46bb      	mov	fp, r7
 8000f84:	46b2      	mov	sl, r6
 8000f86:	46a9      	mov	r9, r5
 8000f88:	46a0      	mov	r8, r4
 8000f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f8c:	2d00      	cmp	r5, #0
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_dsub+0x172>
 8000f90:	e2d0      	b.n	8001534 <__aeabi_dsub+0x714>
 8000f92:	4649      	mov	r1, r9
 8000f94:	2900      	cmp	r1, #0
 8000f96:	d000      	beq.n	8000f9a <__aeabi_dsub+0x17a>
 8000f98:	e0d4      	b.n	8001144 <__aeabi_dsub+0x324>
 8000f9a:	4661      	mov	r1, ip
 8000f9c:	9b02      	ldr	r3, [sp, #8]
 8000f9e:	4319      	orrs	r1, r3
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dsub+0x184>
 8000fa2:	e12b      	b.n	80011fc <__aeabi_dsub+0x3dc>
 8000fa4:	1e69      	subs	r1, r5, #1
 8000fa6:	2d01      	cmp	r5, #1
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dsub+0x18c>
 8000faa:	e1d9      	b.n	8001360 <__aeabi_dsub+0x540>
 8000fac:	4295      	cmp	r5, r2
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dsub+0x192>
 8000fb0:	e10a      	b.n	80011c8 <__aeabi_dsub+0x3a8>
 8000fb2:	2501      	movs	r5, #1
 8000fb4:	2938      	cmp	r1, #56	@ 0x38
 8000fb6:	dc17      	bgt.n	8000fe8 <__aeabi_dsub+0x1c8>
 8000fb8:	468a      	mov	sl, r1
 8000fba:	4653      	mov	r3, sl
 8000fbc:	2b1f      	cmp	r3, #31
 8000fbe:	dd00      	ble.n	8000fc2 <__aeabi_dsub+0x1a2>
 8000fc0:	e1e7      	b.n	8001392 <__aeabi_dsub+0x572>
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	1ad2      	subs	r2, r2, r3
 8000fc6:	9b02      	ldr	r3, [sp, #8]
 8000fc8:	4661      	mov	r1, ip
 8000fca:	4093      	lsls	r3, r2
 8000fcc:	001d      	movs	r5, r3
 8000fce:	4653      	mov	r3, sl
 8000fd0:	40d9      	lsrs	r1, r3
 8000fd2:	4663      	mov	r3, ip
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	430d      	orrs	r5, r1
 8000fda:	1e51      	subs	r1, r2, #1
 8000fdc:	418a      	sbcs	r2, r1
 8000fde:	4653      	mov	r3, sl
 8000fe0:	4315      	orrs	r5, r2
 8000fe2:	9a02      	ldr	r2, [sp, #8]
 8000fe4:	40da      	lsrs	r2, r3
 8000fe6:	18a4      	adds	r4, r4, r2
 8000fe8:	182d      	adds	r5, r5, r0
 8000fea:	4285      	cmp	r5, r0
 8000fec:	4180      	sbcs	r0, r0
 8000fee:	4240      	negs	r0, r0
 8000ff0:	1824      	adds	r4, r4, r0
 8000ff2:	0223      	lsls	r3, r4, #8
 8000ff4:	d400      	bmi.n	8000ff8 <__aeabi_dsub+0x1d8>
 8000ff6:	e0b6      	b.n	8001166 <__aeabi_dsub+0x346>
 8000ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8001174 <__aeabi_dsub+0x354>)
 8000ffa:	3701      	adds	r7, #1
 8000ffc:	429f      	cmp	r7, r3
 8000ffe:	d100      	bne.n	8001002 <__aeabi_dsub+0x1e2>
 8001000:	e0ad      	b.n	800115e <__aeabi_dsub+0x33e>
 8001002:	2101      	movs	r1, #1
 8001004:	4b5c      	ldr	r3, [pc, #368]	@ (8001178 <__aeabi_dsub+0x358>)
 8001006:	086a      	lsrs	r2, r5, #1
 8001008:	401c      	ands	r4, r3
 800100a:	4029      	ands	r1, r5
 800100c:	430a      	orrs	r2, r1
 800100e:	07e5      	lsls	r5, r4, #31
 8001010:	4315      	orrs	r5, r2
 8001012:	0864      	lsrs	r4, r4, #1
 8001014:	e78d      	b.n	8000f32 <__aeabi_dsub+0x112>
 8001016:	4a59      	ldr	r2, [pc, #356]	@ (800117c <__aeabi_dsub+0x35c>)
 8001018:	9b02      	ldr	r3, [sp, #8]
 800101a:	4692      	mov	sl, r2
 800101c:	4662      	mov	r2, ip
 800101e:	44ba      	add	sl, r7
 8001020:	431a      	orrs	r2, r3
 8001022:	d02c      	beq.n	800107e <__aeabi_dsub+0x25e>
 8001024:	428e      	cmp	r6, r1
 8001026:	d02e      	beq.n	8001086 <__aeabi_dsub+0x266>
 8001028:	4652      	mov	r2, sl
 800102a:	2a00      	cmp	r2, #0
 800102c:	d060      	beq.n	80010f0 <__aeabi_dsub+0x2d0>
 800102e:	2f00      	cmp	r7, #0
 8001030:	d100      	bne.n	8001034 <__aeabi_dsub+0x214>
 8001032:	e0db      	b.n	80011ec <__aeabi_dsub+0x3cc>
 8001034:	4663      	mov	r3, ip
 8001036:	000e      	movs	r6, r1
 8001038:	9c02      	ldr	r4, [sp, #8]
 800103a:	08d8      	lsrs	r0, r3, #3
 800103c:	0762      	lsls	r2, r4, #29
 800103e:	4302      	orrs	r2, r0
 8001040:	08e4      	lsrs	r4, r4, #3
 8001042:	0013      	movs	r3, r2
 8001044:	4323      	orrs	r3, r4
 8001046:	d100      	bne.n	800104a <__aeabi_dsub+0x22a>
 8001048:	e254      	b.n	80014f4 <__aeabi_dsub+0x6d4>
 800104a:	2580      	movs	r5, #128	@ 0x80
 800104c:	032d      	lsls	r5, r5, #12
 800104e:	4325      	orrs	r5, r4
 8001050:	032d      	lsls	r5, r5, #12
 8001052:	4c48      	ldr	r4, [pc, #288]	@ (8001174 <__aeabi_dsub+0x354>)
 8001054:	0b2d      	lsrs	r5, r5, #12
 8001056:	e78c      	b.n	8000f72 <__aeabi_dsub+0x152>
 8001058:	4661      	mov	r1, ip
 800105a:	9b02      	ldr	r3, [sp, #8]
 800105c:	4319      	orrs	r1, r3
 800105e:	d100      	bne.n	8001062 <__aeabi_dsub+0x242>
 8001060:	e0cc      	b.n	80011fc <__aeabi_dsub+0x3dc>
 8001062:	0029      	movs	r1, r5
 8001064:	3901      	subs	r1, #1
 8001066:	2d01      	cmp	r5, #1
 8001068:	d100      	bne.n	800106c <__aeabi_dsub+0x24c>
 800106a:	e188      	b.n	800137e <__aeabi_dsub+0x55e>
 800106c:	4295      	cmp	r5, r2
 800106e:	d100      	bne.n	8001072 <__aeabi_dsub+0x252>
 8001070:	e0aa      	b.n	80011c8 <__aeabi_dsub+0x3a8>
 8001072:	2501      	movs	r5, #1
 8001074:	2938      	cmp	r1, #56	@ 0x38
 8001076:	dd00      	ble.n	800107a <__aeabi_dsub+0x25a>
 8001078:	e72f      	b.n	8000eda <__aeabi_dsub+0xba>
 800107a:	468a      	mov	sl, r1
 800107c:	e718      	b.n	8000eb0 <__aeabi_dsub+0x90>
 800107e:	2201      	movs	r2, #1
 8001080:	4051      	eors	r1, r2
 8001082:	428e      	cmp	r6, r1
 8001084:	d1d0      	bne.n	8001028 <__aeabi_dsub+0x208>
 8001086:	4653      	mov	r3, sl
 8001088:	2b00      	cmp	r3, #0
 800108a:	d100      	bne.n	800108e <__aeabi_dsub+0x26e>
 800108c:	e0be      	b.n	800120c <__aeabi_dsub+0x3ec>
 800108e:	2f00      	cmp	r7, #0
 8001090:	d000      	beq.n	8001094 <__aeabi_dsub+0x274>
 8001092:	e138      	b.n	8001306 <__aeabi_dsub+0x4e6>
 8001094:	46ca      	mov	sl, r9
 8001096:	0022      	movs	r2, r4
 8001098:	4302      	orrs	r2, r0
 800109a:	d100      	bne.n	800109e <__aeabi_dsub+0x27e>
 800109c:	e1e2      	b.n	8001464 <__aeabi_dsub+0x644>
 800109e:	4653      	mov	r3, sl
 80010a0:	1e59      	subs	r1, r3, #1
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d100      	bne.n	80010a8 <__aeabi_dsub+0x288>
 80010a6:	e20d      	b.n	80014c4 <__aeabi_dsub+0x6a4>
 80010a8:	4a32      	ldr	r2, [pc, #200]	@ (8001174 <__aeabi_dsub+0x354>)
 80010aa:	4592      	cmp	sl, r2
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dsub+0x290>
 80010ae:	e1d2      	b.n	8001456 <__aeabi_dsub+0x636>
 80010b0:	2701      	movs	r7, #1
 80010b2:	2938      	cmp	r1, #56	@ 0x38
 80010b4:	dc13      	bgt.n	80010de <__aeabi_dsub+0x2be>
 80010b6:	291f      	cmp	r1, #31
 80010b8:	dd00      	ble.n	80010bc <__aeabi_dsub+0x29c>
 80010ba:	e1ee      	b.n	800149a <__aeabi_dsub+0x67a>
 80010bc:	2220      	movs	r2, #32
 80010be:	9b02      	ldr	r3, [sp, #8]
 80010c0:	1a52      	subs	r2, r2, r1
 80010c2:	0025      	movs	r5, r4
 80010c4:	0007      	movs	r7, r0
 80010c6:	469a      	mov	sl, r3
 80010c8:	40cc      	lsrs	r4, r1
 80010ca:	4090      	lsls	r0, r2
 80010cc:	4095      	lsls	r5, r2
 80010ce:	40cf      	lsrs	r7, r1
 80010d0:	44a2      	add	sl, r4
 80010d2:	1e42      	subs	r2, r0, #1
 80010d4:	4190      	sbcs	r0, r2
 80010d6:	4653      	mov	r3, sl
 80010d8:	432f      	orrs	r7, r5
 80010da:	4307      	orrs	r7, r0
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	003d      	movs	r5, r7
 80010e0:	4465      	add	r5, ip
 80010e2:	4565      	cmp	r5, ip
 80010e4:	4192      	sbcs	r2, r2
 80010e6:	9b02      	ldr	r3, [sp, #8]
 80010e8:	4252      	negs	r2, r2
 80010ea:	464f      	mov	r7, r9
 80010ec:	18d4      	adds	r4, r2, r3
 80010ee:	e780      	b.n	8000ff2 <__aeabi_dsub+0x1d2>
 80010f0:	4a23      	ldr	r2, [pc, #140]	@ (8001180 <__aeabi_dsub+0x360>)
 80010f2:	1c7d      	adds	r5, r7, #1
 80010f4:	4215      	tst	r5, r2
 80010f6:	d000      	beq.n	80010fa <__aeabi_dsub+0x2da>
 80010f8:	e0aa      	b.n	8001250 <__aeabi_dsub+0x430>
 80010fa:	4662      	mov	r2, ip
 80010fc:	0025      	movs	r5, r4
 80010fe:	9b02      	ldr	r3, [sp, #8]
 8001100:	4305      	orrs	r5, r0
 8001102:	431a      	orrs	r2, r3
 8001104:	2f00      	cmp	r7, #0
 8001106:	d000      	beq.n	800110a <__aeabi_dsub+0x2ea>
 8001108:	e0f5      	b.n	80012f6 <__aeabi_dsub+0x4d6>
 800110a:	2d00      	cmp	r5, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_dsub+0x2f0>
 800110e:	e16b      	b.n	80013e8 <__aeabi_dsub+0x5c8>
 8001110:	2a00      	cmp	r2, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dsub+0x2f6>
 8001114:	e152      	b.n	80013bc <__aeabi_dsub+0x59c>
 8001116:	4663      	mov	r3, ip
 8001118:	1ac5      	subs	r5, r0, r3
 800111a:	9b02      	ldr	r3, [sp, #8]
 800111c:	1ae2      	subs	r2, r4, r3
 800111e:	42a8      	cmp	r0, r5
 8001120:	419b      	sbcs	r3, r3
 8001122:	425b      	negs	r3, r3
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	021a      	lsls	r2, r3, #8
 8001128:	d400      	bmi.n	800112c <__aeabi_dsub+0x30c>
 800112a:	e1d5      	b.n	80014d8 <__aeabi_dsub+0x6b8>
 800112c:	4663      	mov	r3, ip
 800112e:	1a1d      	subs	r5, r3, r0
 8001130:	45ac      	cmp	ip, r5
 8001132:	4192      	sbcs	r2, r2
 8001134:	2601      	movs	r6, #1
 8001136:	9b02      	ldr	r3, [sp, #8]
 8001138:	4252      	negs	r2, r2
 800113a:	1b1c      	subs	r4, r3, r4
 800113c:	4688      	mov	r8, r1
 800113e:	1aa4      	subs	r4, r4, r2
 8001140:	400e      	ands	r6, r1
 8001142:	e6f6      	b.n	8000f32 <__aeabi_dsub+0x112>
 8001144:	4297      	cmp	r7, r2
 8001146:	d03f      	beq.n	80011c8 <__aeabi_dsub+0x3a8>
 8001148:	4652      	mov	r2, sl
 800114a:	2501      	movs	r5, #1
 800114c:	2a38      	cmp	r2, #56	@ 0x38
 800114e:	dd00      	ble.n	8001152 <__aeabi_dsub+0x332>
 8001150:	e74a      	b.n	8000fe8 <__aeabi_dsub+0x1c8>
 8001152:	2280      	movs	r2, #128	@ 0x80
 8001154:	9b02      	ldr	r3, [sp, #8]
 8001156:	0412      	lsls	r2, r2, #16
 8001158:	4313      	orrs	r3, r2
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	e72d      	b.n	8000fba <__aeabi_dsub+0x19a>
 800115e:	003c      	movs	r4, r7
 8001160:	2500      	movs	r5, #0
 8001162:	2200      	movs	r2, #0
 8001164:	e705      	b.n	8000f72 <__aeabi_dsub+0x152>
 8001166:	2307      	movs	r3, #7
 8001168:	402b      	ands	r3, r5
 800116a:	2b00      	cmp	r3, #0
 800116c:	d000      	beq.n	8001170 <__aeabi_dsub+0x350>
 800116e:	e6e2      	b.n	8000f36 <__aeabi_dsub+0x116>
 8001170:	e06b      	b.n	800124a <__aeabi_dsub+0x42a>
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	000007ff 	.word	0x000007ff
 8001178:	ff7fffff 	.word	0xff7fffff
 800117c:	fffff801 	.word	0xfffff801
 8001180:	000007fe 	.word	0x000007fe
 8001184:	0028      	movs	r0, r5
 8001186:	f000 fa85 	bl	8001694 <__clzsi2>
 800118a:	0003      	movs	r3, r0
 800118c:	3318      	adds	r3, #24
 800118e:	2b1f      	cmp	r3, #31
 8001190:	dc00      	bgt.n	8001194 <__aeabi_dsub+0x374>
 8001192:	e6b4      	b.n	8000efe <__aeabi_dsub+0xde>
 8001194:	002a      	movs	r2, r5
 8001196:	3808      	subs	r0, #8
 8001198:	4082      	lsls	r2, r0
 800119a:	429f      	cmp	r7, r3
 800119c:	dd00      	ble.n	80011a0 <__aeabi_dsub+0x380>
 800119e:	e0b9      	b.n	8001314 <__aeabi_dsub+0x4f4>
 80011a0:	1bdb      	subs	r3, r3, r7
 80011a2:	1c58      	adds	r0, r3, #1
 80011a4:	281f      	cmp	r0, #31
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_dsub+0x38a>
 80011a8:	e1a0      	b.n	80014ec <__aeabi_dsub+0x6cc>
 80011aa:	0015      	movs	r5, r2
 80011ac:	3b1f      	subs	r3, #31
 80011ae:	40dd      	lsrs	r5, r3
 80011b0:	2820      	cmp	r0, #32
 80011b2:	d005      	beq.n	80011c0 <__aeabi_dsub+0x3a0>
 80011b4:	2340      	movs	r3, #64	@ 0x40
 80011b6:	1a1b      	subs	r3, r3, r0
 80011b8:	409a      	lsls	r2, r3
 80011ba:	1e53      	subs	r3, r2, #1
 80011bc:	419a      	sbcs	r2, r3
 80011be:	4315      	orrs	r5, r2
 80011c0:	2307      	movs	r3, #7
 80011c2:	2700      	movs	r7, #0
 80011c4:	402b      	ands	r3, r5
 80011c6:	e7d0      	b.n	800116a <__aeabi_dsub+0x34a>
 80011c8:	08c0      	lsrs	r0, r0, #3
 80011ca:	0762      	lsls	r2, r4, #29
 80011cc:	4302      	orrs	r2, r0
 80011ce:	08e4      	lsrs	r4, r4, #3
 80011d0:	e737      	b.n	8001042 <__aeabi_dsub+0x222>
 80011d2:	08ea      	lsrs	r2, r5, #3
 80011d4:	0763      	lsls	r3, r4, #29
 80011d6:	431a      	orrs	r2, r3
 80011d8:	4bd3      	ldr	r3, [pc, #844]	@ (8001528 <__aeabi_dsub+0x708>)
 80011da:	08e4      	lsrs	r4, r4, #3
 80011dc:	429f      	cmp	r7, r3
 80011de:	d100      	bne.n	80011e2 <__aeabi_dsub+0x3c2>
 80011e0:	e72f      	b.n	8001042 <__aeabi_dsub+0x222>
 80011e2:	0324      	lsls	r4, r4, #12
 80011e4:	0b25      	lsrs	r5, r4, #12
 80011e6:	057c      	lsls	r4, r7, #21
 80011e8:	0d64      	lsrs	r4, r4, #21
 80011ea:	e6c2      	b.n	8000f72 <__aeabi_dsub+0x152>
 80011ec:	46ca      	mov	sl, r9
 80011ee:	0022      	movs	r2, r4
 80011f0:	4302      	orrs	r2, r0
 80011f2:	d158      	bne.n	80012a6 <__aeabi_dsub+0x486>
 80011f4:	4663      	mov	r3, ip
 80011f6:	000e      	movs	r6, r1
 80011f8:	9c02      	ldr	r4, [sp, #8]
 80011fa:	9303      	str	r3, [sp, #12]
 80011fc:	9b03      	ldr	r3, [sp, #12]
 80011fe:	4657      	mov	r7, sl
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	e7e7      	b.n	80011d4 <__aeabi_dsub+0x3b4>
 8001204:	4cc9      	ldr	r4, [pc, #804]	@ (800152c <__aeabi_dsub+0x70c>)
 8001206:	1aff      	subs	r7, r7, r3
 8001208:	4014      	ands	r4, r2
 800120a:	e692      	b.n	8000f32 <__aeabi_dsub+0x112>
 800120c:	4dc8      	ldr	r5, [pc, #800]	@ (8001530 <__aeabi_dsub+0x710>)
 800120e:	1c7a      	adds	r2, r7, #1
 8001210:	422a      	tst	r2, r5
 8001212:	d000      	beq.n	8001216 <__aeabi_dsub+0x3f6>
 8001214:	e084      	b.n	8001320 <__aeabi_dsub+0x500>
 8001216:	0022      	movs	r2, r4
 8001218:	4302      	orrs	r2, r0
 800121a:	2f00      	cmp	r7, #0
 800121c:	d000      	beq.n	8001220 <__aeabi_dsub+0x400>
 800121e:	e0ef      	b.n	8001400 <__aeabi_dsub+0x5e0>
 8001220:	2a00      	cmp	r2, #0
 8001222:	d100      	bne.n	8001226 <__aeabi_dsub+0x406>
 8001224:	e0e5      	b.n	80013f2 <__aeabi_dsub+0x5d2>
 8001226:	4662      	mov	r2, ip
 8001228:	9902      	ldr	r1, [sp, #8]
 800122a:	430a      	orrs	r2, r1
 800122c:	d100      	bne.n	8001230 <__aeabi_dsub+0x410>
 800122e:	e0c5      	b.n	80013bc <__aeabi_dsub+0x59c>
 8001230:	4663      	mov	r3, ip
 8001232:	18c5      	adds	r5, r0, r3
 8001234:	468c      	mov	ip, r1
 8001236:	4285      	cmp	r5, r0
 8001238:	4180      	sbcs	r0, r0
 800123a:	4464      	add	r4, ip
 800123c:	4240      	negs	r0, r0
 800123e:	1824      	adds	r4, r4, r0
 8001240:	0223      	lsls	r3, r4, #8
 8001242:	d502      	bpl.n	800124a <__aeabi_dsub+0x42a>
 8001244:	4bb9      	ldr	r3, [pc, #740]	@ (800152c <__aeabi_dsub+0x70c>)
 8001246:	3701      	adds	r7, #1
 8001248:	401c      	ands	r4, r3
 800124a:	46ba      	mov	sl, r7
 800124c:	9503      	str	r5, [sp, #12]
 800124e:	e7d5      	b.n	80011fc <__aeabi_dsub+0x3dc>
 8001250:	4662      	mov	r2, ip
 8001252:	1a85      	subs	r5, r0, r2
 8001254:	42a8      	cmp	r0, r5
 8001256:	4192      	sbcs	r2, r2
 8001258:	4252      	negs	r2, r2
 800125a:	4691      	mov	r9, r2
 800125c:	9b02      	ldr	r3, [sp, #8]
 800125e:	1ae3      	subs	r3, r4, r3
 8001260:	001a      	movs	r2, r3
 8001262:	464b      	mov	r3, r9
 8001264:	1ad2      	subs	r2, r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	4691      	mov	r9, r2
 800126a:	021a      	lsls	r2, r3, #8
 800126c:	d46c      	bmi.n	8001348 <__aeabi_dsub+0x528>
 800126e:	464a      	mov	r2, r9
 8001270:	464c      	mov	r4, r9
 8001272:	432a      	orrs	r2, r5
 8001274:	d000      	beq.n	8001278 <__aeabi_dsub+0x458>
 8001276:	e63a      	b.n	8000eee <__aeabi_dsub+0xce>
 8001278:	2600      	movs	r6, #0
 800127a:	2400      	movs	r4, #0
 800127c:	2500      	movs	r5, #0
 800127e:	e678      	b.n	8000f72 <__aeabi_dsub+0x152>
 8001280:	9902      	ldr	r1, [sp, #8]
 8001282:	4653      	mov	r3, sl
 8001284:	000d      	movs	r5, r1
 8001286:	3a20      	subs	r2, #32
 8001288:	40d5      	lsrs	r5, r2
 800128a:	2b20      	cmp	r3, #32
 800128c:	d006      	beq.n	800129c <__aeabi_dsub+0x47c>
 800128e:	2240      	movs	r2, #64	@ 0x40
 8001290:	1ad2      	subs	r2, r2, r3
 8001292:	000b      	movs	r3, r1
 8001294:	4093      	lsls	r3, r2
 8001296:	4662      	mov	r2, ip
 8001298:	431a      	orrs	r2, r3
 800129a:	4693      	mov	fp, r2
 800129c:	465b      	mov	r3, fp
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	4193      	sbcs	r3, r2
 80012a2:	431d      	orrs	r5, r3
 80012a4:	e619      	b.n	8000eda <__aeabi_dsub+0xba>
 80012a6:	4653      	mov	r3, sl
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d100      	bne.n	80012b0 <__aeabi_dsub+0x490>
 80012ae:	e0c6      	b.n	800143e <__aeabi_dsub+0x61e>
 80012b0:	4e9d      	ldr	r6, [pc, #628]	@ (8001528 <__aeabi_dsub+0x708>)
 80012b2:	45b2      	cmp	sl, r6
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dsub+0x498>
 80012b6:	e6bd      	b.n	8001034 <__aeabi_dsub+0x214>
 80012b8:	4688      	mov	r8, r1
 80012ba:	000e      	movs	r6, r1
 80012bc:	2501      	movs	r5, #1
 80012be:	2a38      	cmp	r2, #56	@ 0x38
 80012c0:	dc10      	bgt.n	80012e4 <__aeabi_dsub+0x4c4>
 80012c2:	2a1f      	cmp	r2, #31
 80012c4:	dc7f      	bgt.n	80013c6 <__aeabi_dsub+0x5a6>
 80012c6:	2120      	movs	r1, #32
 80012c8:	0025      	movs	r5, r4
 80012ca:	1a89      	subs	r1, r1, r2
 80012cc:	0007      	movs	r7, r0
 80012ce:	4088      	lsls	r0, r1
 80012d0:	408d      	lsls	r5, r1
 80012d2:	40d7      	lsrs	r7, r2
 80012d4:	40d4      	lsrs	r4, r2
 80012d6:	1e41      	subs	r1, r0, #1
 80012d8:	4188      	sbcs	r0, r1
 80012da:	9b02      	ldr	r3, [sp, #8]
 80012dc:	433d      	orrs	r5, r7
 80012de:	1b1b      	subs	r3, r3, r4
 80012e0:	4305      	orrs	r5, r0
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	4662      	mov	r2, ip
 80012e6:	1b55      	subs	r5, r2, r5
 80012e8:	45ac      	cmp	ip, r5
 80012ea:	4192      	sbcs	r2, r2
 80012ec:	9b02      	ldr	r3, [sp, #8]
 80012ee:	4252      	negs	r2, r2
 80012f0:	464f      	mov	r7, r9
 80012f2:	1a9c      	subs	r4, r3, r2
 80012f4:	e5f6      	b.n	8000ee4 <__aeabi_dsub+0xc4>
 80012f6:	2d00      	cmp	r5, #0
 80012f8:	d000      	beq.n	80012fc <__aeabi_dsub+0x4dc>
 80012fa:	e0b7      	b.n	800146c <__aeabi_dsub+0x64c>
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_dsub+0x4e2>
 8001300:	e0f0      	b.n	80014e4 <__aeabi_dsub+0x6c4>
 8001302:	2601      	movs	r6, #1
 8001304:	400e      	ands	r6, r1
 8001306:	4663      	mov	r3, ip
 8001308:	9802      	ldr	r0, [sp, #8]
 800130a:	08d9      	lsrs	r1, r3, #3
 800130c:	0742      	lsls	r2, r0, #29
 800130e:	430a      	orrs	r2, r1
 8001310:	08c4      	lsrs	r4, r0, #3
 8001312:	e696      	b.n	8001042 <__aeabi_dsub+0x222>
 8001314:	4c85      	ldr	r4, [pc, #532]	@ (800152c <__aeabi_dsub+0x70c>)
 8001316:	1aff      	subs	r7, r7, r3
 8001318:	4014      	ands	r4, r2
 800131a:	0762      	lsls	r2, r4, #29
 800131c:	08e4      	lsrs	r4, r4, #3
 800131e:	e760      	b.n	80011e2 <__aeabi_dsub+0x3c2>
 8001320:	4981      	ldr	r1, [pc, #516]	@ (8001528 <__aeabi_dsub+0x708>)
 8001322:	428a      	cmp	r2, r1
 8001324:	d100      	bne.n	8001328 <__aeabi_dsub+0x508>
 8001326:	e0c9      	b.n	80014bc <__aeabi_dsub+0x69c>
 8001328:	4663      	mov	r3, ip
 800132a:	18c1      	adds	r1, r0, r3
 800132c:	4281      	cmp	r1, r0
 800132e:	4180      	sbcs	r0, r0
 8001330:	9b02      	ldr	r3, [sp, #8]
 8001332:	4240      	negs	r0, r0
 8001334:	18e3      	adds	r3, r4, r3
 8001336:	181b      	adds	r3, r3, r0
 8001338:	07dd      	lsls	r5, r3, #31
 800133a:	085c      	lsrs	r4, r3, #1
 800133c:	2307      	movs	r3, #7
 800133e:	0849      	lsrs	r1, r1, #1
 8001340:	430d      	orrs	r5, r1
 8001342:	0017      	movs	r7, r2
 8001344:	402b      	ands	r3, r5
 8001346:	e710      	b.n	800116a <__aeabi_dsub+0x34a>
 8001348:	4663      	mov	r3, ip
 800134a:	1a1d      	subs	r5, r3, r0
 800134c:	45ac      	cmp	ip, r5
 800134e:	4192      	sbcs	r2, r2
 8001350:	2601      	movs	r6, #1
 8001352:	9b02      	ldr	r3, [sp, #8]
 8001354:	4252      	negs	r2, r2
 8001356:	1b1c      	subs	r4, r3, r4
 8001358:	4688      	mov	r8, r1
 800135a:	1aa4      	subs	r4, r4, r2
 800135c:	400e      	ands	r6, r1
 800135e:	e5c6      	b.n	8000eee <__aeabi_dsub+0xce>
 8001360:	4663      	mov	r3, ip
 8001362:	18c5      	adds	r5, r0, r3
 8001364:	9b02      	ldr	r3, [sp, #8]
 8001366:	4285      	cmp	r5, r0
 8001368:	4180      	sbcs	r0, r0
 800136a:	469c      	mov	ip, r3
 800136c:	4240      	negs	r0, r0
 800136e:	4464      	add	r4, ip
 8001370:	1824      	adds	r4, r4, r0
 8001372:	2701      	movs	r7, #1
 8001374:	0223      	lsls	r3, r4, #8
 8001376:	d400      	bmi.n	800137a <__aeabi_dsub+0x55a>
 8001378:	e6f5      	b.n	8001166 <__aeabi_dsub+0x346>
 800137a:	2702      	movs	r7, #2
 800137c:	e641      	b.n	8001002 <__aeabi_dsub+0x1e2>
 800137e:	4663      	mov	r3, ip
 8001380:	1ac5      	subs	r5, r0, r3
 8001382:	42a8      	cmp	r0, r5
 8001384:	4180      	sbcs	r0, r0
 8001386:	9b02      	ldr	r3, [sp, #8]
 8001388:	4240      	negs	r0, r0
 800138a:	1ae4      	subs	r4, r4, r3
 800138c:	2701      	movs	r7, #1
 800138e:	1a24      	subs	r4, r4, r0
 8001390:	e5a8      	b.n	8000ee4 <__aeabi_dsub+0xc4>
 8001392:	9d02      	ldr	r5, [sp, #8]
 8001394:	4652      	mov	r2, sl
 8001396:	002b      	movs	r3, r5
 8001398:	3a20      	subs	r2, #32
 800139a:	40d3      	lsrs	r3, r2
 800139c:	0019      	movs	r1, r3
 800139e:	4653      	mov	r3, sl
 80013a0:	2b20      	cmp	r3, #32
 80013a2:	d006      	beq.n	80013b2 <__aeabi_dsub+0x592>
 80013a4:	2240      	movs	r2, #64	@ 0x40
 80013a6:	1ad2      	subs	r2, r2, r3
 80013a8:	002b      	movs	r3, r5
 80013aa:	4093      	lsls	r3, r2
 80013ac:	4662      	mov	r2, ip
 80013ae:	431a      	orrs	r2, r3
 80013b0:	4693      	mov	fp, r2
 80013b2:	465d      	mov	r5, fp
 80013b4:	1e6b      	subs	r3, r5, #1
 80013b6:	419d      	sbcs	r5, r3
 80013b8:	430d      	orrs	r5, r1
 80013ba:	e615      	b.n	8000fe8 <__aeabi_dsub+0x1c8>
 80013bc:	0762      	lsls	r2, r4, #29
 80013be:	08c0      	lsrs	r0, r0, #3
 80013c0:	4302      	orrs	r2, r0
 80013c2:	08e4      	lsrs	r4, r4, #3
 80013c4:	e70d      	b.n	80011e2 <__aeabi_dsub+0x3c2>
 80013c6:	0011      	movs	r1, r2
 80013c8:	0027      	movs	r7, r4
 80013ca:	3920      	subs	r1, #32
 80013cc:	40cf      	lsrs	r7, r1
 80013ce:	2a20      	cmp	r2, #32
 80013d0:	d005      	beq.n	80013de <__aeabi_dsub+0x5be>
 80013d2:	2140      	movs	r1, #64	@ 0x40
 80013d4:	1a8a      	subs	r2, r1, r2
 80013d6:	4094      	lsls	r4, r2
 80013d8:	0025      	movs	r5, r4
 80013da:	4305      	orrs	r5, r0
 80013dc:	9503      	str	r5, [sp, #12]
 80013de:	9d03      	ldr	r5, [sp, #12]
 80013e0:	1e6a      	subs	r2, r5, #1
 80013e2:	4195      	sbcs	r5, r2
 80013e4:	433d      	orrs	r5, r7
 80013e6:	e77d      	b.n	80012e4 <__aeabi_dsub+0x4c4>
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d100      	bne.n	80013ee <__aeabi_dsub+0x5ce>
 80013ec:	e744      	b.n	8001278 <__aeabi_dsub+0x458>
 80013ee:	2601      	movs	r6, #1
 80013f0:	400e      	ands	r6, r1
 80013f2:	4663      	mov	r3, ip
 80013f4:	08d9      	lsrs	r1, r3, #3
 80013f6:	9b02      	ldr	r3, [sp, #8]
 80013f8:	075a      	lsls	r2, r3, #29
 80013fa:	430a      	orrs	r2, r1
 80013fc:	08dc      	lsrs	r4, r3, #3
 80013fe:	e6f0      	b.n	80011e2 <__aeabi_dsub+0x3c2>
 8001400:	2a00      	cmp	r2, #0
 8001402:	d028      	beq.n	8001456 <__aeabi_dsub+0x636>
 8001404:	4662      	mov	r2, ip
 8001406:	9f02      	ldr	r7, [sp, #8]
 8001408:	08c0      	lsrs	r0, r0, #3
 800140a:	433a      	orrs	r2, r7
 800140c:	d100      	bne.n	8001410 <__aeabi_dsub+0x5f0>
 800140e:	e6dc      	b.n	80011ca <__aeabi_dsub+0x3aa>
 8001410:	0762      	lsls	r2, r4, #29
 8001412:	4310      	orrs	r0, r2
 8001414:	2280      	movs	r2, #128	@ 0x80
 8001416:	08e4      	lsrs	r4, r4, #3
 8001418:	0312      	lsls	r2, r2, #12
 800141a:	4214      	tst	r4, r2
 800141c:	d009      	beq.n	8001432 <__aeabi_dsub+0x612>
 800141e:	08fd      	lsrs	r5, r7, #3
 8001420:	4215      	tst	r5, r2
 8001422:	d106      	bne.n	8001432 <__aeabi_dsub+0x612>
 8001424:	4663      	mov	r3, ip
 8001426:	2601      	movs	r6, #1
 8001428:	002c      	movs	r4, r5
 800142a:	08d8      	lsrs	r0, r3, #3
 800142c:	077b      	lsls	r3, r7, #29
 800142e:	4318      	orrs	r0, r3
 8001430:	400e      	ands	r6, r1
 8001432:	0f42      	lsrs	r2, r0, #29
 8001434:	00c0      	lsls	r0, r0, #3
 8001436:	08c0      	lsrs	r0, r0, #3
 8001438:	0752      	lsls	r2, r2, #29
 800143a:	4302      	orrs	r2, r0
 800143c:	e601      	b.n	8001042 <__aeabi_dsub+0x222>
 800143e:	4663      	mov	r3, ip
 8001440:	1a1d      	subs	r5, r3, r0
 8001442:	45ac      	cmp	ip, r5
 8001444:	4192      	sbcs	r2, r2
 8001446:	9b02      	ldr	r3, [sp, #8]
 8001448:	4252      	negs	r2, r2
 800144a:	1b1c      	subs	r4, r3, r4
 800144c:	000e      	movs	r6, r1
 800144e:	4688      	mov	r8, r1
 8001450:	2701      	movs	r7, #1
 8001452:	1aa4      	subs	r4, r4, r2
 8001454:	e546      	b.n	8000ee4 <__aeabi_dsub+0xc4>
 8001456:	4663      	mov	r3, ip
 8001458:	08d9      	lsrs	r1, r3, #3
 800145a:	9b02      	ldr	r3, [sp, #8]
 800145c:	075a      	lsls	r2, r3, #29
 800145e:	430a      	orrs	r2, r1
 8001460:	08dc      	lsrs	r4, r3, #3
 8001462:	e5ee      	b.n	8001042 <__aeabi_dsub+0x222>
 8001464:	4663      	mov	r3, ip
 8001466:	9c02      	ldr	r4, [sp, #8]
 8001468:	9303      	str	r3, [sp, #12]
 800146a:	e6c7      	b.n	80011fc <__aeabi_dsub+0x3dc>
 800146c:	08c0      	lsrs	r0, r0, #3
 800146e:	2a00      	cmp	r2, #0
 8001470:	d100      	bne.n	8001474 <__aeabi_dsub+0x654>
 8001472:	e6aa      	b.n	80011ca <__aeabi_dsub+0x3aa>
 8001474:	0762      	lsls	r2, r4, #29
 8001476:	4310      	orrs	r0, r2
 8001478:	2280      	movs	r2, #128	@ 0x80
 800147a:	08e4      	lsrs	r4, r4, #3
 800147c:	0312      	lsls	r2, r2, #12
 800147e:	4214      	tst	r4, r2
 8001480:	d0d7      	beq.n	8001432 <__aeabi_dsub+0x612>
 8001482:	9f02      	ldr	r7, [sp, #8]
 8001484:	08fd      	lsrs	r5, r7, #3
 8001486:	4215      	tst	r5, r2
 8001488:	d1d3      	bne.n	8001432 <__aeabi_dsub+0x612>
 800148a:	4663      	mov	r3, ip
 800148c:	2601      	movs	r6, #1
 800148e:	08d8      	lsrs	r0, r3, #3
 8001490:	077b      	lsls	r3, r7, #29
 8001492:	002c      	movs	r4, r5
 8001494:	4318      	orrs	r0, r3
 8001496:	400e      	ands	r6, r1
 8001498:	e7cb      	b.n	8001432 <__aeabi_dsub+0x612>
 800149a:	000a      	movs	r2, r1
 800149c:	0027      	movs	r7, r4
 800149e:	3a20      	subs	r2, #32
 80014a0:	40d7      	lsrs	r7, r2
 80014a2:	2920      	cmp	r1, #32
 80014a4:	d005      	beq.n	80014b2 <__aeabi_dsub+0x692>
 80014a6:	2240      	movs	r2, #64	@ 0x40
 80014a8:	1a52      	subs	r2, r2, r1
 80014aa:	4094      	lsls	r4, r2
 80014ac:	0025      	movs	r5, r4
 80014ae:	4305      	orrs	r5, r0
 80014b0:	9503      	str	r5, [sp, #12]
 80014b2:	9d03      	ldr	r5, [sp, #12]
 80014b4:	1e6a      	subs	r2, r5, #1
 80014b6:	4195      	sbcs	r5, r2
 80014b8:	432f      	orrs	r7, r5
 80014ba:	e610      	b.n	80010de <__aeabi_dsub+0x2be>
 80014bc:	0014      	movs	r4, r2
 80014be:	2500      	movs	r5, #0
 80014c0:	2200      	movs	r2, #0
 80014c2:	e556      	b.n	8000f72 <__aeabi_dsub+0x152>
 80014c4:	9b02      	ldr	r3, [sp, #8]
 80014c6:	4460      	add	r0, ip
 80014c8:	4699      	mov	r9, r3
 80014ca:	4560      	cmp	r0, ip
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	444c      	add	r4, r9
 80014d0:	4252      	negs	r2, r2
 80014d2:	0005      	movs	r5, r0
 80014d4:	18a4      	adds	r4, r4, r2
 80014d6:	e74c      	b.n	8001372 <__aeabi_dsub+0x552>
 80014d8:	001a      	movs	r2, r3
 80014da:	001c      	movs	r4, r3
 80014dc:	432a      	orrs	r2, r5
 80014de:	d000      	beq.n	80014e2 <__aeabi_dsub+0x6c2>
 80014e0:	e6b3      	b.n	800124a <__aeabi_dsub+0x42a>
 80014e2:	e6c9      	b.n	8001278 <__aeabi_dsub+0x458>
 80014e4:	2480      	movs	r4, #128	@ 0x80
 80014e6:	2600      	movs	r6, #0
 80014e8:	0324      	lsls	r4, r4, #12
 80014ea:	e5ae      	b.n	800104a <__aeabi_dsub+0x22a>
 80014ec:	2120      	movs	r1, #32
 80014ee:	2500      	movs	r5, #0
 80014f0:	1a09      	subs	r1, r1, r0
 80014f2:	e517      	b.n	8000f24 <__aeabi_dsub+0x104>
 80014f4:	2200      	movs	r2, #0
 80014f6:	2500      	movs	r5, #0
 80014f8:	4c0b      	ldr	r4, [pc, #44]	@ (8001528 <__aeabi_dsub+0x708>)
 80014fa:	e53a      	b.n	8000f72 <__aeabi_dsub+0x152>
 80014fc:	2d00      	cmp	r5, #0
 80014fe:	d100      	bne.n	8001502 <__aeabi_dsub+0x6e2>
 8001500:	e5f6      	b.n	80010f0 <__aeabi_dsub+0x2d0>
 8001502:	464b      	mov	r3, r9
 8001504:	1bda      	subs	r2, r3, r7
 8001506:	4692      	mov	sl, r2
 8001508:	2f00      	cmp	r7, #0
 800150a:	d100      	bne.n	800150e <__aeabi_dsub+0x6ee>
 800150c:	e66f      	b.n	80011ee <__aeabi_dsub+0x3ce>
 800150e:	2a38      	cmp	r2, #56	@ 0x38
 8001510:	dc05      	bgt.n	800151e <__aeabi_dsub+0x6fe>
 8001512:	2680      	movs	r6, #128	@ 0x80
 8001514:	0436      	lsls	r6, r6, #16
 8001516:	4334      	orrs	r4, r6
 8001518:	4688      	mov	r8, r1
 800151a:	000e      	movs	r6, r1
 800151c:	e6d1      	b.n	80012c2 <__aeabi_dsub+0x4a2>
 800151e:	4688      	mov	r8, r1
 8001520:	000e      	movs	r6, r1
 8001522:	2501      	movs	r5, #1
 8001524:	e6de      	b.n	80012e4 <__aeabi_dsub+0x4c4>
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	000007ff 	.word	0x000007ff
 800152c:	ff7fffff 	.word	0xff7fffff
 8001530:	000007fe 	.word	0x000007fe
 8001534:	2d00      	cmp	r5, #0
 8001536:	d100      	bne.n	800153a <__aeabi_dsub+0x71a>
 8001538:	e668      	b.n	800120c <__aeabi_dsub+0x3ec>
 800153a:	464b      	mov	r3, r9
 800153c:	1bd9      	subs	r1, r3, r7
 800153e:	2f00      	cmp	r7, #0
 8001540:	d101      	bne.n	8001546 <__aeabi_dsub+0x726>
 8001542:	468a      	mov	sl, r1
 8001544:	e5a7      	b.n	8001096 <__aeabi_dsub+0x276>
 8001546:	2701      	movs	r7, #1
 8001548:	2938      	cmp	r1, #56	@ 0x38
 800154a:	dd00      	ble.n	800154e <__aeabi_dsub+0x72e>
 800154c:	e5c7      	b.n	80010de <__aeabi_dsub+0x2be>
 800154e:	2280      	movs	r2, #128	@ 0x80
 8001550:	0412      	lsls	r2, r2, #16
 8001552:	4314      	orrs	r4, r2
 8001554:	e5af      	b.n	80010b6 <__aeabi_dsub+0x296>
 8001556:	46c0      	nop			@ (mov r8, r8)

08001558 <__aeabi_d2iz>:
 8001558:	000b      	movs	r3, r1
 800155a:	0002      	movs	r2, r0
 800155c:	b570      	push	{r4, r5, r6, lr}
 800155e:	4d16      	ldr	r5, [pc, #88]	@ (80015b8 <__aeabi_d2iz+0x60>)
 8001560:	030c      	lsls	r4, r1, #12
 8001562:	b082      	sub	sp, #8
 8001564:	0049      	lsls	r1, r1, #1
 8001566:	2000      	movs	r0, #0
 8001568:	9200      	str	r2, [sp, #0]
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	0b24      	lsrs	r4, r4, #12
 800156e:	0d49      	lsrs	r1, r1, #21
 8001570:	0fde      	lsrs	r6, r3, #31
 8001572:	42a9      	cmp	r1, r5
 8001574:	dd04      	ble.n	8001580 <__aeabi_d2iz+0x28>
 8001576:	4811      	ldr	r0, [pc, #68]	@ (80015bc <__aeabi_d2iz+0x64>)
 8001578:	4281      	cmp	r1, r0
 800157a:	dd03      	ble.n	8001584 <__aeabi_d2iz+0x2c>
 800157c:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <__aeabi_d2iz+0x68>)
 800157e:	18f0      	adds	r0, r6, r3
 8001580:	b002      	add	sp, #8
 8001582:	bd70      	pop	{r4, r5, r6, pc}
 8001584:	2080      	movs	r0, #128	@ 0x80
 8001586:	0340      	lsls	r0, r0, #13
 8001588:	4320      	orrs	r0, r4
 800158a:	4c0e      	ldr	r4, [pc, #56]	@ (80015c4 <__aeabi_d2iz+0x6c>)
 800158c:	1a64      	subs	r4, r4, r1
 800158e:	2c1f      	cmp	r4, #31
 8001590:	dd08      	ble.n	80015a4 <__aeabi_d2iz+0x4c>
 8001592:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <__aeabi_d2iz+0x70>)
 8001594:	1a5b      	subs	r3, r3, r1
 8001596:	40d8      	lsrs	r0, r3
 8001598:	0003      	movs	r3, r0
 800159a:	4258      	negs	r0, r3
 800159c:	2e00      	cmp	r6, #0
 800159e:	d1ef      	bne.n	8001580 <__aeabi_d2iz+0x28>
 80015a0:	0018      	movs	r0, r3
 80015a2:	e7ed      	b.n	8001580 <__aeabi_d2iz+0x28>
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <__aeabi_d2iz+0x74>)
 80015a6:	9a00      	ldr	r2, [sp, #0]
 80015a8:	469c      	mov	ip, r3
 80015aa:	0003      	movs	r3, r0
 80015ac:	4461      	add	r1, ip
 80015ae:	408b      	lsls	r3, r1
 80015b0:	40e2      	lsrs	r2, r4
 80015b2:	4313      	orrs	r3, r2
 80015b4:	e7f1      	b.n	800159a <__aeabi_d2iz+0x42>
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	000003fe 	.word	0x000003fe
 80015bc:	0000041d 	.word	0x0000041d
 80015c0:	7fffffff 	.word	0x7fffffff
 80015c4:	00000433 	.word	0x00000433
 80015c8:	00000413 	.word	0x00000413
 80015cc:	fffffbed 	.word	0xfffffbed

080015d0 <__aeabi_ui2d>:
 80015d0:	b510      	push	{r4, lr}
 80015d2:	1e04      	subs	r4, r0, #0
 80015d4:	d010      	beq.n	80015f8 <__aeabi_ui2d+0x28>
 80015d6:	f000 f85d 	bl	8001694 <__clzsi2>
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <__aeabi_ui2d+0x44>)
 80015dc:	1a1b      	subs	r3, r3, r0
 80015de:	055b      	lsls	r3, r3, #21
 80015e0:	0d5b      	lsrs	r3, r3, #21
 80015e2:	280a      	cmp	r0, #10
 80015e4:	dc0f      	bgt.n	8001606 <__aeabi_ui2d+0x36>
 80015e6:	220b      	movs	r2, #11
 80015e8:	0021      	movs	r1, r4
 80015ea:	1a12      	subs	r2, r2, r0
 80015ec:	40d1      	lsrs	r1, r2
 80015ee:	3015      	adds	r0, #21
 80015f0:	030a      	lsls	r2, r1, #12
 80015f2:	4084      	lsls	r4, r0
 80015f4:	0b12      	lsrs	r2, r2, #12
 80015f6:	e001      	b.n	80015fc <__aeabi_ui2d+0x2c>
 80015f8:	2300      	movs	r3, #0
 80015fa:	2200      	movs	r2, #0
 80015fc:	051b      	lsls	r3, r3, #20
 80015fe:	4313      	orrs	r3, r2
 8001600:	0020      	movs	r0, r4
 8001602:	0019      	movs	r1, r3
 8001604:	bd10      	pop	{r4, pc}
 8001606:	0022      	movs	r2, r4
 8001608:	380b      	subs	r0, #11
 800160a:	4082      	lsls	r2, r0
 800160c:	0312      	lsls	r2, r2, #12
 800160e:	2400      	movs	r4, #0
 8001610:	0b12      	lsrs	r2, r2, #12
 8001612:	e7f3      	b.n	80015fc <__aeabi_ui2d+0x2c>
 8001614:	0000041e 	.word	0x0000041e

08001618 <__aeabi_cdrcmple>:
 8001618:	4684      	mov	ip, r0
 800161a:	0010      	movs	r0, r2
 800161c:	4662      	mov	r2, ip
 800161e:	468c      	mov	ip, r1
 8001620:	0019      	movs	r1, r3
 8001622:	4663      	mov	r3, ip
 8001624:	e000      	b.n	8001628 <__aeabi_cdcmpeq>
 8001626:	46c0      	nop			@ (mov r8, r8)

08001628 <__aeabi_cdcmpeq>:
 8001628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800162a:	f000 f909 	bl	8001840 <__ledf2>
 800162e:	2800      	cmp	r0, #0
 8001630:	d401      	bmi.n	8001636 <__aeabi_cdcmpeq+0xe>
 8001632:	2100      	movs	r1, #0
 8001634:	42c8      	cmn	r0, r1
 8001636:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001638 <__aeabi_dcmpeq>:
 8001638:	b510      	push	{r4, lr}
 800163a:	f000 f849 	bl	80016d0 <__eqdf2>
 800163e:	4240      	negs	r0, r0
 8001640:	3001      	adds	r0, #1
 8001642:	bd10      	pop	{r4, pc}

08001644 <__aeabi_dcmplt>:
 8001644:	b510      	push	{r4, lr}
 8001646:	f000 f8fb 	bl	8001840 <__ledf2>
 800164a:	2800      	cmp	r0, #0
 800164c:	db01      	blt.n	8001652 <__aeabi_dcmplt+0xe>
 800164e:	2000      	movs	r0, #0
 8001650:	bd10      	pop	{r4, pc}
 8001652:	2001      	movs	r0, #1
 8001654:	bd10      	pop	{r4, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)

08001658 <__aeabi_dcmple>:
 8001658:	b510      	push	{r4, lr}
 800165a:	f000 f8f1 	bl	8001840 <__ledf2>
 800165e:	2800      	cmp	r0, #0
 8001660:	dd01      	ble.n	8001666 <__aeabi_dcmple+0xe>
 8001662:	2000      	movs	r0, #0
 8001664:	bd10      	pop	{r4, pc}
 8001666:	2001      	movs	r0, #1
 8001668:	bd10      	pop	{r4, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)

0800166c <__aeabi_dcmpgt>:
 800166c:	b510      	push	{r4, lr}
 800166e:	f000 f873 	bl	8001758 <__gedf2>
 8001672:	2800      	cmp	r0, #0
 8001674:	dc01      	bgt.n	800167a <__aeabi_dcmpgt+0xe>
 8001676:	2000      	movs	r0, #0
 8001678:	bd10      	pop	{r4, pc}
 800167a:	2001      	movs	r0, #1
 800167c:	bd10      	pop	{r4, pc}
 800167e:	46c0      	nop			@ (mov r8, r8)

08001680 <__aeabi_dcmpge>:
 8001680:	b510      	push	{r4, lr}
 8001682:	f000 f869 	bl	8001758 <__gedf2>
 8001686:	2800      	cmp	r0, #0
 8001688:	da01      	bge.n	800168e <__aeabi_dcmpge+0xe>
 800168a:	2000      	movs	r0, #0
 800168c:	bd10      	pop	{r4, pc}
 800168e:	2001      	movs	r0, #1
 8001690:	bd10      	pop	{r4, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)

08001694 <__clzsi2>:
 8001694:	211c      	movs	r1, #28
 8001696:	2301      	movs	r3, #1
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	4298      	cmp	r0, r3
 800169c:	d301      	bcc.n	80016a2 <__clzsi2+0xe>
 800169e:	0c00      	lsrs	r0, r0, #16
 80016a0:	3910      	subs	r1, #16
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	4298      	cmp	r0, r3
 80016a6:	d301      	bcc.n	80016ac <__clzsi2+0x18>
 80016a8:	0a00      	lsrs	r0, r0, #8
 80016aa:	3908      	subs	r1, #8
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	4298      	cmp	r0, r3
 80016b0:	d301      	bcc.n	80016b6 <__clzsi2+0x22>
 80016b2:	0900      	lsrs	r0, r0, #4
 80016b4:	3904      	subs	r1, #4
 80016b6:	a202      	add	r2, pc, #8	@ (adr r2, 80016c0 <__clzsi2+0x2c>)
 80016b8:	5c10      	ldrb	r0, [r2, r0]
 80016ba:	1840      	adds	r0, r0, r1
 80016bc:	4770      	bx	lr
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	02020304 	.word	0x02020304
 80016c4:	01010101 	.word	0x01010101
	...

080016d0 <__eqdf2>:
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	4657      	mov	r7, sl
 80016d4:	46de      	mov	lr, fp
 80016d6:	464e      	mov	r6, r9
 80016d8:	4645      	mov	r5, r8
 80016da:	b5e0      	push	{r5, r6, r7, lr}
 80016dc:	000d      	movs	r5, r1
 80016de:	0004      	movs	r4, r0
 80016e0:	0fe8      	lsrs	r0, r5, #31
 80016e2:	4683      	mov	fp, r0
 80016e4:	0309      	lsls	r1, r1, #12
 80016e6:	0fd8      	lsrs	r0, r3, #31
 80016e8:	0b09      	lsrs	r1, r1, #12
 80016ea:	4682      	mov	sl, r0
 80016ec:	4819      	ldr	r0, [pc, #100]	@ (8001754 <__eqdf2+0x84>)
 80016ee:	468c      	mov	ip, r1
 80016f0:	031f      	lsls	r7, r3, #12
 80016f2:	0069      	lsls	r1, r5, #1
 80016f4:	005e      	lsls	r6, r3, #1
 80016f6:	0d49      	lsrs	r1, r1, #21
 80016f8:	0b3f      	lsrs	r7, r7, #12
 80016fa:	0d76      	lsrs	r6, r6, #21
 80016fc:	4281      	cmp	r1, r0
 80016fe:	d018      	beq.n	8001732 <__eqdf2+0x62>
 8001700:	4286      	cmp	r6, r0
 8001702:	d00f      	beq.n	8001724 <__eqdf2+0x54>
 8001704:	2001      	movs	r0, #1
 8001706:	42b1      	cmp	r1, r6
 8001708:	d10d      	bne.n	8001726 <__eqdf2+0x56>
 800170a:	45bc      	cmp	ip, r7
 800170c:	d10b      	bne.n	8001726 <__eqdf2+0x56>
 800170e:	4294      	cmp	r4, r2
 8001710:	d109      	bne.n	8001726 <__eqdf2+0x56>
 8001712:	45d3      	cmp	fp, sl
 8001714:	d01c      	beq.n	8001750 <__eqdf2+0x80>
 8001716:	2900      	cmp	r1, #0
 8001718:	d105      	bne.n	8001726 <__eqdf2+0x56>
 800171a:	4660      	mov	r0, ip
 800171c:	4320      	orrs	r0, r4
 800171e:	1e43      	subs	r3, r0, #1
 8001720:	4198      	sbcs	r0, r3
 8001722:	e000      	b.n	8001726 <__eqdf2+0x56>
 8001724:	2001      	movs	r0, #1
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2001      	movs	r0, #1
 8001734:	428e      	cmp	r6, r1
 8001736:	d1f6      	bne.n	8001726 <__eqdf2+0x56>
 8001738:	4661      	mov	r1, ip
 800173a:	4339      	orrs	r1, r7
 800173c:	000f      	movs	r7, r1
 800173e:	4317      	orrs	r7, r2
 8001740:	4327      	orrs	r7, r4
 8001742:	d1f0      	bne.n	8001726 <__eqdf2+0x56>
 8001744:	465b      	mov	r3, fp
 8001746:	4652      	mov	r2, sl
 8001748:	1a98      	subs	r0, r3, r2
 800174a:	1e43      	subs	r3, r0, #1
 800174c:	4198      	sbcs	r0, r3
 800174e:	e7ea      	b.n	8001726 <__eqdf2+0x56>
 8001750:	2000      	movs	r0, #0
 8001752:	e7e8      	b.n	8001726 <__eqdf2+0x56>
 8001754:	000007ff 	.word	0x000007ff

08001758 <__gedf2>:
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	4657      	mov	r7, sl
 800175c:	464e      	mov	r6, r9
 800175e:	4645      	mov	r5, r8
 8001760:	46de      	mov	lr, fp
 8001762:	b5e0      	push	{r5, r6, r7, lr}
 8001764:	000d      	movs	r5, r1
 8001766:	030f      	lsls	r7, r1, #12
 8001768:	0b39      	lsrs	r1, r7, #12
 800176a:	b083      	sub	sp, #12
 800176c:	0004      	movs	r4, r0
 800176e:	4680      	mov	r8, r0
 8001770:	9101      	str	r1, [sp, #4]
 8001772:	0058      	lsls	r0, r3, #1
 8001774:	0fe9      	lsrs	r1, r5, #31
 8001776:	4f31      	ldr	r7, [pc, #196]	@ (800183c <__gedf2+0xe4>)
 8001778:	0d40      	lsrs	r0, r0, #21
 800177a:	468c      	mov	ip, r1
 800177c:	006e      	lsls	r6, r5, #1
 800177e:	0319      	lsls	r1, r3, #12
 8001780:	4682      	mov	sl, r0
 8001782:	4691      	mov	r9, r2
 8001784:	0d76      	lsrs	r6, r6, #21
 8001786:	0b09      	lsrs	r1, r1, #12
 8001788:	0fd8      	lsrs	r0, r3, #31
 800178a:	42be      	cmp	r6, r7
 800178c:	d01f      	beq.n	80017ce <__gedf2+0x76>
 800178e:	45ba      	cmp	sl, r7
 8001790:	d00f      	beq.n	80017b2 <__gedf2+0x5a>
 8001792:	2e00      	cmp	r6, #0
 8001794:	d12f      	bne.n	80017f6 <__gedf2+0x9e>
 8001796:	4655      	mov	r5, sl
 8001798:	9e01      	ldr	r6, [sp, #4]
 800179a:	4334      	orrs	r4, r6
 800179c:	2d00      	cmp	r5, #0
 800179e:	d127      	bne.n	80017f0 <__gedf2+0x98>
 80017a0:	430a      	orrs	r2, r1
 80017a2:	d03a      	beq.n	800181a <__gedf2+0xc2>
 80017a4:	2c00      	cmp	r4, #0
 80017a6:	d145      	bne.n	8001834 <__gedf2+0xdc>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d11a      	bne.n	80017e2 <__gedf2+0x8a>
 80017ac:	2001      	movs	r0, #1
 80017ae:	4240      	negs	r0, r0
 80017b0:	e017      	b.n	80017e2 <__gedf2+0x8a>
 80017b2:	4311      	orrs	r1, r2
 80017b4:	d13b      	bne.n	800182e <__gedf2+0xd6>
 80017b6:	2e00      	cmp	r6, #0
 80017b8:	d102      	bne.n	80017c0 <__gedf2+0x68>
 80017ba:	9f01      	ldr	r7, [sp, #4]
 80017bc:	4327      	orrs	r7, r4
 80017be:	d0f3      	beq.n	80017a8 <__gedf2+0x50>
 80017c0:	4584      	cmp	ip, r0
 80017c2:	d109      	bne.n	80017d8 <__gedf2+0x80>
 80017c4:	4663      	mov	r3, ip
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <__gedf2+0x54>
 80017ca:	4660      	mov	r0, ip
 80017cc:	e009      	b.n	80017e2 <__gedf2+0x8a>
 80017ce:	9f01      	ldr	r7, [sp, #4]
 80017d0:	4327      	orrs	r7, r4
 80017d2:	d12c      	bne.n	800182e <__gedf2+0xd6>
 80017d4:	45b2      	cmp	sl, r6
 80017d6:	d024      	beq.n	8001822 <__gedf2+0xca>
 80017d8:	4663      	mov	r3, ip
 80017da:	2002      	movs	r0, #2
 80017dc:	3b01      	subs	r3, #1
 80017de:	4018      	ands	r0, r3
 80017e0:	3801      	subs	r0, #1
 80017e2:	b003      	add	sp, #12
 80017e4:	bcf0      	pop	{r4, r5, r6, r7}
 80017e6:	46bb      	mov	fp, r7
 80017e8:	46b2      	mov	sl, r6
 80017ea:	46a9      	mov	r9, r5
 80017ec:	46a0      	mov	r8, r4
 80017ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f0:	2c00      	cmp	r4, #0
 80017f2:	d0d9      	beq.n	80017a8 <__gedf2+0x50>
 80017f4:	e7e4      	b.n	80017c0 <__gedf2+0x68>
 80017f6:	4654      	mov	r4, sl
 80017f8:	2c00      	cmp	r4, #0
 80017fa:	d0ed      	beq.n	80017d8 <__gedf2+0x80>
 80017fc:	4584      	cmp	ip, r0
 80017fe:	d1eb      	bne.n	80017d8 <__gedf2+0x80>
 8001800:	4556      	cmp	r6, sl
 8001802:	dce9      	bgt.n	80017d8 <__gedf2+0x80>
 8001804:	dbde      	blt.n	80017c4 <__gedf2+0x6c>
 8001806:	9b01      	ldr	r3, [sp, #4]
 8001808:	428b      	cmp	r3, r1
 800180a:	d8e5      	bhi.n	80017d8 <__gedf2+0x80>
 800180c:	d1da      	bne.n	80017c4 <__gedf2+0x6c>
 800180e:	45c8      	cmp	r8, r9
 8001810:	d8e2      	bhi.n	80017d8 <__gedf2+0x80>
 8001812:	2000      	movs	r0, #0
 8001814:	45c8      	cmp	r8, r9
 8001816:	d2e4      	bcs.n	80017e2 <__gedf2+0x8a>
 8001818:	e7d4      	b.n	80017c4 <__gedf2+0x6c>
 800181a:	2000      	movs	r0, #0
 800181c:	2c00      	cmp	r4, #0
 800181e:	d0e0      	beq.n	80017e2 <__gedf2+0x8a>
 8001820:	e7da      	b.n	80017d8 <__gedf2+0x80>
 8001822:	4311      	orrs	r1, r2
 8001824:	d103      	bne.n	800182e <__gedf2+0xd6>
 8001826:	4584      	cmp	ip, r0
 8001828:	d1d6      	bne.n	80017d8 <__gedf2+0x80>
 800182a:	2000      	movs	r0, #0
 800182c:	e7d9      	b.n	80017e2 <__gedf2+0x8a>
 800182e:	2002      	movs	r0, #2
 8001830:	4240      	negs	r0, r0
 8001832:	e7d6      	b.n	80017e2 <__gedf2+0x8a>
 8001834:	4584      	cmp	ip, r0
 8001836:	d0e6      	beq.n	8001806 <__gedf2+0xae>
 8001838:	e7ce      	b.n	80017d8 <__gedf2+0x80>
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	000007ff 	.word	0x000007ff

08001840 <__ledf2>:
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	4657      	mov	r7, sl
 8001844:	464e      	mov	r6, r9
 8001846:	4645      	mov	r5, r8
 8001848:	46de      	mov	lr, fp
 800184a:	b5e0      	push	{r5, r6, r7, lr}
 800184c:	000d      	movs	r5, r1
 800184e:	030f      	lsls	r7, r1, #12
 8001850:	0004      	movs	r4, r0
 8001852:	4680      	mov	r8, r0
 8001854:	0fe8      	lsrs	r0, r5, #31
 8001856:	0b39      	lsrs	r1, r7, #12
 8001858:	4684      	mov	ip, r0
 800185a:	b083      	sub	sp, #12
 800185c:	0058      	lsls	r0, r3, #1
 800185e:	4f30      	ldr	r7, [pc, #192]	@ (8001920 <__ledf2+0xe0>)
 8001860:	0d40      	lsrs	r0, r0, #21
 8001862:	9101      	str	r1, [sp, #4]
 8001864:	031e      	lsls	r6, r3, #12
 8001866:	0069      	lsls	r1, r5, #1
 8001868:	4682      	mov	sl, r0
 800186a:	4691      	mov	r9, r2
 800186c:	0d49      	lsrs	r1, r1, #21
 800186e:	0b36      	lsrs	r6, r6, #12
 8001870:	0fd8      	lsrs	r0, r3, #31
 8001872:	42b9      	cmp	r1, r7
 8001874:	d020      	beq.n	80018b8 <__ledf2+0x78>
 8001876:	45ba      	cmp	sl, r7
 8001878:	d00f      	beq.n	800189a <__ledf2+0x5a>
 800187a:	2900      	cmp	r1, #0
 800187c:	d12b      	bne.n	80018d6 <__ledf2+0x96>
 800187e:	9901      	ldr	r1, [sp, #4]
 8001880:	430c      	orrs	r4, r1
 8001882:	4651      	mov	r1, sl
 8001884:	2900      	cmp	r1, #0
 8001886:	d137      	bne.n	80018f8 <__ledf2+0xb8>
 8001888:	4332      	orrs	r2, r6
 800188a:	d038      	beq.n	80018fe <__ledf2+0xbe>
 800188c:	2c00      	cmp	r4, #0
 800188e:	d144      	bne.n	800191a <__ledf2+0xda>
 8001890:	2800      	cmp	r0, #0
 8001892:	d119      	bne.n	80018c8 <__ledf2+0x88>
 8001894:	2001      	movs	r0, #1
 8001896:	4240      	negs	r0, r0
 8001898:	e016      	b.n	80018c8 <__ledf2+0x88>
 800189a:	4316      	orrs	r6, r2
 800189c:	d113      	bne.n	80018c6 <__ledf2+0x86>
 800189e:	2900      	cmp	r1, #0
 80018a0:	d102      	bne.n	80018a8 <__ledf2+0x68>
 80018a2:	9f01      	ldr	r7, [sp, #4]
 80018a4:	4327      	orrs	r7, r4
 80018a6:	d0f3      	beq.n	8001890 <__ledf2+0x50>
 80018a8:	4584      	cmp	ip, r0
 80018aa:	d020      	beq.n	80018ee <__ledf2+0xae>
 80018ac:	4663      	mov	r3, ip
 80018ae:	2002      	movs	r0, #2
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4018      	ands	r0, r3
 80018b4:	3801      	subs	r0, #1
 80018b6:	e007      	b.n	80018c8 <__ledf2+0x88>
 80018b8:	9f01      	ldr	r7, [sp, #4]
 80018ba:	4327      	orrs	r7, r4
 80018bc:	d103      	bne.n	80018c6 <__ledf2+0x86>
 80018be:	458a      	cmp	sl, r1
 80018c0:	d1f4      	bne.n	80018ac <__ledf2+0x6c>
 80018c2:	4316      	orrs	r6, r2
 80018c4:	d01f      	beq.n	8001906 <__ledf2+0xc6>
 80018c6:	2002      	movs	r0, #2
 80018c8:	b003      	add	sp, #12
 80018ca:	bcf0      	pop	{r4, r5, r6, r7}
 80018cc:	46bb      	mov	fp, r7
 80018ce:	46b2      	mov	sl, r6
 80018d0:	46a9      	mov	r9, r5
 80018d2:	46a0      	mov	r8, r4
 80018d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d6:	4654      	mov	r4, sl
 80018d8:	2c00      	cmp	r4, #0
 80018da:	d0e7      	beq.n	80018ac <__ledf2+0x6c>
 80018dc:	4584      	cmp	ip, r0
 80018de:	d1e5      	bne.n	80018ac <__ledf2+0x6c>
 80018e0:	4551      	cmp	r1, sl
 80018e2:	dce3      	bgt.n	80018ac <__ledf2+0x6c>
 80018e4:	db03      	blt.n	80018ee <__ledf2+0xae>
 80018e6:	9b01      	ldr	r3, [sp, #4]
 80018e8:	42b3      	cmp	r3, r6
 80018ea:	d8df      	bhi.n	80018ac <__ledf2+0x6c>
 80018ec:	d00f      	beq.n	800190e <__ledf2+0xce>
 80018ee:	4663      	mov	r3, ip
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0cf      	beq.n	8001894 <__ledf2+0x54>
 80018f4:	4660      	mov	r0, ip
 80018f6:	e7e7      	b.n	80018c8 <__ledf2+0x88>
 80018f8:	2c00      	cmp	r4, #0
 80018fa:	d0c9      	beq.n	8001890 <__ledf2+0x50>
 80018fc:	e7d4      	b.n	80018a8 <__ledf2+0x68>
 80018fe:	2000      	movs	r0, #0
 8001900:	2c00      	cmp	r4, #0
 8001902:	d0e1      	beq.n	80018c8 <__ledf2+0x88>
 8001904:	e7d2      	b.n	80018ac <__ledf2+0x6c>
 8001906:	4584      	cmp	ip, r0
 8001908:	d1d0      	bne.n	80018ac <__ledf2+0x6c>
 800190a:	2000      	movs	r0, #0
 800190c:	e7dc      	b.n	80018c8 <__ledf2+0x88>
 800190e:	45c8      	cmp	r8, r9
 8001910:	d8cc      	bhi.n	80018ac <__ledf2+0x6c>
 8001912:	2000      	movs	r0, #0
 8001914:	45c8      	cmp	r8, r9
 8001916:	d2d7      	bcs.n	80018c8 <__ledf2+0x88>
 8001918:	e7e9      	b.n	80018ee <__ledf2+0xae>
 800191a:	4584      	cmp	ip, r0
 800191c:	d0e3      	beq.n	80018e6 <__ledf2+0xa6>
 800191e:	e7c5      	b.n	80018ac <__ledf2+0x6c>
 8001920:	000007ff 	.word	0x000007ff

08001924 <measure_distance>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t myTime = 0;
bool isTimerActive = false;

uint16_t measure_distance(GPIO_TypeDef* TRIG_GPIO_Port, uint16_t TRIG_Pin, GPIO_TypeDef* ECHO_GPIO_Port, uint16_t ECHO_Pin, TIM_HandleTypeDef tim) {
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	0008      	movs	r0, r1
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	0019      	movs	r1, r3
 8001932:	240a      	movs	r4, #10
 8001934:	193b      	adds	r3, r7, r4
 8001936:	1c02      	adds	r2, r0, #0
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	2308      	movs	r3, #8
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	1c0a      	adds	r2, r1, #0
 8001940:	801a      	strh	r2, [r3, #0]
	uint32_t pMillis;
	uint32_t value1 = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
	uint32_t value2 = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
	uint16_t distance  = 0; //cm
 800194a:	2316      	movs	r3, #22
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	2200      	movs	r2, #0
 8001950:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001952:	193b      	adds	r3, r7, r4
 8001954:	8819      	ldrh	r1, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	0018      	movs	r0, r3
 800195c:	f001 f94d 	bl	8002bfa <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001960:	4b38      	ldr	r3, [pc, #224]	@ (8001a44 <measure_distance+0x120>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&tim) < 10);  // wait for 10 us
 8001968:	46c0      	nop			@ (mov r8, r8)
 800196a:	2330      	movs	r3, #48	@ 0x30
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	2b09      	cmp	r3, #9
 8001974:	d9f9      	bls.n	800196a <measure_distance+0x46>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001976:	230a      	movs	r3, #10
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	8819      	ldrh	r1, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	0018      	movs	r0, r3
 8001982:	f001 f93a 	bl	8002bfa <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001986:	f000 fe97 	bl	80026b8 <HAL_GetTick>
 800198a:	0003      	movs	r3, r0
 800198c:	613b      	str	r3, [r7, #16]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	2308      	movs	r3, #8
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	881a      	ldrh	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0011      	movs	r1, r2
 800199a:	0018      	movs	r0, r3
 800199c:	f001 f910 	bl	8002bc0 <HAL_GPIO_ReadPin>
 80019a0:	1e03      	subs	r3, r0, #0
 80019a2:	d107      	bne.n	80019b4 <measure_distance+0x90>
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	330a      	adds	r3, #10
 80019a8:	001c      	movs	r4, r3
 80019aa:	f000 fe85 	bl	80026b8 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	429c      	cmp	r4, r3
 80019b2:	d8ed      	bhi.n	8001990 <measure_distance+0x6c>
	value1 = __HAL_TIM_GET_COUNTER (&tim);
 80019b4:	2330      	movs	r3, #48	@ 0x30
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	61fb      	str	r3, [r7, #28]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80019be:	f000 fe7b 	bl	80026b8 <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	2308      	movs	r3, #8
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	881a      	ldrh	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	0011      	movs	r1, r2
 80019d2:	0018      	movs	r0, r3
 80019d4:	f001 f8f4 	bl	8002bc0 <HAL_GPIO_ReadPin>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d007      	beq.n	80019ec <measure_distance+0xc8>
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3332      	adds	r3, #50	@ 0x32
 80019e0:	001c      	movs	r4, r3
 80019e2:	f000 fe69 	bl	80026b8 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	429c      	cmp	r4, r3
 80019ea:	d8ed      	bhi.n	80019c8 <measure_distance+0xa4>
	value2 = __HAL_TIM_GET_COUNTER (&tim);
 80019ec:	2330      	movs	r3, #48	@ 0x30
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	61bb      	str	r3, [r7, #24]

	distance = (value2 - value1) * 0.034 / 2;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff fde7 	bl	80015d0 <__aeabi_ui2d>
 8001a02:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <measure_distance+0x124>)
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <measure_distance+0x128>)
 8001a06:	f7fe ff43 	bl	8000890 <__aeabi_dmul>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	000b      	movs	r3, r1
 8001a0e:	0010      	movs	r0, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	2200      	movs	r2, #0
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	05db      	lsls	r3, r3, #23
 8001a18:	f7fe fc20 	bl	800025c <__aeabi_ddiv>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	000b      	movs	r3, r1
 8001a20:	2516      	movs	r5, #22
 8001a22:	197c      	adds	r4, r7, r5
 8001a24:	0010      	movs	r0, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	f7fe fbfa 	bl	8000220 <__aeabi_d2uiz>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	8023      	strh	r3, [r4, #0]
	HAL_Delay(50);
 8001a30:	2032      	movs	r0, #50	@ 0x32
 8001a32:	f000 fe4b 	bl	80026cc <HAL_Delay>

	return distance;
 8001a36:	197b      	adds	r3, r7, r5
 8001a38:	881b      	ldrh	r3, [r3, #0]
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b008      	add	sp, #32
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	20000028 	.word	0x20000028
 8001a48:	b020c49c 	.word	0xb020c49c
 8001a4c:	3fa16872 	.word	0x3fa16872

08001a50 <goForward>:

// CAR MOVEMENT
void goForward() {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_MOTOR_POS_GPIO_Port, RIGHT_MOTOR_POS_Pin, 1);
 8001a54:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <goForward+0x40>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	2120      	movs	r1, #32
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f001 f8cd 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_NEG_GPIO_Port, RIGHT_MOTOR_NEG_Pin, 0);
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <goForward+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	2140      	movs	r1, #64	@ 0x40
 8001a66:	0018      	movs	r0, r3
 8001a68:	f001 f8c7 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_POS_GPIO_Port, LEFT_MOTOR_POS_Pin, 1);
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4807      	ldr	r0, [pc, #28]	@ (8001a90 <goForward+0x40>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	0019      	movs	r1, r3
 8001a76:	f001 f8c0 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_NEG_GPIO_Port, LEFT_MOTOR_NEG_Pin, 0);
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4804      	ldr	r0, [pc, #16]	@ (8001a90 <goForward+0x40>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	0019      	movs	r1, r3
 8001a84:	f001 f8b9 	bl	8002bfa <HAL_GPIO_WritePin>
}
 8001a88:	46c0      	nop			@ (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	48000800 	.word	0x48000800

08001a94 <goBackwards>:

void goBackwards() {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_MOTOR_POS_GPIO_Port, RIGHT_MOTOR_POS_Pin, 0);
 8001a98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <goBackwards+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f001 f8ab 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_NEG_GPIO_Port, RIGHT_MOTOR_NEG_Pin, 1);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <goBackwards+0x40>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2140      	movs	r1, #64	@ 0x40
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f001 f8a5 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_POS_GPIO_Port, LEFT_MOTOR_POS_Pin, 0);
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <goBackwards+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	0019      	movs	r1, r3
 8001aba:	f001 f89e 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_NEG_GPIO_Port, LEFT_MOTOR_NEG_Pin, 1);
 8001abe:	2380      	movs	r3, #128	@ 0x80
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4804      	ldr	r0, [pc, #16]	@ (8001ad4 <goBackwards+0x40>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	f001 f897 	bl	8002bfa <HAL_GPIO_WritePin>
}
 8001acc:	46c0      	nop			@ (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	48000800 	.word	0x48000800

08001ad8 <turnRight>:

void turnRight() {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_MOTOR_POS_GPIO_Port, RIGHT_MOTOR_POS_Pin, 1);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <turnRight+0x40>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f001 f889 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_NEG_GPIO_Port, RIGHT_MOTOR_NEG_Pin, 0);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <turnRight+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	2140      	movs	r1, #64	@ 0x40
 8001aee:	0018      	movs	r0, r3
 8001af0:	f001 f883 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_POS_GPIO_Port, LEFT_MOTOR_POS_Pin, 0);
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4807      	ldr	r0, [pc, #28]	@ (8001b18 <turnRight+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	0019      	movs	r1, r3
 8001afe:	f001 f87c 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_NEG_GPIO_Port, LEFT_MOTOR_NEG_Pin, 1);
 8001b02:	2380      	movs	r3, #128	@ 0x80
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <turnRight+0x40>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	f001 f875 	bl	8002bfa <HAL_GPIO_WritePin>
}
 8001b10:	46c0      	nop			@ (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	48000800 	.word	0x48000800

08001b1c <turnLeft>:

void turnLeft() {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_MOTOR_POS_GPIO_Port, RIGHT_MOTOR_POS_Pin, 0);
 8001b20:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <turnLeft+0x40>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	2120      	movs	r1, #32
 8001b26:	0018      	movs	r0, r3
 8001b28:	f001 f867 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_NEG_GPIO_Port, RIGHT_MOTOR_NEG_Pin, 1);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <turnLeft+0x40>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2140      	movs	r1, #64	@ 0x40
 8001b32:	0018      	movs	r0, r3
 8001b34:	f001 f861 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_POS_GPIO_Port, LEFT_MOTOR_POS_Pin, 1);
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4807      	ldr	r0, [pc, #28]	@ (8001b5c <turnLeft+0x40>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	0019      	movs	r1, r3
 8001b42:	f001 f85a 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_NEG_GPIO_Port, LEFT_MOTOR_NEG_Pin, 0);
 8001b46:	2380      	movs	r3, #128	@ 0x80
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <turnLeft+0x40>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	0019      	movs	r1, r3
 8001b50:	f001 f853 	bl	8002bfa <HAL_GPIO_WritePin>
}
 8001b54:	46c0      	nop			@ (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	48000800 	.word	0x48000800

08001b60 <stop>:

void stop() {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_MOTOR_POS_GPIO_Port, RIGHT_MOTOR_POS_Pin, 0);
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <stop+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	2120      	movs	r1, #32
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f001 f845 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_NEG_GPIO_Port, RIGHT_MOTOR_NEG_Pin, 0);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <stop+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	2140      	movs	r1, #64	@ 0x40
 8001b76:	0018      	movs	r0, r3
 8001b78:	f001 f83f 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_POS_GPIO_Port, LEFT_MOTOR_POS_Pin, 0);
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4807      	ldr	r0, [pc, #28]	@ (8001ba0 <stop+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	0019      	movs	r1, r3
 8001b86:	f001 f838 	bl	8002bfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_NEG_GPIO_Port, LEFT_MOTOR_NEG_Pin, 0);
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <stop+0x40>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	0019      	movs	r1, r3
 8001b94:	f001 f831 	bl	8002bfa <HAL_GPIO_WritePin>
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	48000800 	.word	0x48000800

08001ba4 <reset_time>:

void reset_time() {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	myTime = 0;
 8001ba8:	4b02      	ldr	r3, [pc, #8]	@ (8001bb4 <reset_time+0x10>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000100 	.word	0x20000100

08001bb8 <start_timer>:

void start_timer() {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	isTimerActive = true;
 8001bbc:	4b02      	ldr	r3, [pc, #8]	@ (8001bc8 <start_timer+0x10>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000104 	.word	0x20000104

08001bcc <stop_timer>:

void stop_timer() {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	isTimerActive = false;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	@ (8001bdc <stop_timer+0x10>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
}
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000104 	.word	0x20000104

08001be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be2:	46ce      	mov	lr, r9
 8001be4:	4647      	mov	r7, r8
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b09b      	sub	sp, #108	@ 0x6c
 8001bea:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bec:	f000 fd0a 	bl	8002604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf0:	f000 f9b4 	bl	8001f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf4:	f000 fb1c 	bl	8002230 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001bf8:	f000 fa44 	bl	8002084 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bfc:	f000 fac2 	bl	8002184 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001c00:	f000 f9e8 	bl	8001fd4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
  HAL_TIM_Base_Start_IT(&htim3);
 8001c04:	4bce      	ldr	r3, [pc, #824]	@ (8001f40 <main+0x360>)
 8001c06:	0018      	movs	r0, r3
 8001c08:	f001 fd80 	bl	800370c <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim1);
 8001c0c:	4bcd      	ldr	r3, [pc, #820]	@ (8001f44 <main+0x364>)
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f001 fd32 	bl	8003678 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8001c14:	4bcb      	ldr	r3, [pc, #812]	@ (8001f44 <main+0x364>)
 8001c16:	0018      	movs	r0, r3
 8001c18:	f001 fd2e 	bl	8003678 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(SIDE_TRIG_GPIO_Port, SIDE_TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001c1c:	4bca      	ldr	r3, [pc, #808]	@ (8001f48 <main+0x368>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2104      	movs	r1, #4
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 ffe9 	bl	8002bfa <HAL_GPIO_WritePin>

  uint16_t sideDistanceReference = measure_distance(SIDE_TRIG_GPIO_Port, SIDE_TRIG_Pin, SIDE_ECHO_GPIO_Port, SIDE_ECHO_Pin, htim1);
 8001c28:	230e      	movs	r3, #14
 8001c2a:	18fc      	adds	r4, r7, r3
 8001c2c:	4ec6      	ldr	r6, [pc, #792]	@ (8001f48 <main+0x368>)
 8001c2e:	4dc6      	ldr	r5, [pc, #792]	@ (8001f48 <main+0x368>)
 8001c30:	4ac4      	ldr	r2, [pc, #784]	@ (8001f44 <main+0x364>)
 8001c32:	466b      	mov	r3, sp
 8001c34:	0018      	movs	r0, r3
 8001c36:	0011      	movs	r1, r2
 8001c38:	2348      	movs	r3, #72	@ 0x48
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	f002 fc76 	bl	800452c <memcpy>
 8001c40:	2308      	movs	r3, #8
 8001c42:	0032      	movs	r2, r6
 8001c44:	2104      	movs	r1, #4
 8001c46:	0028      	movs	r0, r5
 8001c48:	f7ff fe6c 	bl	8001924 <measure_distance>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	8023      	strh	r3, [r4, #0]

  uint32_t timeDistance = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]

  bool isParkDone = false;
 8001c54:	231b      	movs	r3, #27
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
  bool isParking = false;
 8001c5c:	231a      	movs	r3, #26
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
  bool isDetectParkingSpot = false;
 8001c64:	2319      	movs	r3, #25
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]

  bool isStartTurningLeftTimeStarted = false;
 8001c6c:	2318      	movs	r3, #24
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
  bool isStartTurningLeft = false;
 8001c74:	2317      	movs	r3, #23
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
  bool isFinishTurningLeft = false;
 8001c7c:	2316      	movs	r3, #22
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]

  bool isStartTurningRightTimeStarted = false;
 8001c84:	2315      	movs	r3, #21
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
  bool isStartTurningRight = false;
 8001c8c:	2314      	movs	r3, #20
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
  bool isFinishTurningRight = false;
 8001c94:	2313      	movs	r3, #19
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]

  bool isCarAlignStarted = false;
 8001c9c:	2312      	movs	r3, #18
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
  bool isCarAligned = false;
 8001ca4:	2311      	movs	r3, #17
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]

  uint32_t carRotateTime = 726;
 8001cac:	4ba7      	ldr	r3, [pc, #668]	@ (8001f4c <main+0x36c>)
 8001cae:	60bb      	str	r3, [r7, #8]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (!isParkDone) {
 8001cb0:	231b      	movs	r3, #27
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4053      	eors	r3, r2
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f7      	beq.n	8001cb0 <main+0xd0>
		  if (!isParking) {
 8001cc0:	231a      	movs	r3, #26
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4053      	eors	r3, r2
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d062      	beq.n	8001d96 <main+0x1b6>
			  goForward();
 8001cd0:	f7ff febe 	bl	8001a50 <goForward>
			  uint16_t sideDist = measure_distance(SIDE_TRIG_GPIO_Port, SIDE_TRIG_Pin, SIDE_ECHO_GPIO_Port, SIDE_ECHO_Pin, htim1);
 8001cd4:	1d3c      	adds	r4, r7, #4
 8001cd6:	4e9c      	ldr	r6, [pc, #624]	@ (8001f48 <main+0x368>)
 8001cd8:	4d9b      	ldr	r5, [pc, #620]	@ (8001f48 <main+0x368>)
 8001cda:	4a9a      	ldr	r2, [pc, #616]	@ (8001f44 <main+0x364>)
 8001cdc:	466b      	mov	r3, sp
 8001cde:	0018      	movs	r0, r3
 8001ce0:	0011      	movs	r1, r2
 8001ce2:	2348      	movs	r3, #72	@ 0x48
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	f002 fc21 	bl	800452c <memcpy>
 8001cea:	2308      	movs	r3, #8
 8001cec:	0032      	movs	r2, r6
 8001cee:	2104      	movs	r1, #4
 8001cf0:	0028      	movs	r0, r5
 8001cf2:	f7ff fe17 	bl	8001924 <measure_distance>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	8023      	strh	r3, [r4, #0]

			  // calculate gap
			  uint16_t sideDistanceGap = sideDist - sideDistanceReference;
 8001cfa:	1cbb      	adds	r3, r7, #2
 8001cfc:	1d39      	adds	r1, r7, #4
 8001cfe:	220e      	movs	r2, #14
 8001d00:	18ba      	adds	r2, r7, r2
 8001d02:	8809      	ldrh	r1, [r1, #0]
 8001d04:	8812      	ldrh	r2, [r2, #0]
 8001d06:	1a8a      	subs	r2, r1, r2
 8001d08:	801a      	strh	r2, [r3, #0]
			  // check is there enough gap for parking
			  if (sideDistanceGap >= 10 && sideDistanceGap < 10000 && !isDetectParkingSpot) {
 8001d0a:	1cbb      	adds	r3, r7, #2
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	2b09      	cmp	r3, #9
 8001d10:	d911      	bls.n	8001d36 <main+0x156>
 8001d12:	1cbb      	adds	r3, r7, #2
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	4a8e      	ldr	r2, [pc, #568]	@ (8001f50 <main+0x370>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d80c      	bhi.n	8001d36 <main+0x156>
 8001d1c:	2119      	movs	r1, #25
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2201      	movs	r2, #1
 8001d24:	4053      	eors	r3, r2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <main+0x156>
				  isDetectParkingSpot = true;
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
				  start_timer();
 8001d32:	f7ff ff41 	bl	8001bb8 <start_timer>
			  }

			  if (isDetectParkingSpot) {
 8001d36:	2319      	movs	r3, #25
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0b7      	beq.n	8001cb0 <main+0xd0>
				  if (sideDistanceGap <= 7 || sideDistanceGap >= 65000) {
 8001d40:	1cbb      	adds	r3, r7, #2
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2b07      	cmp	r3, #7
 8001d46:	d904      	bls.n	8001d52 <main+0x172>
 8001d48:	1cbb      	adds	r3, r7, #2
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	4a81      	ldr	r2, [pc, #516]	@ (8001f54 <main+0x374>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d9ae      	bls.n	8001cb0 <main+0xd0>
					  stop_timer();
 8001d52:	f7ff ff3b 	bl	8001bcc <stop_timer>
					  if (myTime >= 300) {
 8001d56:	4b80      	ldr	r3, [pc, #512]	@ (8001f58 <main+0x378>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	2396      	movs	r3, #150	@ 0x96
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d312      	bcc.n	8001d88 <main+0x1a8>
						  stop();
 8001d62:	f7ff fefd 	bl	8001b60 <stop>
						  timeDistance = myTime;
 8001d66:	4b7c      	ldr	r3, [pc, #496]	@ (8001f58 <main+0x378>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	61fb      	str	r3, [r7, #28]
						  isParking = true;
 8001d6c:	231a      	movs	r3, #26
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
						  HAL_Delay(1000);
 8001d74:	23fa      	movs	r3, #250	@ 0xfa
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f000 fca7 	bl	80026cc <HAL_Delay>
						  reset_time();
 8001d7e:	f7ff ff11 	bl	8001ba4 <reset_time>
						  start_timer();
 8001d82:	f7ff ff19 	bl	8001bb8 <start_timer>
 8001d86:	e793      	b.n	8001cb0 <main+0xd0>
					  }
					  else {
						  isDetectParkingSpot = false;
 8001d88:	2319      	movs	r3, #25
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
						  reset_time();
 8001d90:	f7ff ff08 	bl	8001ba4 <reset_time>
 8001d94:	e78c      	b.n	8001cb0 <main+0xd0>
				  }
			  }

		  }
		  else {
			  goBackwards();
 8001d96:	f7ff fe7d 	bl	8001a94 <goBackwards>
			  if (myTime >= timeDistance && (!isStartTurningLeft || !isStartTurningRight)) {
 8001d9a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f58 <main+0x378>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d81e      	bhi.n	8001de2 <main+0x202>
 8001da4:	2317      	movs	r3, #23
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2201      	movs	r2, #1
 8001dac:	4053      	eors	r3, r2
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d107      	bne.n	8001dc4 <main+0x1e4>
 8001db4:	2314      	movs	r3, #20
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4053      	eors	r3, r2
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00e      	beq.n	8001de2 <main+0x202>
				  stop();
 8001dc4:	f7ff fecc 	bl	8001b60 <stop>
				  stop_timer();
 8001dc8:	f7ff ff00 	bl	8001bcc <stop_timer>
				  reset_time();
 8001dcc:	f7ff feea 	bl	8001ba4 <reset_time>
				  HAL_Delay(1000);
 8001dd0:	23fa      	movs	r3, #250	@ 0xfa
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f000 fc79 	bl	80026cc <HAL_Delay>
				  isStartTurningLeft = true;
 8001dda:	2317      	movs	r3, #23
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
			  }
			  if (!isStartTurningLeftTimeStarted && isStartTurningLeft) {
 8001de2:	2418      	movs	r4, #24
 8001de4:	193b      	adds	r3, r7, r4
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2201      	movs	r2, #1
 8001dea:	4053      	eors	r3, r2
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <main+0x226>
 8001df2:	2317      	movs	r3, #23
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <main+0x226>
				  start_timer();
 8001dfc:	f7ff fedc 	bl	8001bb8 <start_timer>
				  isStartTurningLeftTimeStarted = true;
 8001e00:	193b      	adds	r3, r7, r4
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
			  }
			  if (isStartTurningLeft && !isFinishTurningLeft) {
 8001e06:	2417      	movs	r4, #23
 8001e08:	193b      	adds	r3, r7, r4
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01e      	beq.n	8001e4e <main+0x26e>
 8001e10:	2516      	movs	r5, #22
 8001e12:	197b      	adds	r3, r7, r5
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4053      	eors	r3, r2
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d016      	beq.n	8001e4e <main+0x26e>
				  turnLeft();
 8001e20:	f7ff fe7c 	bl	8001b1c <turnLeft>
				  if (myTime >= carRotateTime) {
 8001e24:	4b4c      	ldr	r3, [pc, #304]	@ (8001f58 <main+0x378>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d80f      	bhi.n	8001e4e <main+0x26e>
					  isStartTurningLeft = false;
 8001e2e:	193b      	adds	r3, r7, r4
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
					  isFinishTurningLeft = true;
 8001e34:	197b      	adds	r3, r7, r5
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
					  stop();
 8001e3a:	f7ff fe91 	bl	8001b60 <stop>
					  stop_timer();
 8001e3e:	f7ff fec5 	bl	8001bcc <stop_timer>
					  reset_time();
 8001e42:	f7ff feaf 	bl	8001ba4 <reset_time>
					  isCarAlignStarted = true;
 8001e46:	2312      	movs	r3, #18
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  if (isCarAlignStarted && !isCarAligned) {
 8001e4e:	2312      	movs	r3, #18
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d039      	beq.n	8001ecc <main+0x2ec>
 8001e58:	2211      	movs	r2, #17
 8001e5a:	18bb      	adds	r3, r7, r2
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4053      	eors	r3, r2
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d031      	beq.n	8001ecc <main+0x2ec>
				  goBackwards();
 8001e68:	f7ff fe14 	bl	8001a94 <goBackwards>

				  uint16_t frontDist = measure_distance(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, FRONT_ECHO_GPIO_Port, FRONT_ECHO_Pin, htim1);
 8001e6c:	1dbc      	adds	r4, r7, #6
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	00de      	lsls	r6, r3, #3
 8001e72:	4935      	ldr	r1, [pc, #212]	@ (8001f48 <main+0x368>)
 8001e74:	4689      	mov	r9, r1
 8001e76:	2380      	movs	r3, #128	@ 0x80
 8001e78:	011d      	lsls	r5, r3, #4
 8001e7a:	4933      	ldr	r1, [pc, #204]	@ (8001f48 <main+0x368>)
 8001e7c:	4688      	mov	r8, r1
 8001e7e:	4a31      	ldr	r2, [pc, #196]	@ (8001f44 <main+0x364>)
 8001e80:	466b      	mov	r3, sp
 8001e82:	0018      	movs	r0, r3
 8001e84:	0011      	movs	r1, r2
 8001e86:	2348      	movs	r3, #72	@ 0x48
 8001e88:	001a      	movs	r2, r3
 8001e8a:	f002 fb4f 	bl	800452c <memcpy>
 8001e8e:	0033      	movs	r3, r6
 8001e90:	464a      	mov	r2, r9
 8001e92:	0029      	movs	r1, r5
 8001e94:	4640      	mov	r0, r8
 8001e96:	f7ff fd45 	bl	8001924 <measure_distance>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	8023      	strh	r3, [r4, #0]

				  if (frontDist <= 8) {
 8001e9e:	1dbb      	adds	r3, r7, #6
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d812      	bhi.n	8001ecc <main+0x2ec>
					  isCarAligned = true;
 8001ea6:	2211      	movs	r2, #17
 8001ea8:	18bb      	adds	r3, r7, r2
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
					  isCarAlignStarted = false;
 8001eae:	2312      	movs	r3, #18
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
					  stop();
 8001eb6:	f7ff fe53 	bl	8001b60 <stop>

					  HAL_Delay(1000);
 8001eba:	23fa      	movs	r3, #250	@ 0xfa
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 fc04 	bl	80026cc <HAL_Delay>
					  isStartTurningRight = true;
 8001ec4:	2314      	movs	r3, #20
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  if (isStartTurningRight && !isStartTurningRightTimeStarted) {
 8001ecc:	2314      	movs	r3, #20
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00c      	beq.n	8001ef0 <main+0x310>
 8001ed6:	2415      	movs	r4, #21
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	4053      	eors	r3, r2
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <main+0x310>
				  start_timer();
 8001ee6:	f7ff fe67 	bl	8001bb8 <start_timer>
				  isStartTurningRightTimeStarted = true;
 8001eea:	193b      	adds	r3, r7, r4
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
			  }
			  if (isStartTurningRight && !isFinishTurningRight) {
 8001ef0:	2414      	movs	r4, #20
 8001ef2:	193b      	adds	r3, r7, r4
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d100      	bne.n	8001efc <main+0x31c>
 8001efa:	e6d9      	b.n	8001cb0 <main+0xd0>
 8001efc:	2513      	movs	r5, #19
 8001efe:	197b      	adds	r3, r7, r5
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	4053      	eors	r3, r2
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d100      	bne.n	8001f0e <main+0x32e>
 8001f0c:	e6d0      	b.n	8001cb0 <main+0xd0>
				  turnRight();
 8001f0e:	f7ff fde3 	bl	8001ad8 <turnRight>
				  if (myTime >= carRotateTime) {
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <main+0x378>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d900      	bls.n	8001f1e <main+0x33e>
 8001f1c:	e6c8      	b.n	8001cb0 <main+0xd0>
					  isStartTurningRight = false;
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
					  isFinishTurningRight = true;
 8001f24:	197b      	adds	r3, r7, r5
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
					  stop();
 8001f2a:	f7ff fe19 	bl	8001b60 <stop>
					  stop_timer();
 8001f2e:	f7ff fe4d 	bl	8001bcc <stop_timer>
					  reset_time();
 8001f32:	f7ff fe37 	bl	8001ba4 <reset_time>

					  isParkDone = true;
 8001f36:	231b      	movs	r3, #27
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
	  if (!isParkDone) {
 8001f3e:	e6b7      	b.n	8001cb0 <main+0xd0>
 8001f40:	200000b8 	.word	0x200000b8
 8001f44:	20000028 	.word	0x20000028
 8001f48:	48000800 	.word	0x48000800
 8001f4c:	000002d6 	.word	0x000002d6
 8001f50:	0000270f 	.word	0x0000270f
 8001f54:	0000fde7 	.word	0x0000fde7
 8001f58:	20000100 	.word	0x20000100

08001f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b093      	sub	sp, #76	@ 0x4c
 8001f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f62:	2414      	movs	r4, #20
 8001f64:	193b      	adds	r3, r7, r4
 8001f66:	0018      	movs	r0, r3
 8001f68:	2334      	movs	r3, #52	@ 0x34
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	f002 fab1 	bl	80044d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	0018      	movs	r0, r3
 8001f76:	2310      	movs	r3, #16
 8001f78:	001a      	movs	r2, r3
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	f002 faaa 	bl	80044d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001f80:	193b      	adds	r3, r7, r4
 8001f82:	2220      	movs	r2, #32
 8001f84:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001f86:	193b      	adds	r3, r7, r4
 8001f88:	2201      	movs	r2, #1
 8001f8a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f8c:	193b      	adds	r3, r7, r4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f92:	193b      	adds	r3, r7, r4
 8001f94:	0018      	movs	r0, r3
 8001f96:	f000 fe4d 	bl	8002c34 <HAL_RCC_OscConfig>
 8001f9a:	1e03      	subs	r3, r0, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001f9e:	f000 f9fd 	bl	800239c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	2203      	movs	r2, #3
 8001fac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f001 f9be 	bl	8003340 <HAL_RCC_ClockConfig>
 8001fc4:	1e03      	subs	r3, r0, #0
 8001fc6:	d001      	beq.n	8001fcc <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001fc8:	f000 f9e8 	bl	800239c <Error_Handler>
  }
}
 8001fcc:	46c0      	nop			@ (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b013      	add	sp, #76	@ 0x4c
 8001fd2:	bd90      	pop	{r4, r7, pc}

08001fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	2308      	movs	r3, #8
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	0018      	movs	r0, r3
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	001a      	movs	r2, r3
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f002 fa75 	bl	80044d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fea:	003b      	movs	r3, r7
 8001fec:	0018      	movs	r0, r3
 8001fee:	2308      	movs	r3, #8
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	f002 fa6e 	bl	80044d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <MX_TIM1_Init+0xa4>)
 8001ffa:	4a20      	ldr	r2, [pc, #128]	@ (800207c <MX_TIM1_Init+0xa8>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <MX_TIM1_Init+0xa4>)
 8002000:	222f      	movs	r2, #47	@ 0x2f
 8002002:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <MX_TIM1_Init+0xa4>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800200a:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <MX_TIM1_Init+0xa4>)
 800200c:	4a1c      	ldr	r2, [pc, #112]	@ (8002080 <MX_TIM1_Init+0xac>)
 800200e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002010:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <MX_TIM1_Init+0xa4>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <MX_TIM1_Init+0xa4>)
 8002018:	2200      	movs	r2, #0
 800201a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201c:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <MX_TIM1_Init+0xa4>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <MX_TIM1_Init+0xa4>)
 8002024:	0018      	movs	r0, r3
 8002026:	f001 fad7 	bl	80035d8 <HAL_TIM_Base_Init>
 800202a:	1e03      	subs	r3, r0, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800202e:	f000 f9b5 	bl	800239c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002032:	2108      	movs	r1, #8
 8002034:	187b      	adds	r3, r7, r1
 8002036:	2280      	movs	r2, #128	@ 0x80
 8002038:	0152      	lsls	r2, r2, #5
 800203a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800203c:	187a      	adds	r2, r7, r1
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <MX_TIM1_Init+0xa4>)
 8002040:	0011      	movs	r1, r2
 8002042:	0018      	movs	r0, r3
 8002044:	f001 fdc0 	bl	8003bc8 <HAL_TIM_ConfigClockSource>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800204c:	f000 f9a6 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002050:	003b      	movs	r3, r7
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002056:	003b      	movs	r3, r7
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800205c:	003a      	movs	r2, r7
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <MX_TIM1_Init+0xa4>)
 8002060:	0011      	movs	r1, r2
 8002062:	0018      	movs	r0, r3
 8002064:	f002 f9c8 	bl	80043f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002068:	1e03      	subs	r3, r0, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800206c:	f000 f996 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002070:	46c0      	nop			@ (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	b006      	add	sp, #24
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000028 	.word	0x20000028
 800207c:	40012c00 	.word	0x40012c00
 8002080:	0000ffff 	.word	0x0000ffff

08002084 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	@ 0x38
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208a:	2328      	movs	r3, #40	@ 0x28
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	0018      	movs	r0, r3
 8002090:	2310      	movs	r3, #16
 8002092:	001a      	movs	r2, r3
 8002094:	2100      	movs	r1, #0
 8002096:	f002 fa1d 	bl	80044d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209a:	2320      	movs	r3, #32
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	0018      	movs	r0, r3
 80020a0:	2308      	movs	r3, #8
 80020a2:	001a      	movs	r2, r3
 80020a4:	2100      	movs	r1, #0
 80020a6:	f002 fa15 	bl	80044d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	0018      	movs	r0, r3
 80020ae:	231c      	movs	r3, #28
 80020b0:	001a      	movs	r2, r3
 80020b2:	2100      	movs	r1, #0
 80020b4:	f002 fa0e 	bl	80044d4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020b8:	4b30      	ldr	r3, [pc, #192]	@ (800217c <MX_TIM2_Init+0xf8>)
 80020ba:	2280      	movs	r2, #128	@ 0x80
 80020bc:	05d2      	lsls	r2, r2, #23
 80020be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80020c0:	4b2e      	ldr	r3, [pc, #184]	@ (800217c <MX_TIM2_Init+0xf8>)
 80020c2:	222f      	movs	r2, #47	@ 0x2f
 80020c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <MX_TIM2_Init+0xf8>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80020cc:	4b2b      	ldr	r3, [pc, #172]	@ (800217c <MX_TIM2_Init+0xf8>)
 80020ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002180 <MX_TIM2_Init+0xfc>)
 80020d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d2:	4b2a      	ldr	r3, [pc, #168]	@ (800217c <MX_TIM2_Init+0xf8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d8:	4b28      	ldr	r3, [pc, #160]	@ (800217c <MX_TIM2_Init+0xf8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020de:	4b27      	ldr	r3, [pc, #156]	@ (800217c <MX_TIM2_Init+0xf8>)
 80020e0:	0018      	movs	r0, r3
 80020e2:	f001 fa79 	bl	80035d8 <HAL_TIM_Base_Init>
 80020e6:	1e03      	subs	r3, r0, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80020ea:	f000 f957 	bl	800239c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ee:	2128      	movs	r1, #40	@ 0x28
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	2280      	movs	r2, #128	@ 0x80
 80020f4:	0152      	lsls	r2, r2, #5
 80020f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020f8:	187a      	adds	r2, r7, r1
 80020fa:	4b20      	ldr	r3, [pc, #128]	@ (800217c <MX_TIM2_Init+0xf8>)
 80020fc:	0011      	movs	r1, r2
 80020fe:	0018      	movs	r0, r3
 8002100:	f001 fd62 	bl	8003bc8 <HAL_TIM_ConfigClockSource>
 8002104:	1e03      	subs	r3, r0, #0
 8002106:	d001      	beq.n	800210c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002108:	f000 f948 	bl	800239c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800210c:	4b1b      	ldr	r3, [pc, #108]	@ (800217c <MX_TIM2_Init+0xf8>)
 800210e:	0018      	movs	r0, r3
 8002110:	f001 fb4e 	bl	80037b0 <HAL_TIM_PWM_Init>
 8002114:	1e03      	subs	r3, r0, #0
 8002116:	d001      	beq.n	800211c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002118:	f000 f940 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211c:	2120      	movs	r1, #32
 800211e:	187b      	adds	r3, r7, r1
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002124:	187b      	adds	r3, r7, r1
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800212a:	187a      	adds	r2, r7, r1
 800212c:	4b13      	ldr	r3, [pc, #76]	@ (800217c <MX_TIM2_Init+0xf8>)
 800212e:	0011      	movs	r1, r2
 8002130:	0018      	movs	r0, r3
 8002132:	f002 f961 	bl	80043f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002136:	1e03      	subs	r3, r0, #0
 8002138:	d001      	beq.n	800213e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800213a:	f000 f92f 	bl	800239c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2260      	movs	r2, #96	@ 0x60
 8002142:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2200      	movs	r2, #0
 8002148:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002156:	1d39      	adds	r1, r7, #4
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <MX_TIM2_Init+0xf8>)
 800215a:	2204      	movs	r2, #4
 800215c:	0018      	movs	r0, r3
 800215e:	f001 fc6d 	bl	8003a3c <HAL_TIM_PWM_ConfigChannel>
 8002162:	1e03      	subs	r3, r0, #0
 8002164:	d001      	beq.n	800216a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8002166:	f000 f919 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800216a:	4b04      	ldr	r3, [pc, #16]	@ (800217c <MX_TIM2_Init+0xf8>)
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f99d 	bl	80024ac <HAL_TIM_MspPostInit>

}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	b00e      	add	sp, #56	@ 0x38
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	20000070 	.word	0x20000070
 8002180:	000003e7 	.word	0x000003e7

08002184 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	2308      	movs	r3, #8
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	0018      	movs	r0, r3
 8002190:	2310      	movs	r3, #16
 8002192:	001a      	movs	r2, r3
 8002194:	2100      	movs	r1, #0
 8002196:	f002 f99d 	bl	80044d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219a:	003b      	movs	r3, r7
 800219c:	0018      	movs	r0, r3
 800219e:	2308      	movs	r3, #8
 80021a0:	001a      	movs	r2, r3
 80021a2:	2100      	movs	r1, #0
 80021a4:	f002 f996 	bl	80044d4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002224 <MX_TIM3_Init+0xa0>)
 80021aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002228 <MX_TIM3_Init+0xa4>)
 80021ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80021ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <MX_TIM3_Init+0xa0>)
 80021b0:	222f      	movs	r2, #47	@ 0x2f
 80021b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <MX_TIM3_Init+0xa0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80021ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <MX_TIM3_Init+0xa0>)
 80021bc:	4a1b      	ldr	r2, [pc, #108]	@ (800222c <MX_TIM3_Init+0xa8>)
 80021be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c0:	4b18      	ldr	r3, [pc, #96]	@ (8002224 <MX_TIM3_Init+0xa0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <MX_TIM3_Init+0xa0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021cc:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <MX_TIM3_Init+0xa0>)
 80021ce:	0018      	movs	r0, r3
 80021d0:	f001 fa02 	bl	80035d8 <HAL_TIM_Base_Init>
 80021d4:	1e03      	subs	r3, r0, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80021d8:	f000 f8e0 	bl	800239c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021dc:	2108      	movs	r1, #8
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	0152      	lsls	r2, r2, #5
 80021e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021e6:	187a      	adds	r2, r7, r1
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <MX_TIM3_Init+0xa0>)
 80021ea:	0011      	movs	r1, r2
 80021ec:	0018      	movs	r0, r3
 80021ee:	f001 fceb 	bl	8003bc8 <HAL_TIM_ConfigClockSource>
 80021f2:	1e03      	subs	r3, r0, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80021f6:	f000 f8d1 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fa:	003b      	movs	r3, r7
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002200:	003b      	movs	r3, r7
 8002202:	2200      	movs	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002206:	003a      	movs	r2, r7
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <MX_TIM3_Init+0xa0>)
 800220a:	0011      	movs	r1, r2
 800220c:	0018      	movs	r0, r3
 800220e:	f002 f8f3 	bl	80043f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002212:	1e03      	subs	r3, r0, #0
 8002214:	d001      	beq.n	800221a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002216:	f000 f8c1 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b006      	add	sp, #24
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	200000b8 	.word	0x200000b8
 8002228:	40000400 	.word	0x40000400
 800222c:	000003e7 	.word	0x000003e7

08002230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b089      	sub	sp, #36	@ 0x24
 8002234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002236:	240c      	movs	r4, #12
 8002238:	193b      	adds	r3, r7, r4
 800223a:	0018      	movs	r0, r3
 800223c:	2314      	movs	r3, #20
 800223e:	001a      	movs	r2, r3
 8002240:	2100      	movs	r1, #0
 8002242:	f002 f947 	bl	80044d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002246:	4b44      	ldr	r3, [pc, #272]	@ (8002358 <MX_GPIO_Init+0x128>)
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <MX_GPIO_Init+0x128>)
 800224c:	2180      	movs	r1, #128	@ 0x80
 800224e:	0309      	lsls	r1, r1, #12
 8002250:	430a      	orrs	r2, r1
 8002252:	615a      	str	r2, [r3, #20]
 8002254:	4b40      	ldr	r3, [pc, #256]	@ (8002358 <MX_GPIO_Init+0x128>)
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	031b      	lsls	r3, r3, #12
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002262:	4b3d      	ldr	r3, [pc, #244]	@ (8002358 <MX_GPIO_Init+0x128>)
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	4b3c      	ldr	r3, [pc, #240]	@ (8002358 <MX_GPIO_Init+0x128>)
 8002268:	2180      	movs	r1, #128	@ 0x80
 800226a:	03c9      	lsls	r1, r1, #15
 800226c:	430a      	orrs	r2, r1
 800226e:	615a      	str	r2, [r3, #20]
 8002270:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <MX_GPIO_Init+0x128>)
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	03db      	lsls	r3, r3, #15
 8002278:	4013      	ands	r3, r2
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	4b36      	ldr	r3, [pc, #216]	@ (8002358 <MX_GPIO_Init+0x128>)
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <MX_GPIO_Init+0x128>)
 8002284:	2180      	movs	r1, #128	@ 0x80
 8002286:	0289      	lsls	r1, r1, #10
 8002288:	430a      	orrs	r2, r1
 800228a:	615a      	str	r2, [r3, #20]
 800228c:	4b32      	ldr	r3, [pc, #200]	@ (8002358 <MX_GPIO_Init+0x128>)
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	2380      	movs	r3, #128	@ 0x80
 8002292:	029b      	lsls	r3, r3, #10
 8002294:	4013      	ands	r3, r2
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FRONT_TRIG_Pin|SIDE_TRIG_Pin|RIGHT_MOTOR_POS_Pin|RIGHT_MOTOR_NEG_Pin
 800229a:	4930      	ldr	r1, [pc, #192]	@ (800235c <MX_GPIO_Init+0x12c>)
 800229c:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <MX_GPIO_Init+0x130>)
 800229e:	2200      	movs	r2, #0
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 fcaa 	bl	8002bfa <HAL_GPIO_WritePin>
                          |LEFT_MOTOR_NEG_Pin|LEFT_MOTOR_POS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022a6:	2390      	movs	r3, #144	@ 0x90
 80022a8:	05db      	lsls	r3, r3, #23
 80022aa:	2200      	movs	r2, #0
 80022ac:	2120      	movs	r1, #32
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 fca3 	bl	8002bfa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRONT_TRIG_Pin SIDE_TRIG_Pin RIGHT_MOTOR_POS_Pin RIGHT_MOTOR_NEG_Pin
                           LEFT_MOTOR_NEG_Pin LEFT_MOTOR_POS_Pin */
  GPIO_InitStruct.Pin = FRONT_TRIG_Pin|SIDE_TRIG_Pin|RIGHT_MOTOR_POS_Pin|RIGHT_MOTOR_NEG_Pin
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	4a29      	ldr	r2, [pc, #164]	@ (800235c <MX_GPIO_Init+0x12c>)
 80022b8:	601a      	str	r2, [r3, #0]
                          |LEFT_MOTOR_NEG_Pin|LEFT_MOTOR_POS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ba:	193b      	adds	r3, r7, r4
 80022bc:	2201      	movs	r2, #1
 80022be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	2200      	movs	r2, #0
 80022ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	4a24      	ldr	r2, [pc, #144]	@ (8002360 <MX_GPIO_Init+0x130>)
 80022d0:	0019      	movs	r1, r3
 80022d2:	0010      	movs	r0, r2
 80022d4:	f000 fafc 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FRONT_ECHO_Pin SIDE_ECHO_Pin */
  GPIO_InitStruct.Pin = FRONT_ECHO_Pin|SIDE_ECHO_Pin;
 80022d8:	0021      	movs	r1, r4
 80022da:	187b      	adds	r3, r7, r1
 80022dc:	2281      	movs	r2, #129	@ 0x81
 80022de:	00d2      	lsls	r2, r2, #3
 80022e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e2:	000c      	movs	r4, r1
 80022e4:	193b      	adds	r3, r7, r4
 80022e6:	2200      	movs	r2, #0
 80022e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	193b      	adds	r3, r7, r4
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <MX_GPIO_Init+0x130>)
 80022f4:	0019      	movs	r1, r3
 80022f6:	0010      	movs	r0, r2
 80022f8:	f000 faea 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 80022fc:	193b      	adds	r3, r7, r4
 80022fe:	2208      	movs	r2, #8
 8002300:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	193b      	adds	r3, r7, r4
 8002304:	2202      	movs	r2, #2
 8002306:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	193b      	adds	r3, r7, r4
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	193b      	adds	r3, r7, r4
 8002310:	2200      	movs	r2, #0
 8002312:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002314:	193b      	adds	r3, r7, r4
 8002316:	2201      	movs	r2, #1
 8002318:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800231a:	193a      	adds	r2, r7, r4
 800231c:	2390      	movs	r3, #144	@ 0x90
 800231e:	05db      	lsls	r3, r3, #23
 8002320:	0011      	movs	r1, r2
 8002322:	0018      	movs	r0, r3
 8002324:	f000 fad4 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002328:	0021      	movs	r1, r4
 800232a:	187b      	adds	r3, r7, r1
 800232c:	2220      	movs	r2, #32
 800232e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2201      	movs	r2, #1
 8002334:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	187b      	adds	r3, r7, r1
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	187b      	adds	r3, r7, r1
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002342:	187a      	adds	r2, r7, r1
 8002344:	2390      	movs	r3, #144	@ 0x90
 8002346:	05db      	lsls	r3, r3, #23
 8002348:	0011      	movs	r1, r2
 800234a:	0018      	movs	r0, r3
 800234c:	f000 fac0 	bl	80028d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002350:	46c0      	nop			@ (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b009      	add	sp, #36	@ 0x24
 8002356:	bd90      	pop	{r4, r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	00000b64 	.word	0x00000b64
 8002360:	48000800 	.word	0x48000800

08002364 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && isTimerActive) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a07      	ldr	r2, [pc, #28]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <HAL_TIM_PeriodElapsedCallback+0x24>
 8002376:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <HAL_TIM_PeriodElapsedCallback+0x24>
    	myTime++;
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002386:	601a      	str	r2, [r3, #0]
    }
}
 8002388:	46c0      	nop			@ (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40000400 	.word	0x40000400
 8002394:	20000104 	.word	0x20000104
 8002398:	20000100 	.word	0x20000100

0800239c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a0:	b672      	cpsid	i
}
 80023a2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a4:	46c0      	nop			@ (mov r8, r8)
 80023a6:	e7fd      	b.n	80023a4 <Error_Handler+0x8>

080023a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <HAL_MspInit+0x44>)
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	4b0e      	ldr	r3, [pc, #56]	@ (80023ec <HAL_MspInit+0x44>)
 80023b4:	2101      	movs	r1, #1
 80023b6:	430a      	orrs	r2, r1
 80023b8:	619a      	str	r2, [r3, #24]
 80023ba:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <HAL_MspInit+0x44>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2201      	movs	r2, #1
 80023c0:	4013      	ands	r3, r2
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <HAL_MspInit+0x44>)
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <HAL_MspInit+0x44>)
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0549      	lsls	r1, r1, #21
 80023d0:	430a      	orrs	r2, r1
 80023d2:	61da      	str	r2, [r3, #28]
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_MspInit+0x44>)
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	055b      	lsls	r3, r3, #21
 80023dc:	4013      	ands	r3, r2
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a28      	ldr	r2, [pc, #160]	@ (80024a0 <HAL_TIM_Base_MspInit+0xb0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d116      	bne.n	8002430 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002402:	4b28      	ldr	r3, [pc, #160]	@ (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	4b27      	ldr	r3, [pc, #156]	@ (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002408:	2180      	movs	r1, #128	@ 0x80
 800240a:	0109      	lsls	r1, r1, #4
 800240c:	430a      	orrs	r2, r1
 800240e:	619a      	str	r2, [r3, #24]
 8002410:	4b24      	ldr	r3, [pc, #144]	@ (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	4013      	ands	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	200e      	movs	r0, #14
 8002424:	f000 fa22 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002428:	200e      	movs	r0, #14
 800242a:	f000 fa34 	bl	8002896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800242e:	e033      	b.n	8002498 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	05db      	lsls	r3, r3, #23
 8002438:	429a      	cmp	r2, r3
 800243a:	d114      	bne.n	8002466 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002442:	2101      	movs	r1, #1
 8002444:	430a      	orrs	r2, r1
 8002446:	61da      	str	r2, [r3, #28]
 8002448:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	2201      	movs	r2, #1
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	200f      	movs	r0, #15
 800245a:	f000 fa07 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800245e:	200f      	movs	r0, #15
 8002460:	f000 fa19 	bl	8002896 <HAL_NVIC_EnableIRQ>
}
 8002464:	e018      	b.n	8002498 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM3)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <HAL_TIM_Base_MspInit+0xb8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d113      	bne.n	8002498 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002470:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002476:	2102      	movs	r1, #2
 8002478:	430a      	orrs	r2, r1
 800247a:	61da      	str	r2, [r3, #28]
 800247c:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	2010      	movs	r0, #16
 800248e:	f000 f9ed 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002492:	2010      	movs	r0, #16
 8002494:	f000 f9ff 	bl	8002896 <HAL_NVIC_EnableIRQ>
}
 8002498:	46c0      	nop			@ (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b006      	add	sp, #24
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40000400 	.word	0x40000400

080024ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	240c      	movs	r4, #12
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	0018      	movs	r0, r3
 80024ba:	2314      	movs	r3, #20
 80024bc:	001a      	movs	r2, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	f002 f808 	bl	80044d4 <memset>
  if(htim->Instance==TIM2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	05db      	lsls	r3, r3, #23
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d124      	bne.n	800251a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <HAL_TIM_MspPostInit+0x78>)
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <HAL_TIM_MspPostInit+0x78>)
 80024d6:	2180      	movs	r1, #128	@ 0x80
 80024d8:	0289      	lsls	r1, r1, #10
 80024da:	430a      	orrs	r2, r1
 80024dc:	615a      	str	r2, [r3, #20]
 80024de:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_TIM_MspPostInit+0x78>)
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	029b      	lsls	r3, r3, #10
 80024e6:	4013      	ands	r3, r2
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024ec:	0021      	movs	r1, r4
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	2202      	movs	r2, #2
 80024f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	2202      	movs	r2, #2
 80024f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	187b      	adds	r3, r7, r1
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002506:	187b      	adds	r3, r7, r1
 8002508:	2202      	movs	r2, #2
 800250a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250c:	187a      	adds	r2, r7, r1
 800250e:	2390      	movs	r3, #144	@ 0x90
 8002510:	05db      	lsls	r3, r3, #23
 8002512:	0011      	movs	r1, r2
 8002514:	0018      	movs	r0, r3
 8002516:	f000 f9db 	bl	80028d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b009      	add	sp, #36	@ 0x24
 8002520:	bd90      	pop	{r4, r7, pc}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	40021000 	.word	0x40021000

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800252c:	46c0      	nop			@ (mov r8, r8)
 800252e:	e7fd      	b.n	800252c <NMI_Handler+0x4>

08002530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002534:	46c0      	nop			@ (mov r8, r8)
 8002536:	e7fd      	b.n	8002534 <HardFault_Handler+0x4>

08002538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800253c:	46c0      	nop			@ (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002550:	f000 f8a0 	bl	8002694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002554:	46c0      	nop			@ (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <TIM1_CC_IRQHandler+0x14>)
 8002562:	0018      	movs	r0, r3
 8002564:	f001 f97c 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002568:	46c0      	nop			@ (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	20000028 	.word	0x20000028

08002574 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002578:	4b03      	ldr	r3, [pc, #12]	@ (8002588 <TIM2_IRQHandler+0x14>)
 800257a:	0018      	movs	r0, r3
 800257c:	f001 f970 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002580:	46c0      	nop			@ (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	20000070 	.word	0x20000070

0800258c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <TIM3_IRQHandler+0x14>)
 8002592:	0018      	movs	r0, r3
 8002594:	f001 f964 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002598:	46c0      	nop			@ (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	200000b8 	.word	0x200000b8

080025a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80025a8:	46c0      	nop			@ (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025b0:	480d      	ldr	r0, [pc, #52]	@ (80025e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025b4:	f7ff fff6 	bl	80025a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b8:	480c      	ldr	r0, [pc, #48]	@ (80025ec <LoopForever+0x6>)
  ldr r1, =_edata
 80025ba:	490d      	ldr	r1, [pc, #52]	@ (80025f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025bc:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <LoopForever+0xe>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c0:	e002      	b.n	80025c8 <LoopCopyDataInit>

080025c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025c6:	3304      	adds	r3, #4

080025c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025cc:	d3f9      	bcc.n	80025c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ce:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025d0:	4c0a      	ldr	r4, [pc, #40]	@ (80025fc <LoopForever+0x16>)
  movs r3, #0
 80025d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d4:	e001      	b.n	80025da <LoopFillZerobss>

080025d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d8:	3204      	adds	r2, #4

080025da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025dc:	d3fb      	bcc.n	80025d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025de:	f001 ff81 	bl	80044e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025e2:	f7ff fafd 	bl	8001be0 <main>

080025e6 <LoopForever>:

LoopForever:
    b LoopForever
 80025e6:	e7fe      	b.n	80025e6 <LoopForever>
  ldr   r0, =_estack
 80025e8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80025ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80025f4:	080045d0 	.word	0x080045d0
  ldr r2, =_sbss
 80025f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80025fc:	2000010c 	.word	0x2000010c

08002600 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002600:	e7fe      	b.n	8002600 <ADC1_COMP_IRQHandler>
	...

08002604 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002608:	4b07      	ldr	r3, [pc, #28]	@ (8002628 <HAL_Init+0x24>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_Init+0x24>)
 800260e:	2110      	movs	r1, #16
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002614:	2000      	movs	r0, #0
 8002616:	f000 f809 	bl	800262c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800261a:	f7ff fec5 	bl	80023a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	40022000 	.word	0x40022000

0800262c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002634:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <HAL_InitTick+0x5c>)
 8002636:	681c      	ldr	r4, [r3, #0]
 8002638:	4b14      	ldr	r3, [pc, #80]	@ (800268c <HAL_InitTick+0x60>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	0019      	movs	r1, r3
 800263e:	23fa      	movs	r3, #250	@ 0xfa
 8002640:	0098      	lsls	r0, r3, #2
 8002642:	f7fd fd61 	bl	8000108 <__udivsi3>
 8002646:	0003      	movs	r3, r0
 8002648:	0019      	movs	r1, r3
 800264a:	0020      	movs	r0, r4
 800264c:	f7fd fd5c 	bl	8000108 <__udivsi3>
 8002650:	0003      	movs	r3, r0
 8002652:	0018      	movs	r0, r3
 8002654:	f000 f92f 	bl	80028b6 <HAL_SYSTICK_Config>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d001      	beq.n	8002660 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e00f      	b.n	8002680 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d80b      	bhi.n	800267e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	2301      	movs	r3, #1
 800266a:	425b      	negs	r3, r3
 800266c:	2200      	movs	r2, #0
 800266e:	0018      	movs	r0, r3
 8002670:	f000 f8fc 	bl	800286c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_InitTick+0x64>)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	e000      	b.n	8002680 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b003      	add	sp, #12
 8002686:	bd90      	pop	{r4, r7, pc}
 8002688:	20000000 	.word	0x20000000
 800268c:	20000008 	.word	0x20000008
 8002690:	20000004 	.word	0x20000004

08002694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_IncTick+0x1c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	001a      	movs	r2, r3
 800269e:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <HAL_IncTick+0x20>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	18d2      	adds	r2, r2, r3
 80026a4:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <HAL_IncTick+0x20>)
 80026a6:	601a      	str	r2, [r3, #0]
}
 80026a8:	46c0      	nop			@ (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	20000008 	.word	0x20000008
 80026b4:	20000108 	.word	0x20000108

080026b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  return uwTick;
 80026bc:	4b02      	ldr	r3, [pc, #8]	@ (80026c8 <HAL_GetTick+0x10>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	20000108 	.word	0x20000108

080026cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff fff0 	bl	80026b8 <HAL_GetTick>
 80026d8:	0003      	movs	r3, r0
 80026da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3301      	adds	r3, #1
 80026e4:	d005      	beq.n	80026f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002710 <HAL_Delay+0x44>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	001a      	movs	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	189b      	adds	r3, r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	f7ff ffe0 	bl	80026b8 <HAL_GetTick>
 80026f8:	0002      	movs	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	429a      	cmp	r2, r3
 8002702:	d8f7      	bhi.n	80026f4 <HAL_Delay+0x28>
  {
  }
}
 8002704:	46c0      	nop			@ (mov r8, r8)
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b004      	add	sp, #16
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	20000008 	.word	0x20000008

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	0002      	movs	r2, r0
 800271c:	1dfb      	adds	r3, r7, #7
 800271e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002720:	1dfb      	adds	r3, r7, #7
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b7f      	cmp	r3, #127	@ 0x7f
 8002726:	d809      	bhi.n	800273c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	001a      	movs	r2, r3
 800272e:	231f      	movs	r3, #31
 8002730:	401a      	ands	r2, r3
 8002732:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <__NVIC_EnableIRQ+0x30>)
 8002734:	2101      	movs	r1, #1
 8002736:	4091      	lsls	r1, r2
 8002738:	000a      	movs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
  }
}
 800273c:	46c0      	nop			@ (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}
 8002744:	e000e100 	.word	0xe000e100

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	0002      	movs	r2, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	1dfb      	adds	r3, r7, #7
 8002754:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b7f      	cmp	r3, #127	@ 0x7f
 800275c:	d828      	bhi.n	80027b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800275e:	4a2f      	ldr	r2, [pc, #188]	@ (800281c <__NVIC_SetPriority+0xd4>)
 8002760:	1dfb      	adds	r3, r7, #7
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	b25b      	sxtb	r3, r3
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	33c0      	adds	r3, #192	@ 0xc0
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	589b      	ldr	r3, [r3, r2]
 800276e:	1dfa      	adds	r2, r7, #7
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	0011      	movs	r1, r2
 8002774:	2203      	movs	r2, #3
 8002776:	400a      	ands	r2, r1
 8002778:	00d2      	lsls	r2, r2, #3
 800277a:	21ff      	movs	r1, #255	@ 0xff
 800277c:	4091      	lsls	r1, r2
 800277e:	000a      	movs	r2, r1
 8002780:	43d2      	mvns	r2, r2
 8002782:	401a      	ands	r2, r3
 8002784:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	22ff      	movs	r2, #255	@ 0xff
 800278c:	401a      	ands	r2, r3
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	0018      	movs	r0, r3
 8002794:	2303      	movs	r3, #3
 8002796:	4003      	ands	r3, r0
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800279c:	481f      	ldr	r0, [pc, #124]	@ (800281c <__NVIC_SetPriority+0xd4>)
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	430a      	orrs	r2, r1
 80027a8:	33c0      	adds	r3, #192	@ 0xc0
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027ae:	e031      	b.n	8002814 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002820 <__NVIC_SetPriority+0xd8>)
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	0019      	movs	r1, r3
 80027b8:	230f      	movs	r3, #15
 80027ba:	400b      	ands	r3, r1
 80027bc:	3b08      	subs	r3, #8
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3306      	adds	r3, #6
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	18d3      	adds	r3, r2, r3
 80027c6:	3304      	adds	r3, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	1dfa      	adds	r2, r7, #7
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	0011      	movs	r1, r2
 80027d0:	2203      	movs	r2, #3
 80027d2:	400a      	ands	r2, r1
 80027d4:	00d2      	lsls	r2, r2, #3
 80027d6:	21ff      	movs	r1, #255	@ 0xff
 80027d8:	4091      	lsls	r1, r2
 80027da:	000a      	movs	r2, r1
 80027dc:	43d2      	mvns	r2, r2
 80027de:	401a      	ands	r2, r3
 80027e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	22ff      	movs	r2, #255	@ 0xff
 80027e8:	401a      	ands	r2, r3
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	0018      	movs	r0, r3
 80027f0:	2303      	movs	r3, #3
 80027f2:	4003      	ands	r3, r0
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f8:	4809      	ldr	r0, [pc, #36]	@ (8002820 <__NVIC_SetPriority+0xd8>)
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	001c      	movs	r4, r3
 8002800:	230f      	movs	r3, #15
 8002802:	4023      	ands	r3, r4
 8002804:	3b08      	subs	r3, #8
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	430a      	orrs	r2, r1
 800280a:	3306      	adds	r3, #6
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	18c3      	adds	r3, r0, r3
 8002810:	3304      	adds	r3, #4
 8002812:	601a      	str	r2, [r3, #0]
}
 8002814:	46c0      	nop			@ (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b003      	add	sp, #12
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	e000e100 	.word	0xe000e100
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	1e5a      	subs	r2, r3, #1
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	045b      	lsls	r3, r3, #17
 8002834:	429a      	cmp	r2, r3
 8002836:	d301      	bcc.n	800283c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002838:	2301      	movs	r3, #1
 800283a:	e010      	b.n	800285e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283c:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <SysTick_Config+0x44>)
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	3a01      	subs	r2, #1
 8002842:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002844:	2301      	movs	r3, #1
 8002846:	425b      	negs	r3, r3
 8002848:	2103      	movs	r1, #3
 800284a:	0018      	movs	r0, r3
 800284c:	f7ff ff7c 	bl	8002748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <SysTick_Config+0x44>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002856:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <SysTick_Config+0x44>)
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800285c:	2300      	movs	r3, #0
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b002      	add	sp, #8
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	210f      	movs	r1, #15
 8002878:	187b      	adds	r3, r7, r1
 800287a:	1c02      	adds	r2, r0, #0
 800287c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	187b      	adds	r3, r7, r1
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b25b      	sxtb	r3, r3
 8002886:	0011      	movs	r1, r2
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff ff5d 	bl	8002748 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b004      	add	sp, #16
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	0002      	movs	r2, r0
 800289e:	1dfb      	adds	r3, r7, #7
 80028a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff ff33 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b002      	add	sp, #8
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7ff ffaf 	bl	8002824 <SysTick_Config>
 80028c6:	0003      	movs	r3, r0
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028de:	e155      	b.n	8002b8c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2101      	movs	r1, #1
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4091      	lsls	r1, r2
 80028ea:	000a      	movs	r2, r1
 80028ec:	4013      	ands	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d100      	bne.n	80028f8 <HAL_GPIO_Init+0x28>
 80028f6:	e146      	b.n	8002b86 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2203      	movs	r2, #3
 80028fe:	4013      	ands	r3, r2
 8002900:	2b01      	cmp	r3, #1
 8002902:	d005      	beq.n	8002910 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2203      	movs	r2, #3
 800290a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800290c:	2b02      	cmp	r3, #2
 800290e:	d130      	bne.n	8002972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	409a      	lsls	r2, r3
 800291e:	0013      	movs	r3, r2
 8002920:	43da      	mvns	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	409a      	lsls	r2, r3
 8002932:	0013      	movs	r3, r2
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002946:	2201      	movs	r2, #1
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
 800294c:	0013      	movs	r3, r2
 800294e:	43da      	mvns	r2, r3
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	2201      	movs	r2, #1
 800295e:	401a      	ands	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	409a      	lsls	r2, r3
 8002964:	0013      	movs	r3, r2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2203      	movs	r2, #3
 8002978:	4013      	ands	r3, r2
 800297a:	2b03      	cmp	r3, #3
 800297c:	d017      	beq.n	80029ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	2203      	movs	r2, #3
 800298a:	409a      	lsls	r2, r3
 800298c:	0013      	movs	r3, r2
 800298e:	43da      	mvns	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	409a      	lsls	r2, r3
 80029a0:	0013      	movs	r3, r2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2203      	movs	r2, #3
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d123      	bne.n	8002a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	58d3      	ldr	r3, [r2, r3]
 80029c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2207      	movs	r2, #7
 80029cc:	4013      	ands	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	409a      	lsls	r2, r3
 80029d4:	0013      	movs	r3, r2
 80029d6:	43da      	mvns	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2107      	movs	r1, #7
 80029e6:	400b      	ands	r3, r1
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	409a      	lsls	r2, r3
 80029ec:	0013      	movs	r3, r2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	0092      	lsls	r2, r2, #2
 80029fe:	6939      	ldr	r1, [r7, #16]
 8002a00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	0013      	movs	r3, r2
 8002a12:	43da      	mvns	r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2203      	movs	r2, #3
 8002a20:	401a      	ands	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	23c0      	movs	r3, #192	@ 0xc0
 8002a3c:	029b      	lsls	r3, r3, #10
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d100      	bne.n	8002a44 <HAL_GPIO_Init+0x174>
 8002a42:	e0a0      	b.n	8002b86 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a44:	4b57      	ldr	r3, [pc, #348]	@ (8002ba4 <HAL_GPIO_Init+0x2d4>)
 8002a46:	699a      	ldr	r2, [r3, #24]
 8002a48:	4b56      	ldr	r3, [pc, #344]	@ (8002ba4 <HAL_GPIO_Init+0x2d4>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	619a      	str	r2, [r3, #24]
 8002a50:	4b54      	ldr	r3, [pc, #336]	@ (8002ba4 <HAL_GPIO_Init+0x2d4>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2201      	movs	r2, #1
 8002a56:	4013      	ands	r3, r2
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ba8 <HAL_GPIO_Init+0x2d8>)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	589b      	ldr	r3, [r3, r2]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	4013      	ands	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	220f      	movs	r2, #15
 8002a74:	409a      	lsls	r2, r3
 8002a76:	0013      	movs	r3, r2
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	2390      	movs	r3, #144	@ 0x90
 8002a84:	05db      	lsls	r3, r3, #23
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d019      	beq.n	8002abe <HAL_GPIO_Init+0x1ee>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a47      	ldr	r2, [pc, #284]	@ (8002bac <HAL_GPIO_Init+0x2dc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_GPIO_Init+0x1ea>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a46      	ldr	r2, [pc, #280]	@ (8002bb0 <HAL_GPIO_Init+0x2e0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00d      	beq.n	8002ab6 <HAL_GPIO_Init+0x1e6>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a45      	ldr	r2, [pc, #276]	@ (8002bb4 <HAL_GPIO_Init+0x2e4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x1e2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a44      	ldr	r2, [pc, #272]	@ (8002bb8 <HAL_GPIO_Init+0x2e8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_GPIO_Init+0x1de>
 8002aaa:	2304      	movs	r3, #4
 8002aac:	e008      	b.n	8002ac0 <HAL_GPIO_Init+0x1f0>
 8002aae:	2305      	movs	r3, #5
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x1f0>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e004      	b.n	8002ac0 <HAL_GPIO_Init+0x1f0>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_Init+0x1f0>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_GPIO_Init+0x1f0>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	2103      	movs	r1, #3
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	0092      	lsls	r2, r2, #2
 8002ac8:	4093      	lsls	r3, r2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ad0:	4935      	ldr	r1, [pc, #212]	@ (8002ba8 <HAL_GPIO_Init+0x2d8>)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ade:	4b37      	ldr	r3, [pc, #220]	@ (8002bbc <HAL_GPIO_Init+0x2ec>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	035b      	lsls	r3, r3, #13
 8002af6:	4013      	ands	r3, r2
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b02:	4b2e      	ldr	r3, [pc, #184]	@ (8002bbc <HAL_GPIO_Init+0x2ec>)
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b08:	4b2c      	ldr	r3, [pc, #176]	@ (8002bbc <HAL_GPIO_Init+0x2ec>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	43da      	mvns	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	039b      	lsls	r3, r3, #14
 8002b20:	4013      	ands	r3, r2
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b2c:	4b23      	ldr	r3, [pc, #140]	@ (8002bbc <HAL_GPIO_Init+0x2ec>)
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002b32:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <HAL_GPIO_Init+0x2ec>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	029b      	lsls	r3, r3, #10
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b56:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <HAL_GPIO_Init+0x2ec>)
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002b5c:	4b17      	ldr	r3, [pc, #92]	@ (8002bbc <HAL_GPIO_Init+0x2ec>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	43da      	mvns	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	025b      	lsls	r3, r3, #9
 8002b74:	4013      	ands	r3, r2
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b80:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <HAL_GPIO_Init+0x2ec>)
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	40da      	lsrs	r2, r3
 8002b94:	1e13      	subs	r3, r2, #0
 8002b96:	d000      	beq.n	8002b9a <HAL_GPIO_Init+0x2ca>
 8002b98:	e6a2      	b.n	80028e0 <HAL_GPIO_Init+0x10>
  } 
}
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	46c0      	nop			@ (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b006      	add	sp, #24
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40010000 	.word	0x40010000
 8002bac:	48000400 	.word	0x48000400
 8002bb0:	48000800 	.word	0x48000800
 8002bb4:	48000c00 	.word	0x48000c00
 8002bb8:	48001000 	.word	0x48001000
 8002bbc:	40010400 	.word	0x40010400

08002bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	000a      	movs	r2, r1
 8002bca:	1cbb      	adds	r3, r7, #2
 8002bcc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	1cba      	adds	r2, r7, #2
 8002bd4:	8812      	ldrh	r2, [r2, #0]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002bda:	230f      	movs	r3, #15
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e003      	b.n	8002bec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002be4:	230f      	movs	r3, #15
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002bec:	230f      	movs	r3, #15
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	781b      	ldrb	r3, [r3, #0]
  }
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b004      	add	sp, #16
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	0008      	movs	r0, r1
 8002c04:	0011      	movs	r1, r2
 8002c06:	1cbb      	adds	r3, r7, #2
 8002c08:	1c02      	adds	r2, r0, #0
 8002c0a:	801a      	strh	r2, [r3, #0]
 8002c0c:	1c7b      	adds	r3, r7, #1
 8002c0e:	1c0a      	adds	r2, r1, #0
 8002c10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c12:	1c7b      	adds	r3, r7, #1
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c1a:	1cbb      	adds	r3, r7, #2
 8002c1c:	881a      	ldrh	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c22:	e003      	b.n	8002c2c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c24:	1cbb      	adds	r3, r7, #2
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c2c:	46c0      	nop			@ (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b002      	add	sp, #8
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f000 fb76 	bl	8003334 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d100      	bne.n	8002c54 <HAL_RCC_OscConfig+0x20>
 8002c52:	e08e      	b.n	8002d72 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c54:	4bc5      	ldr	r3, [pc, #788]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	220c      	movs	r2, #12
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d00e      	beq.n	8002c7e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c60:	4bc2      	ldr	r3, [pc, #776]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	220c      	movs	r2, #12
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d117      	bne.n	8002c9c <HAL_RCC_OscConfig+0x68>
 8002c6c:	4bbf      	ldr	r3, [pc, #764]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	23c0      	movs	r3, #192	@ 0xc0
 8002c72:	025b      	lsls	r3, r3, #9
 8002c74:	401a      	ands	r2, r3
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	025b      	lsls	r3, r3, #9
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d10e      	bne.n	8002c9c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7e:	4bbb      	ldr	r3, [pc, #748]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	029b      	lsls	r3, r3, #10
 8002c86:	4013      	ands	r3, r2
 8002c88:	d100      	bne.n	8002c8c <HAL_RCC_OscConfig+0x58>
 8002c8a:	e071      	b.n	8002d70 <HAL_RCC_OscConfig+0x13c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d000      	beq.n	8002c96 <HAL_RCC_OscConfig+0x62>
 8002c94:	e06c      	b.n	8002d70 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f000 fb4c 	bl	8003334 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x80>
 8002ca4:	4bb1      	ldr	r3, [pc, #708]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4bb0      	ldr	r3, [pc, #704]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002caa:	2180      	movs	r1, #128	@ 0x80
 8002cac:	0249      	lsls	r1, r1, #9
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	e02f      	b.n	8002d14 <HAL_RCC_OscConfig+0xe0>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10c      	bne.n	8002cd6 <HAL_RCC_OscConfig+0xa2>
 8002cbc:	4bab      	ldr	r3, [pc, #684]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4baa      	ldr	r3, [pc, #680]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cc2:	49ab      	ldr	r1, [pc, #684]	@ (8002f70 <HAL_RCC_OscConfig+0x33c>)
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	4ba8      	ldr	r3, [pc, #672]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4ba7      	ldr	r3, [pc, #668]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cce:	49a9      	ldr	r1, [pc, #676]	@ (8002f74 <HAL_RCC_OscConfig+0x340>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e01e      	b.n	8002d14 <HAL_RCC_OscConfig+0xe0>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d10e      	bne.n	8002cfc <HAL_RCC_OscConfig+0xc8>
 8002cde:	4ba3      	ldr	r3, [pc, #652]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4ba2      	ldr	r3, [pc, #648]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ce4:	2180      	movs	r1, #128	@ 0x80
 8002ce6:	02c9      	lsls	r1, r1, #11
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	4b9f      	ldr	r3, [pc, #636]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b9e      	ldr	r3, [pc, #632]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cf2:	2180      	movs	r1, #128	@ 0x80
 8002cf4:	0249      	lsls	r1, r1, #9
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0xe0>
 8002cfc:	4b9b      	ldr	r3, [pc, #620]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b9a      	ldr	r3, [pc, #616]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d02:	499b      	ldr	r1, [pc, #620]	@ (8002f70 <HAL_RCC_OscConfig+0x33c>)
 8002d04:	400a      	ands	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	4b98      	ldr	r3, [pc, #608]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b97      	ldr	r3, [pc, #604]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d0e:	4999      	ldr	r1, [pc, #612]	@ (8002f74 <HAL_RCC_OscConfig+0x340>)
 8002d10:	400a      	ands	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d014      	beq.n	8002d46 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7ff fccc 	bl	80026b8 <HAL_GetTick>
 8002d20:	0003      	movs	r3, r0
 8002d22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d26:	f7ff fcc7 	bl	80026b8 <HAL_GetTick>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b64      	cmp	r3, #100	@ 0x64
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e2fd      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d38:	4b8c      	ldr	r3, [pc, #560]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2380      	movs	r3, #128	@ 0x80
 8002d3e:	029b      	lsls	r3, r3, #10
 8002d40:	4013      	ands	r3, r2
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0xf2>
 8002d44:	e015      	b.n	8002d72 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7ff fcb7 	bl	80026b8 <HAL_GetTick>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d50:	f7ff fcb2 	bl	80026b8 <HAL_GetTick>
 8002d54:	0002      	movs	r2, r0
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	@ 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e2e8      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	4b82      	ldr	r3, [pc, #520]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	029b      	lsls	r3, r3, #10
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x11c>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2202      	movs	r2, #2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d100      	bne.n	8002d7e <HAL_RCC_OscConfig+0x14a>
 8002d7c:	e06c      	b.n	8002e58 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	220c      	movs	r2, #12
 8002d84:	4013      	ands	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d88:	4b78      	ldr	r3, [pc, #480]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	220c      	movs	r2, #12
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d11f      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1a0>
 8002d94:	4b75      	ldr	r3, [pc, #468]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	23c0      	movs	r3, #192	@ 0xc0
 8002d9a:	025b      	lsls	r3, r3, #9
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d116      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	4b71      	ldr	r3, [pc, #452]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2202      	movs	r2, #2
 8002dac:	4013      	ands	r3, r2
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_OscConfig+0x188>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e2bb      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	22f8      	movs	r2, #248	@ 0xf8
 8002dc2:	4393      	bics	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00da      	lsls	r2, r3, #3
 8002dcc:	4b67      	ldr	r3, [pc, #412]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	e041      	b.n	8002e58 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d024      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	4b63      	ldr	r3, [pc, #396]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b62      	ldr	r3, [pc, #392]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7ff fc66 	bl	80026b8 <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df2:	f7ff fc61 	bl	80026b8 <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e297      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	4b59      	ldr	r3, [pc, #356]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d0f1      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b57      	ldr	r3, [pc, #348]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	22f8      	movs	r2, #248	@ 0xf8
 8002e14:	4393      	bics	r3, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	00da      	lsls	r2, r3, #3
 8002e1e:	4b53      	ldr	r3, [pc, #332]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	e018      	b.n	8002e58 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e26:	4b51      	ldr	r3, [pc, #324]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b50      	ldr	r3, [pc, #320]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	438a      	bics	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7ff fc41 	bl	80026b8 <HAL_GetTick>
 8002e36:	0003      	movs	r3, r0
 8002e38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3c:	f7ff fc3c 	bl	80026b8 <HAL_GetTick>
 8002e40:	0002      	movs	r2, r0
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e272      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4e:	4b47      	ldr	r3, [pc, #284]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2202      	movs	r2, #2
 8002e54:	4013      	ands	r3, r2
 8002e56:	d1f1      	bne.n	8002e3c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d036      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d019      	beq.n	8002e9e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6a:	4b40      	ldr	r3, [pc, #256]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e76:	f7ff fc1f 	bl	80026b8 <HAL_GetTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e80:	f7ff fc1a 	bl	80026b8 <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e250      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	4b36      	ldr	r3, [pc, #216]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	2202      	movs	r2, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d0f1      	beq.n	8002e80 <HAL_RCC_OscConfig+0x24c>
 8002e9c:	e018      	b.n	8002ed0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9e:	4b33      	ldr	r3, [pc, #204]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ea0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea2:	4b32      	ldr	r3, [pc, #200]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	438a      	bics	r2, r1
 8002ea8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7ff fc05 	bl	80026b8 <HAL_GetTick>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb4:	f7ff fc00 	bl	80026b8 <HAL_GetTick>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e236      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec6:	4b29      	ldr	r3, [pc, #164]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d1f1      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d100      	bne.n	8002edc <HAL_RCC_OscConfig+0x2a8>
 8002eda:	e0b5      	b.n	8003048 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002edc:	201f      	movs	r0, #31
 8002ede:	183b      	adds	r3, r7, r0
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee4:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	2380      	movs	r3, #128	@ 0x80
 8002eea:	055b      	lsls	r3, r3, #21
 8002eec:	4013      	ands	r3, r2
 8002eee:	d110      	bne.n	8002f12 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ef6:	2180      	movs	r1, #128	@ 0x80
 8002ef8:	0549      	lsls	r1, r1, #21
 8002efa:	430a      	orrs	r2, r1
 8002efc:	61da      	str	r2, [r3, #28]
 8002efe:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	055b      	lsls	r3, r3, #21
 8002f06:	4013      	ands	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f0c:	183b      	adds	r3, r7, r0
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f12:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <HAL_RCC_OscConfig+0x344>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d11a      	bne.n	8002f54 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1e:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <HAL_RCC_OscConfig+0x344>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b15      	ldr	r3, [pc, #84]	@ (8002f78 <HAL_RCC_OscConfig+0x344>)
 8002f24:	2180      	movs	r1, #128	@ 0x80
 8002f26:	0049      	lsls	r1, r1, #1
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2c:	f7ff fbc4 	bl	80026b8 <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7ff fbbf 	bl	80026b8 <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b64      	cmp	r3, #100	@ 0x64
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1f5      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_RCC_OscConfig+0x344>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	2380      	movs	r3, #128	@ 0x80
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10f      	bne.n	8002f7c <HAL_RCC_OscConfig+0x348>
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	4b02      	ldr	r3, [pc, #8]	@ (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002f62:	2101      	movs	r1, #1
 8002f64:	430a      	orrs	r2, r1
 8002f66:	621a      	str	r2, [r3, #32]
 8002f68:	e036      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3a4>
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	fffeffff 	.word	0xfffeffff
 8002f74:	fffbffff 	.word	0xfffbffff
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x36a>
 8002f84:	4bca      	ldr	r3, [pc, #808]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	4bc9      	ldr	r3, [pc, #804]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	438a      	bics	r2, r1
 8002f8e:	621a      	str	r2, [r3, #32]
 8002f90:	4bc7      	ldr	r3, [pc, #796]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002f92:	6a1a      	ldr	r2, [r3, #32]
 8002f94:	4bc6      	ldr	r3, [pc, #792]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002f96:	2104      	movs	r1, #4
 8002f98:	438a      	bics	r2, r1
 8002f9a:	621a      	str	r2, [r3, #32]
 8002f9c:	e01c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3a4>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x38c>
 8002fa6:	4bc2      	ldr	r3, [pc, #776]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	4bc1      	ldr	r3, [pc, #772]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fac:	2104      	movs	r1, #4
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	621a      	str	r2, [r3, #32]
 8002fb2:	4bbf      	ldr	r3, [pc, #764]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	4bbe      	ldr	r3, [pc, #760]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fb8:	2101      	movs	r1, #1
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	621a      	str	r2, [r3, #32]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3a4>
 8002fc0:	4bbb      	ldr	r3, [pc, #748]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fc2:	6a1a      	ldr	r2, [r3, #32]
 8002fc4:	4bba      	ldr	r3, [pc, #744]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	438a      	bics	r2, r1
 8002fca:	621a      	str	r2, [r3, #32]
 8002fcc:	4bb8      	ldr	r3, [pc, #736]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	4bb7      	ldr	r3, [pc, #732]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fd2:	2104      	movs	r1, #4
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d014      	beq.n	800300a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7ff fb6a 	bl	80026b8 <HAL_GetTick>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	e009      	b.n	8002ffe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7ff fb65 	bl	80026b8 <HAL_GetTick>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	4aaf      	ldr	r2, [pc, #700]	@ (80032b4 <HAL_RCC_OscConfig+0x680>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e19a      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffe:	4bac      	ldr	r3, [pc, #688]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	2202      	movs	r2, #2
 8003004:	4013      	ands	r3, r2
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x3b6>
 8003008:	e013      	b.n	8003032 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7ff fb55 	bl	80026b8 <HAL_GetTick>
 800300e:	0003      	movs	r3, r0
 8003010:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	e009      	b.n	8003028 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7ff fb50 	bl	80026b8 <HAL_GetTick>
 8003018:	0002      	movs	r2, r0
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	4aa5      	ldr	r2, [pc, #660]	@ (80032b4 <HAL_RCC_OscConfig+0x680>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e185      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	4ba1      	ldr	r3, [pc, #644]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	2202      	movs	r2, #2
 800302e:	4013      	ands	r3, r2
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003032:	231f      	movs	r3, #31
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303c:	4b9c      	ldr	r3, [pc, #624]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	4b9b      	ldr	r3, [pc, #620]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003042:	499d      	ldr	r1, [pc, #628]	@ (80032b8 <HAL_RCC_OscConfig+0x684>)
 8003044:	400a      	ands	r2, r1
 8003046:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2210      	movs	r2, #16
 800304e:	4013      	ands	r3, r2
 8003050:	d063      	beq.n	800311a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d12a      	bne.n	80030b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800305a:	4b95      	ldr	r3, [pc, #596]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800305c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305e:	4b94      	ldr	r3, [pc, #592]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003060:	2104      	movs	r1, #4
 8003062:	430a      	orrs	r2, r1
 8003064:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003066:	4b92      	ldr	r3, [pc, #584]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800306a:	4b91      	ldr	r3, [pc, #580]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800306c:	2101      	movs	r1, #1
 800306e:	430a      	orrs	r2, r1
 8003070:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003072:	f7ff fb21 	bl	80026b8 <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800307c:	f7ff fb1c 	bl	80026b8 <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e152      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800308e:	4b88      	ldr	r3, [pc, #544]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003092:	2202      	movs	r2, #2
 8003094:	4013      	ands	r3, r2
 8003096:	d0f1      	beq.n	800307c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003098:	4b85      	ldr	r3, [pc, #532]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800309a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309c:	22f8      	movs	r2, #248	@ 0xf8
 800309e:	4393      	bics	r3, r2
 80030a0:	0019      	movs	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	00da      	lsls	r2, r3, #3
 80030a8:	4b81      	ldr	r3, [pc, #516]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030aa:	430a      	orrs	r2, r1
 80030ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80030ae:	e034      	b.n	800311a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	3305      	adds	r3, #5
 80030b6:	d111      	bne.n	80030dc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80030b8:	4b7d      	ldr	r3, [pc, #500]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030bc:	4b7c      	ldr	r3, [pc, #496]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030be:	2104      	movs	r1, #4
 80030c0:	438a      	bics	r2, r1
 80030c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030c4:	4b7a      	ldr	r3, [pc, #488]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c8:	22f8      	movs	r2, #248	@ 0xf8
 80030ca:	4393      	bics	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	00da      	lsls	r2, r3, #3
 80030d4:	4b76      	ldr	r3, [pc, #472]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030d6:	430a      	orrs	r2, r1
 80030d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80030da:	e01e      	b.n	800311a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80030dc:	4b74      	ldr	r3, [pc, #464]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030e0:	4b73      	ldr	r3, [pc, #460]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030e2:	2104      	movs	r1, #4
 80030e4:	430a      	orrs	r2, r1
 80030e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80030e8:	4b71      	ldr	r3, [pc, #452]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ec:	4b70      	ldr	r3, [pc, #448]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	438a      	bics	r2, r1
 80030f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f4:	f7ff fae0 	bl	80026b8 <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80030fe:	f7ff fadb 	bl	80026b8 <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e111      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003110:	4b67      	ldr	r3, [pc, #412]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003114:	2202      	movs	r2, #2
 8003116:	4013      	ands	r3, r2
 8003118:	d1f1      	bne.n	80030fe <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2220      	movs	r2, #32
 8003120:	4013      	ands	r3, r2
 8003122:	d05c      	beq.n	80031de <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003124:	4b62      	ldr	r3, [pc, #392]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	220c      	movs	r2, #12
 800312a:	4013      	ands	r3, r2
 800312c:	2b0c      	cmp	r3, #12
 800312e:	d00e      	beq.n	800314e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003130:	4b5f      	ldr	r3, [pc, #380]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	220c      	movs	r2, #12
 8003136:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003138:	2b08      	cmp	r3, #8
 800313a:	d114      	bne.n	8003166 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800313c:	4b5c      	ldr	r3, [pc, #368]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	23c0      	movs	r3, #192	@ 0xc0
 8003142:	025b      	lsls	r3, r3, #9
 8003144:	401a      	ands	r2, r3
 8003146:	23c0      	movs	r3, #192	@ 0xc0
 8003148:	025b      	lsls	r3, r3, #9
 800314a:	429a      	cmp	r2, r3
 800314c:	d10b      	bne.n	8003166 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800314e:	4b58      	ldr	r3, [pc, #352]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	029b      	lsls	r3, r3, #10
 8003156:	4013      	ands	r3, r2
 8003158:	d040      	beq.n	80031dc <HAL_RCC_OscConfig+0x5a8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d03c      	beq.n	80031dc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0e6      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01b      	beq.n	80031a6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800316e:	4b50      	ldr	r3, [pc, #320]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003172:	4b4f      	ldr	r3, [pc, #316]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003174:	2180      	movs	r1, #128	@ 0x80
 8003176:	0249      	lsls	r1, r1, #9
 8003178:	430a      	orrs	r2, r1
 800317a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7ff fa9c 	bl	80026b8 <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003186:	f7ff fa97 	bl	80026b8 <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0cd      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003198:	4b45      	ldr	r3, [pc, #276]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800319a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800319c:	2380      	movs	r3, #128	@ 0x80
 800319e:	029b      	lsls	r3, r3, #10
 80031a0:	4013      	ands	r3, r2
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x552>
 80031a4:	e01b      	b.n	80031de <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80031a6:	4b42      	ldr	r3, [pc, #264]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80031a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031aa:	4b41      	ldr	r3, [pc, #260]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80031ac:	4943      	ldr	r1, [pc, #268]	@ (80032bc <HAL_RCC_OscConfig+0x688>)
 80031ae:	400a      	ands	r2, r1
 80031b0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7ff fa81 	bl	80026b8 <HAL_GetTick>
 80031b6:	0003      	movs	r3, r0
 80031b8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031bc:	f7ff fa7c 	bl	80026b8 <HAL_GetTick>
 80031c0:	0002      	movs	r2, r0
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0b2      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80031ce:	4b38      	ldr	r3, [pc, #224]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80031d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031d2:	2380      	movs	r3, #128	@ 0x80
 80031d4:	029b      	lsls	r3, r3, #10
 80031d6:	4013      	ands	r3, r2
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x588>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80031dc:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d100      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5b4>
 80031e6:	e0a4      	b.n	8003332 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e8:	4b31      	ldr	r3, [pc, #196]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	220c      	movs	r2, #12
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d100      	bne.n	80031f6 <HAL_RCC_OscConfig+0x5c2>
 80031f4:	e078      	b.n	80032e8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d14c      	bne.n	8003298 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b2c      	ldr	r3, [pc, #176]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b2b      	ldr	r3, [pc, #172]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003204:	492e      	ldr	r1, [pc, #184]	@ (80032c0 <HAL_RCC_OscConfig+0x68c>)
 8003206:	400a      	ands	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7ff fa55 	bl	80026b8 <HAL_GetTick>
 800320e:	0003      	movs	r3, r0
 8003210:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7ff fa50 	bl	80026b8 <HAL_GetTick>
 8003218:	0002      	movs	r2, r0
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e086      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003226:	4b22      	ldr	r3, [pc, #136]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	049b      	lsls	r3, r3, #18
 800322e:	4013      	ands	r3, r2
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003232:	4b1f      	ldr	r3, [pc, #124]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003236:	220f      	movs	r2, #15
 8003238:	4393      	bics	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003240:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003242:	430a      	orrs	r2, r1
 8003244:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003246:	4b1a      	ldr	r3, [pc, #104]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4a1e      	ldr	r2, [pc, #120]	@ (80032c4 <HAL_RCC_OscConfig+0x690>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	431a      	orrs	r2, r3
 800325a:	4b15      	ldr	r3, [pc, #84]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003260:	4b13      	ldr	r3, [pc, #76]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b12      	ldr	r3, [pc, #72]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003266:	2180      	movs	r1, #128	@ 0x80
 8003268:	0449      	lsls	r1, r1, #17
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7ff fa23 	bl	80026b8 <HAL_GetTick>
 8003272:	0003      	movs	r3, r0
 8003274:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7ff fa1e 	bl	80026b8 <HAL_GetTick>
 800327c:	0002      	movs	r2, r0
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e054      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800328a:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	049b      	lsls	r3, r3, #18
 8003292:	4013      	ands	r3, r2
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x644>
 8003296:	e04c      	b.n	8003332 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800329e:	4908      	ldr	r1, [pc, #32]	@ (80032c0 <HAL_RCC_OscConfig+0x68c>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7ff fa08 	bl	80026b8 <HAL_GetTick>
 80032a8:	0003      	movs	r3, r0
 80032aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ac:	e015      	b.n	80032da <HAL_RCC_OscConfig+0x6a6>
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	40021000 	.word	0x40021000
 80032b4:	00001388 	.word	0x00001388
 80032b8:	efffffff 	.word	0xefffffff
 80032bc:	fffeffff 	.word	0xfffeffff
 80032c0:	feffffff 	.word	0xfeffffff
 80032c4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7ff f9f6 	bl	80026b8 <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e02c      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032da:	4b18      	ldr	r3, [pc, #96]	@ (800333c <HAL_RCC_OscConfig+0x708>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	2380      	movs	r3, #128	@ 0x80
 80032e0:	049b      	lsls	r3, r3, #18
 80032e2:	4013      	ands	r3, r2
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x694>
 80032e6:	e024      	b.n	8003332 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e01f      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80032f4:	4b11      	ldr	r3, [pc, #68]	@ (800333c <HAL_RCC_OscConfig+0x708>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80032fa:	4b10      	ldr	r3, [pc, #64]	@ (800333c <HAL_RCC_OscConfig+0x708>)
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	23c0      	movs	r3, #192	@ 0xc0
 8003304:	025b      	lsls	r3, r3, #9
 8003306:	401a      	ands	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	429a      	cmp	r2, r3
 800330e:	d10e      	bne.n	800332e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	220f      	movs	r2, #15
 8003314:	401a      	ands	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d107      	bne.n	800332e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	23f0      	movs	r3, #240	@ 0xf0
 8003322:	039b      	lsls	r3, r3, #14
 8003324:	401a      	ands	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b008      	add	sp, #32
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000

08003340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0bf      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003354:	4b61      	ldr	r3, [pc, #388]	@ (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2201      	movs	r2, #1
 800335a:	4013      	ands	r3, r2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d911      	bls.n	8003386 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b5e      	ldr	r3, [pc, #376]	@ (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2201      	movs	r2, #1
 8003368:	4393      	bics	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	4b5b      	ldr	r3, [pc, #364]	@ (80034dc <HAL_RCC_ClockConfig+0x19c>)
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003374:	4b59      	ldr	r3, [pc, #356]	@ (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2201      	movs	r2, #1
 800337a:	4013      	ands	r3, r2
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0a6      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2202      	movs	r2, #2
 800338c:	4013      	ands	r3, r2
 800338e:	d015      	beq.n	80033bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2204      	movs	r2, #4
 8003396:	4013      	ands	r3, r2
 8003398:	d006      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800339a:	4b51      	ldr	r3, [pc, #324]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4b50      	ldr	r3, [pc, #320]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80033a0:	21e0      	movs	r1, #224	@ 0xe0
 80033a2:	00c9      	lsls	r1, r1, #3
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b4d      	ldr	r3, [pc, #308]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	22f0      	movs	r2, #240	@ 0xf0
 80033ae:	4393      	bics	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	4b4a      	ldr	r3, [pc, #296]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	d04c      	beq.n	8003460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b44      	ldr	r3, [pc, #272]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	2380      	movs	r3, #128	@ 0x80
 80033d4:	029b      	lsls	r3, r3, #10
 80033d6:	4013      	ands	r3, r2
 80033d8:	d120      	bne.n	800341c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e07a      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b3e      	ldr	r3, [pc, #248]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	049b      	lsls	r3, r3, #18
 80033ee:	4013      	ands	r3, r2
 80033f0:	d114      	bne.n	800341c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e06e      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033fe:	4b38      	ldr	r3, [pc, #224]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 8003400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003402:	2380      	movs	r3, #128	@ 0x80
 8003404:	029b      	lsls	r3, r3, #10
 8003406:	4013      	ands	r3, r2
 8003408:	d108      	bne.n	800341c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e062      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340e:	4b34      	ldr	r3, [pc, #208]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2202      	movs	r2, #2
 8003414:	4013      	ands	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e05b      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341c:	4b30      	ldr	r3, [pc, #192]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2203      	movs	r2, #3
 8003422:	4393      	bics	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4b2d      	ldr	r3, [pc, #180]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003430:	f7ff f942 	bl	80026b8 <HAL_GetTick>
 8003434:	0003      	movs	r3, r0
 8003436:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003438:	e009      	b.n	800344e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343a:	f7ff f93d 	bl	80026b8 <HAL_GetTick>
 800343e:	0002      	movs	r2, r0
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	4a27      	ldr	r2, [pc, #156]	@ (80034e4 <HAL_RCC_ClockConfig+0x1a4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e042      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b24      	ldr	r3, [pc, #144]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	220c      	movs	r2, #12
 8003454:	401a      	ands	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1ec      	bne.n	800343a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003460:	4b1e      	ldr	r3, [pc, #120]	@ (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2201      	movs	r2, #1
 8003466:	4013      	ands	r3, r2
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d211      	bcs.n	8003492 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	4393      	bics	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	4b18      	ldr	r3, [pc, #96]	@ (80034dc <HAL_RCC_ClockConfig+0x19c>)
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003480:	4b16      	ldr	r3, [pc, #88]	@ (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2201      	movs	r2, #1
 8003486:	4013      	ands	r3, r2
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e020      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2204      	movs	r2, #4
 8003498:	4013      	ands	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800349c:	4b10      	ldr	r3, [pc, #64]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a11      	ldr	r2, [pc, #68]	@ (80034e8 <HAL_RCC_ClockConfig+0x1a8>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	4b0d      	ldr	r3, [pc, #52]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034b0:	f000 f820 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034b4:	0001      	movs	r1, r0
 80034b6:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	220f      	movs	r2, #15
 80034be:	4013      	ands	r3, r2
 80034c0:	4a0a      	ldr	r2, [pc, #40]	@ (80034ec <HAL_RCC_ClockConfig+0x1ac>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	000a      	movs	r2, r1
 80034c6:	40da      	lsrs	r2, r3
 80034c8:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <HAL_RCC_ClockConfig+0x1b0>)
 80034ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7ff f8ad 	bl	800262c <HAL_InitTick>
  
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40022000 	.word	0x40022000
 80034e0:	40021000 	.word	0x40021000
 80034e4:	00001388 	.word	0x00001388
 80034e8:	fffff8ff 	.word	0xfffff8ff
 80034ec:	08004598 	.word	0x08004598
 80034f0:	20000000 	.word	0x20000000

080034f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800350e:	4b2d      	ldr	r3, [pc, #180]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	220c      	movs	r2, #12
 8003518:	4013      	ands	r3, r2
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d046      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0xb8>
 800351e:	d848      	bhi.n	80035b2 <HAL_RCC_GetSysClockFreq+0xbe>
 8003520:	2b04      	cmp	r3, #4
 8003522:	d002      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x36>
 8003524:	2b08      	cmp	r3, #8
 8003526:	d003      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x3c>
 8003528:	e043      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800352a:	4b27      	ldr	r3, [pc, #156]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800352c:	613b      	str	r3, [r7, #16]
      break;
 800352e:	e043      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	0c9b      	lsrs	r3, r3, #18
 8003534:	220f      	movs	r2, #15
 8003536:	4013      	ands	r3, r2
 8003538:	4a24      	ldr	r2, [pc, #144]	@ (80035cc <HAL_RCC_GetSysClockFreq+0xd8>)
 800353a:	5cd3      	ldrb	r3, [r2, r3]
 800353c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800353e:	4b21      	ldr	r3, [pc, #132]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	220f      	movs	r2, #15
 8003544:	4013      	ands	r3, r2
 8003546:	4a22      	ldr	r2, [pc, #136]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003548:	5cd3      	ldrb	r3, [r2, r3]
 800354a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	23c0      	movs	r3, #192	@ 0xc0
 8003550:	025b      	lsls	r3, r3, #9
 8003552:	401a      	ands	r2, r3
 8003554:	2380      	movs	r3, #128	@ 0x80
 8003556:	025b      	lsls	r3, r3, #9
 8003558:	429a      	cmp	r2, r3
 800355a:	d109      	bne.n	8003570 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	481a      	ldr	r0, [pc, #104]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003560:	f7fc fdd2 	bl	8000108 <__udivsi3>
 8003564:	0003      	movs	r3, r0
 8003566:	001a      	movs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4353      	muls	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e01a      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	23c0      	movs	r3, #192	@ 0xc0
 8003574:	025b      	lsls	r3, r3, #9
 8003576:	401a      	ands	r2, r3
 8003578:	23c0      	movs	r3, #192	@ 0xc0
 800357a:	025b      	lsls	r3, r3, #9
 800357c:	429a      	cmp	r2, r3
 800357e:	d109      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	4814      	ldr	r0, [pc, #80]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003584:	f7fc fdc0 	bl	8000108 <__udivsi3>
 8003588:	0003      	movs	r3, r0
 800358a:	001a      	movs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4353      	muls	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e008      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	480c      	ldr	r0, [pc, #48]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003598:	f7fc fdb6 	bl	8000108 <__udivsi3>
 800359c:	0003      	movs	r3, r0
 800359e:	001a      	movs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4353      	muls	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	613b      	str	r3, [r7, #16]
      break;
 80035aa:	e005      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80035ac:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80035ae:	613b      	str	r3, [r7, #16]
      break;
 80035b0:	e002      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035b2:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80035b4:	613b      	str	r3, [r7, #16]
      break;
 80035b6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035b8:	693b      	ldr	r3, [r7, #16]
}
 80035ba:	0018      	movs	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	b006      	add	sp, #24
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	40021000 	.word	0x40021000
 80035c8:	007a1200 	.word	0x007a1200
 80035cc:	080045a8 	.word	0x080045a8
 80035d0:	080045b8 	.word	0x080045b8
 80035d4:	02dc6c00 	.word	0x02dc6c00

080035d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e042      	b.n	8003670 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	223d      	movs	r2, #61	@ 0x3d
 80035ee:	5c9b      	ldrb	r3, [r3, r2]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d107      	bne.n	8003606 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	223c      	movs	r2, #60	@ 0x3c
 80035fa:	2100      	movs	r1, #0
 80035fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	0018      	movs	r0, r3
 8003602:	f7fe fef5 	bl	80023f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	223d      	movs	r2, #61	@ 0x3d
 800360a:	2102      	movs	r1, #2
 800360c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	0019      	movs	r1, r3
 8003618:	0010      	movs	r0, r2
 800361a:	f000 fbc9 	bl	8003db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2246      	movs	r2, #70	@ 0x46
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	223e      	movs	r2, #62	@ 0x3e
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	223f      	movs	r2, #63	@ 0x3f
 8003632:	2101      	movs	r1, #1
 8003634:	5499      	strb	r1, [r3, r2]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2240      	movs	r2, #64	@ 0x40
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2241      	movs	r2, #65	@ 0x41
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2242      	movs	r2, #66	@ 0x42
 800364a:	2101      	movs	r1, #1
 800364c:	5499      	strb	r1, [r3, r2]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2243      	movs	r2, #67	@ 0x43
 8003652:	2101      	movs	r1, #1
 8003654:	5499      	strb	r1, [r3, r2]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2244      	movs	r2, #68	@ 0x44
 800365a:	2101      	movs	r1, #1
 800365c:	5499      	strb	r1, [r3, r2]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2245      	movs	r2, #69	@ 0x45
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	223d      	movs	r2, #61	@ 0x3d
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	223d      	movs	r2, #61	@ 0x3d
 8003684:	5c9b      	ldrb	r3, [r3, r2]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d001      	beq.n	8003690 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e033      	b.n	80036f8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	223d      	movs	r2, #61	@ 0x3d
 8003694:	2102      	movs	r1, #2
 8003696:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a18      	ldr	r2, [pc, #96]	@ (8003700 <HAL_TIM_Base_Start+0x88>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00f      	beq.n	80036c2 <HAL_TIM_Base_Start+0x4a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	2380      	movs	r3, #128	@ 0x80
 80036a8:	05db      	lsls	r3, r3, #23
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d009      	beq.n	80036c2 <HAL_TIM_Base_Start+0x4a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a14      	ldr	r2, [pc, #80]	@ (8003704 <HAL_TIM_Base_Start+0x8c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_TIM_Base_Start+0x4a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a12      	ldr	r2, [pc, #72]	@ (8003708 <HAL_TIM_Base_Start+0x90>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d111      	bne.n	80036e6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2207      	movs	r2, #7
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b06      	cmp	r3, #6
 80036d2:	d010      	beq.n	80036f6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2101      	movs	r1, #1
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e4:	e007      	b.n	80036f6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2101      	movs	r1, #1
 80036f2:	430a      	orrs	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	0018      	movs	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b004      	add	sp, #16
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40000400 	.word	0x40000400
 8003708:	40014000 	.word	0x40014000

0800370c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	223d      	movs	r2, #61	@ 0x3d
 8003718:	5c9b      	ldrb	r3, [r3, r2]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d001      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e03b      	b.n	800379c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	223d      	movs	r2, #61	@ 0x3d
 8003728:	2102      	movs	r1, #2
 800372a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2101      	movs	r1, #1
 8003738:	430a      	orrs	r2, r1
 800373a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a18      	ldr	r2, [pc, #96]	@ (80037a4 <HAL_TIM_Base_Start_IT+0x98>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00f      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x5a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	2380      	movs	r3, #128	@ 0x80
 800374c:	05db      	lsls	r3, r3, #23
 800374e:	429a      	cmp	r2, r3
 8003750:	d009      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x5a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a14      	ldr	r2, [pc, #80]	@ (80037a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x5a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a12      	ldr	r2, [pc, #72]	@ (80037ac <HAL_TIM_Base_Start_IT+0xa0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d111      	bne.n	800378a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2207      	movs	r2, #7
 800376e:	4013      	ands	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b06      	cmp	r3, #6
 8003776:	d010      	beq.n	800379a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2101      	movs	r1, #1
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003788:	e007      	b.n	800379a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2101      	movs	r1, #1
 8003796:	430a      	orrs	r2, r1
 8003798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40012c00 	.word	0x40012c00
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40014000 	.word	0x40014000

080037b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e042      	b.n	8003848 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	223d      	movs	r2, #61	@ 0x3d
 80037c6:	5c9b      	ldrb	r3, [r3, r2]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	223c      	movs	r2, #60	@ 0x3c
 80037d2:	2100      	movs	r1, #0
 80037d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 f839 	bl	8003850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	223d      	movs	r2, #61	@ 0x3d
 80037e2:	2102      	movs	r1, #2
 80037e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
 80037ee:	0019      	movs	r1, r3
 80037f0:	0010      	movs	r0, r2
 80037f2:	f000 fadd 	bl	8003db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2246      	movs	r2, #70	@ 0x46
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	223e      	movs	r2, #62	@ 0x3e
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	223f      	movs	r2, #63	@ 0x3f
 800380a:	2101      	movs	r1, #1
 800380c:	5499      	strb	r1, [r3, r2]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2240      	movs	r2, #64	@ 0x40
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2241      	movs	r2, #65	@ 0x41
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2242      	movs	r2, #66	@ 0x42
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2243      	movs	r2, #67	@ 0x43
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2244      	movs	r2, #68	@ 0x44
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2245      	movs	r2, #69	@ 0x45
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	223d      	movs	r2, #61	@ 0x3d
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003858:	46c0      	nop			@ (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2202      	movs	r2, #2
 800387c:	4013      	ands	r3, r2
 800387e:	d021      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2202      	movs	r2, #2
 8003884:	4013      	ands	r3, r2
 8003886:	d01d      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2203      	movs	r2, #3
 800388e:	4252      	negs	r2, r2
 8003890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2203      	movs	r2, #3
 80038a0:	4013      	ands	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	0018      	movs	r0, r3
 80038a8:	f000 fa6a 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 80038ac:	e007      	b.n	80038be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 fa5d 	bl	8003d70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	0018      	movs	r0, r3
 80038ba:	f000 fa69 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2204      	movs	r2, #4
 80038c8:	4013      	ands	r3, r2
 80038ca:	d022      	beq.n	8003912 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2204      	movs	r2, #4
 80038d0:	4013      	ands	r3, r2
 80038d2:	d01e      	beq.n	8003912 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2205      	movs	r2, #5
 80038da:	4252      	negs	r2, r2
 80038dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	23c0      	movs	r3, #192	@ 0xc0
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4013      	ands	r3, r2
 80038f0:	d004      	beq.n	80038fc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 fa43 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 80038fa:	e007      	b.n	800390c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	0018      	movs	r0, r3
 8003900:	f000 fa36 	bl	8003d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0018      	movs	r0, r3
 8003908:	f000 fa42 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2208      	movs	r2, #8
 8003916:	4013      	ands	r3, r2
 8003918:	d021      	beq.n	800395e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2208      	movs	r2, #8
 800391e:	4013      	ands	r3, r2
 8003920:	d01d      	beq.n	800395e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2209      	movs	r2, #9
 8003928:	4252      	negs	r2, r2
 800392a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2204      	movs	r2, #4
 8003930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	2203      	movs	r2, #3
 800393a:	4013      	ands	r3, r2
 800393c:	d004      	beq.n	8003948 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0018      	movs	r0, r3
 8003942:	f000 fa1d 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 8003946:	e007      	b.n	8003958 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	0018      	movs	r0, r3
 800394c:	f000 fa10 	bl	8003d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	0018      	movs	r0, r3
 8003954:	f000 fa1c 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2210      	movs	r2, #16
 8003962:	4013      	ands	r3, r2
 8003964:	d022      	beq.n	80039ac <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2210      	movs	r2, #16
 800396a:	4013      	ands	r3, r2
 800396c:	d01e      	beq.n	80039ac <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2211      	movs	r2, #17
 8003974:	4252      	negs	r2, r2
 8003976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2208      	movs	r2, #8
 800397c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	23c0      	movs	r3, #192	@ 0xc0
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4013      	ands	r3, r2
 800398a:	d004      	beq.n	8003996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	0018      	movs	r0, r3
 8003990:	f000 f9f6 	bl	8003d80 <HAL_TIM_IC_CaptureCallback>
 8003994:	e007      	b.n	80039a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0018      	movs	r0, r3
 800399a:	f000 f9e9 	bl	8003d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f000 f9f5 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2201      	movs	r2, #1
 80039b0:	4013      	ands	r3, r2
 80039b2:	d00c      	beq.n	80039ce <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	4013      	ands	r3, r2
 80039ba:	d008      	beq.n	80039ce <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2202      	movs	r2, #2
 80039c2:	4252      	negs	r2, r2
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7fe fccb 	bl	8002364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2280      	movs	r2, #128	@ 0x80
 80039d2:	4013      	ands	r3, r2
 80039d4:	d00c      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2280      	movs	r2, #128	@ 0x80
 80039da:	4013      	ands	r3, r2
 80039dc:	d008      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2281      	movs	r2, #129	@ 0x81
 80039e4:	4252      	negs	r2, r2
 80039e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 fd6a 	bl	80044c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2240      	movs	r2, #64	@ 0x40
 80039f4:	4013      	ands	r3, r2
 80039f6:	d00c      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2240      	movs	r2, #64	@ 0x40
 80039fc:	4013      	ands	r3, r2
 80039fe:	d008      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2241      	movs	r2, #65	@ 0x41
 8003a06:	4252      	negs	r2, r2
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 f9c7 	bl	8003da0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2220      	movs	r2, #32
 8003a16:	4013      	ands	r3, r2
 8003a18:	d00c      	beq.n	8003a34 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d008      	beq.n	8003a34 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2221      	movs	r2, #33	@ 0x21
 8003a28:	4252      	negs	r2, r2
 8003a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f000 fd40 	bl	80044b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a34:	46c0      	nop			@ (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b004      	add	sp, #16
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2317      	movs	r3, #23
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	223c      	movs	r2, #60	@ 0x3c
 8003a54:	5c9b      	ldrb	r3, [r3, r2]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e0ad      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	223c      	movs	r2, #60	@ 0x3c
 8003a62:	2101      	movs	r1, #1
 8003a64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	d100      	bne.n	8003a6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a6c:	e076      	b.n	8003b5c <HAL_TIM_PWM_ConfigChannel+0x120>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	d900      	bls.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003a74:	e095      	b.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d04e      	beq.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0xde>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d900      	bls.n	8003a84 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003a82:	e08e      	b.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d021      	beq.n	8003ad4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003a90:	e087      	b.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	0011      	movs	r1, r2
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f000 fa16 	bl	8003ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2108      	movs	r1, #8
 8003aac:	430a      	orrs	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2104      	movs	r1, #4
 8003abc:	438a      	bics	r2, r1
 8003abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6999      	ldr	r1, [r3, #24]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	619a      	str	r2, [r3, #24]
      break;
 8003ad2:	e06b      	b.n	8003bac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	0011      	movs	r1, r2
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 fa7d 	bl	8003fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699a      	ldr	r2, [r3, #24]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2180      	movs	r1, #128	@ 0x80
 8003aee:	0109      	lsls	r1, r1, #4
 8003af0:	430a      	orrs	r2, r1
 8003af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4931      	ldr	r1, [pc, #196]	@ (8003bc4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6999      	ldr	r1, [r3, #24]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	021a      	lsls	r2, r3, #8
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	619a      	str	r2, [r3, #24]
      break;
 8003b18:	e048      	b.n	8003bac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	0011      	movs	r1, r2
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 fade 	bl	80040e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2108      	movs	r1, #8
 8003b34:	430a      	orrs	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2104      	movs	r1, #4
 8003b44:	438a      	bics	r2, r1
 8003b46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69d9      	ldr	r1, [r3, #28]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	61da      	str	r2, [r3, #28]
      break;
 8003b5a:	e027      	b.n	8003bac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	0011      	movs	r1, r2
 8003b64:	0018      	movs	r0, r3
 8003b66:	f000 fb43 	bl	80041f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2180      	movs	r1, #128	@ 0x80
 8003b76:	0109      	lsls	r1, r1, #4
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69da      	ldr	r2, [r3, #28]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	490f      	ldr	r1, [pc, #60]	@ (8003bc4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69d9      	ldr	r1, [r3, #28]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	021a      	lsls	r2, r3, #8
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	61da      	str	r2, [r3, #28]
      break;
 8003ba0:	e004      	b.n	8003bac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003ba2:	2317      	movs	r3, #23
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]
      break;
 8003baa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	223c      	movs	r2, #60	@ 0x3c
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5499      	strb	r1, [r3, r2]

  return status;
 8003bb4:	2317      	movs	r3, #23
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	781b      	ldrb	r3, [r3, #0]
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b006      	add	sp, #24
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	fffffbff 	.word	0xfffffbff

08003bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd2:	230f      	movs	r3, #15
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	223c      	movs	r2, #60	@ 0x3c
 8003bde:	5c9b      	ldrb	r3, [r3, r2]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIM_ConfigClockSource+0x20>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0bc      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x19a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	223c      	movs	r2, #60	@ 0x3c
 8003bec:	2101      	movs	r1, #1
 8003bee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	223d      	movs	r2, #61	@ 0x3d
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2277      	movs	r2, #119	@ 0x77
 8003c04:	4393      	bics	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4a58      	ldr	r2, [pc, #352]	@ (8003d6c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2280      	movs	r2, #128	@ 0x80
 8003c1e:	0192      	lsls	r2, r2, #6
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d040      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0xde>
 8003c24:	2280      	movs	r2, #128	@ 0x80
 8003c26:	0192      	lsls	r2, r2, #6
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d900      	bls.n	8003c2e <HAL_TIM_ConfigClockSource+0x66>
 8003c2c:	e088      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c2e:	2280      	movs	r2, #128	@ 0x80
 8003c30:	0152      	lsls	r2, r2, #5
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d100      	bne.n	8003c38 <HAL_TIM_ConfigClockSource+0x70>
 8003c36:	e088      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x182>
 8003c38:	2280      	movs	r2, #128	@ 0x80
 8003c3a:	0152      	lsls	r2, r2, #5
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d900      	bls.n	8003c42 <HAL_TIM_ConfigClockSource+0x7a>
 8003c40:	e07e      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c42:	2b70      	cmp	r3, #112	@ 0x70
 8003c44:	d018      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0xb0>
 8003c46:	d900      	bls.n	8003c4a <HAL_TIM_ConfigClockSource+0x82>
 8003c48:	e07a      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c4a:	2b60      	cmp	r3, #96	@ 0x60
 8003c4c:	d04f      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x126>
 8003c4e:	d900      	bls.n	8003c52 <HAL_TIM_ConfigClockSource+0x8a>
 8003c50:	e076      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c52:	2b50      	cmp	r3, #80	@ 0x50
 8003c54:	d03b      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x106>
 8003c56:	d900      	bls.n	8003c5a <HAL_TIM_ConfigClockSource+0x92>
 8003c58:	e072      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c5a:	2b40      	cmp	r3, #64	@ 0x40
 8003c5c:	d057      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x146>
 8003c5e:	d900      	bls.n	8003c62 <HAL_TIM_ConfigClockSource+0x9a>
 8003c60:	e06e      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c62:	2b30      	cmp	r3, #48	@ 0x30
 8003c64:	d063      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x166>
 8003c66:	d86b      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d060      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x166>
 8003c6c:	d868      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d05d      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x166>
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d05b      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x166>
 8003c76:	e063      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c88:	f000 fb96 	bl	80043b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2277      	movs	r2, #119	@ 0x77
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
      break;
 8003ca4:	e052      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cb6:	f000 fb7f 	bl	80043b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2180      	movs	r1, #128	@ 0x80
 8003cc6:	01c9      	lsls	r1, r1, #7
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
      break;
 8003ccc:	e03e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cda:	001a      	movs	r2, r3
 8003cdc:	f000 faf2 	bl	80042c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2150      	movs	r1, #80	@ 0x50
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 fb4c 	bl	8004384 <TIM_ITRx_SetConfig>
      break;
 8003cec:	e02e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	f000 fb10 	bl	8004320 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2160      	movs	r1, #96	@ 0x60
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 fb3c 	bl	8004384 <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e01e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	f000 fad2 	bl	80042c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2140      	movs	r1, #64	@ 0x40
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 fb2c 	bl	8004384 <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e00e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	0019      	movs	r1, r3
 8003d38:	0010      	movs	r0, r2
 8003d3a:	f000 fb23 	bl	8004384 <TIM_ITRx_SetConfig>
      break;
 8003d3e:	e005      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d40:	230f      	movs	r3, #15
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
      break;
 8003d48:	e000      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d4a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	223d      	movs	r2, #61	@ 0x3d
 8003d50:	2101      	movs	r1, #1
 8003d52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	223c      	movs	r2, #60	@ 0x3c
 8003d58:	2100      	movs	r1, #0
 8003d5a:	5499      	strb	r1, [r3, r2]

  return status;
 8003d5c:	230f      	movs	r3, #15
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	781b      	ldrb	r3, [r3, #0]
}
 8003d62:	0018      	movs	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b004      	add	sp, #16
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	ffff00ff 	.word	0xffff00ff

08003d70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d78:	46c0      	nop			@ (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b002      	add	sp, #8
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d88:	46c0      	nop			@ (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d98:	46c0      	nop			@ (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b002      	add	sp, #8
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003da8:	46c0      	nop			@ (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb0 <TIM_Base_SetConfig+0x100>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d008      	beq.n	8003dda <TIM_Base_SetConfig+0x2a>
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	2380      	movs	r3, #128	@ 0x80
 8003dcc:	05db      	lsls	r3, r3, #23
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d003      	beq.n	8003dda <TIM_Base_SetConfig+0x2a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a37      	ldr	r2, [pc, #220]	@ (8003eb4 <TIM_Base_SetConfig+0x104>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d108      	bne.n	8003dec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2270      	movs	r2, #112	@ 0x70
 8003dde:	4393      	bics	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a30      	ldr	r2, [pc, #192]	@ (8003eb0 <TIM_Base_SetConfig+0x100>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d018      	beq.n	8003e26 <TIM_Base_SetConfig+0x76>
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	2380      	movs	r3, #128	@ 0x80
 8003df8:	05db      	lsls	r3, r3, #23
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d013      	beq.n	8003e26 <TIM_Base_SetConfig+0x76>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb4 <TIM_Base_SetConfig+0x104>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00f      	beq.n	8003e26 <TIM_Base_SetConfig+0x76>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb8 <TIM_Base_SetConfig+0x108>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00b      	beq.n	8003e26 <TIM_Base_SetConfig+0x76>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2a      	ldr	r2, [pc, #168]	@ (8003ebc <TIM_Base_SetConfig+0x10c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <TIM_Base_SetConfig+0x76>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a29      	ldr	r2, [pc, #164]	@ (8003ec0 <TIM_Base_SetConfig+0x110>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_Base_SetConfig+0x76>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a28      	ldr	r2, [pc, #160]	@ (8003ec4 <TIM_Base_SetConfig+0x114>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d108      	bne.n	8003e38 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4a27      	ldr	r2, [pc, #156]	@ (8003ec8 <TIM_Base_SetConfig+0x118>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2280      	movs	r2, #128	@ 0x80
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	001a      	movs	r2, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a13      	ldr	r2, [pc, #76]	@ (8003eb0 <TIM_Base_SetConfig+0x100>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00b      	beq.n	8003e7e <TIM_Base_SetConfig+0xce>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a14      	ldr	r2, [pc, #80]	@ (8003ebc <TIM_Base_SetConfig+0x10c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <TIM_Base_SetConfig+0xce>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a13      	ldr	r2, [pc, #76]	@ (8003ec0 <TIM_Base_SetConfig+0x110>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_Base_SetConfig+0xce>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a12      	ldr	r2, [pc, #72]	@ (8003ec4 <TIM_Base_SetConfig+0x114>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d103      	bne.n	8003e86 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2201      	movs	r2, #1
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d106      	bne.n	8003ea6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4393      	bics	r3, r2
 8003ea0:	001a      	movs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	611a      	str	r2, [r3, #16]
  }
}
 8003ea6:	46c0      	nop			@ (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b004      	add	sp, #16
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40002000 	.word	0x40002000
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40014400 	.word	0x40014400
 8003ec4:	40014800 	.word	0x40014800
 8003ec8:	fffffcff 	.word	0xfffffcff

08003ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	4393      	bics	r3, r2
 8003ee4:	001a      	movs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2270      	movs	r2, #112	@ 0x70
 8003efa:	4393      	bics	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2203      	movs	r2, #3
 8003f02:	4393      	bics	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2202      	movs	r2, #2
 8003f14:	4393      	bics	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a27      	ldr	r2, [pc, #156]	@ (8003fc4 <TIM_OC1_SetConfig+0xf8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_OC1_SetConfig+0x76>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a26      	ldr	r2, [pc, #152]	@ (8003fc8 <TIM_OC1_SetConfig+0xfc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_OC1_SetConfig+0x76>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a25      	ldr	r2, [pc, #148]	@ (8003fcc <TIM_OC1_SetConfig+0x100>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_OC1_SetConfig+0x76>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a24      	ldr	r2, [pc, #144]	@ (8003fd0 <TIM_OC1_SetConfig+0x104>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10c      	bne.n	8003f5c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2208      	movs	r2, #8
 8003f46:	4393      	bics	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2204      	movs	r2, #4
 8003f58:	4393      	bics	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a19      	ldr	r2, [pc, #100]	@ (8003fc4 <TIM_OC1_SetConfig+0xf8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <TIM_OC1_SetConfig+0xb0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <TIM_OC1_SetConfig+0xfc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <TIM_OC1_SetConfig+0xb0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a17      	ldr	r2, [pc, #92]	@ (8003fcc <TIM_OC1_SetConfig+0x100>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_OC1_SetConfig+0xb0>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a16      	ldr	r2, [pc, #88]	@ (8003fd0 <TIM_OC1_SetConfig+0x104>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d111      	bne.n	8003fa0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4a15      	ldr	r2, [pc, #84]	@ (8003fd4 <TIM_OC1_SetConfig+0x108>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <TIM_OC1_SetConfig+0x10c>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b006      	add	sp, #24
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800
 8003fd4:	fffffeff 	.word	0xfffffeff
 8003fd8:	fffffdff 	.word	0xfffffdff

08003fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	4393      	bics	r3, r2
 8003ff4:	001a      	movs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a2e      	ldr	r2, [pc, #184]	@ (80040c4 <TIM_OC2_SetConfig+0xe8>)
 800400a:	4013      	ands	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4a2d      	ldr	r2, [pc, #180]	@ (80040c8 <TIM_OC2_SetConfig+0xec>)
 8004012:	4013      	ands	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2220      	movs	r2, #32
 8004026:	4393      	bics	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a24      	ldr	r2, [pc, #144]	@ (80040cc <TIM_OC2_SetConfig+0xf0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10d      	bne.n	800405a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2280      	movs	r2, #128	@ 0x80
 8004042:	4393      	bics	r3, r2
 8004044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2240      	movs	r2, #64	@ 0x40
 8004056:	4393      	bics	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a1b      	ldr	r2, [pc, #108]	@ (80040cc <TIM_OC2_SetConfig+0xf0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_OC2_SetConfig+0x9e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a1a      	ldr	r2, [pc, #104]	@ (80040d0 <TIM_OC2_SetConfig+0xf4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_OC2_SetConfig+0x9e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a19      	ldr	r2, [pc, #100]	@ (80040d4 <TIM_OC2_SetConfig+0xf8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_OC2_SetConfig+0x9e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a18      	ldr	r2, [pc, #96]	@ (80040d8 <TIM_OC2_SetConfig+0xfc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d113      	bne.n	80040a2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4a17      	ldr	r2, [pc, #92]	@ (80040dc <TIM_OC2_SetConfig+0x100>)
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4a16      	ldr	r2, [pc, #88]	@ (80040e0 <TIM_OC2_SetConfig+0x104>)
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	621a      	str	r2, [r3, #32]
}
 80040bc:	46c0      	nop			@ (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	b006      	add	sp, #24
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	ffff8fff 	.word	0xffff8fff
 80040c8:	fffffcff 	.word	0xfffffcff
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40014000 	.word	0x40014000
 80040d4:	40014400 	.word	0x40014400
 80040d8:	40014800 	.word	0x40014800
 80040dc:	fffffbff 	.word	0xfffffbff
 80040e0:	fffff7ff 	.word	0xfffff7ff

080040e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4a33      	ldr	r2, [pc, #204]	@ (80041c8 <TIM_OC3_SetConfig+0xe4>)
 80040fa:	401a      	ands	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2270      	movs	r2, #112	@ 0x70
 8004110:	4393      	bics	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2203      	movs	r2, #3
 8004118:	4393      	bics	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	4a28      	ldr	r2, [pc, #160]	@ (80041cc <TIM_OC3_SetConfig+0xe8>)
 800412a:	4013      	ands	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a24      	ldr	r2, [pc, #144]	@ (80041d0 <TIM_OC3_SetConfig+0xec>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d10d      	bne.n	800415e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	4a23      	ldr	r2, [pc, #140]	@ (80041d4 <TIM_OC3_SetConfig+0xf0>)
 8004146:	4013      	ands	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	4a1f      	ldr	r2, [pc, #124]	@ (80041d8 <TIM_OC3_SetConfig+0xf4>)
 800415a:	4013      	ands	r3, r2
 800415c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a1b      	ldr	r2, [pc, #108]	@ (80041d0 <TIM_OC3_SetConfig+0xec>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00b      	beq.n	800417e <TIM_OC3_SetConfig+0x9a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a1c      	ldr	r2, [pc, #112]	@ (80041dc <TIM_OC3_SetConfig+0xf8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d007      	beq.n	800417e <TIM_OC3_SetConfig+0x9a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a1b      	ldr	r2, [pc, #108]	@ (80041e0 <TIM_OC3_SetConfig+0xfc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d003      	beq.n	800417e <TIM_OC3_SetConfig+0x9a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a1a      	ldr	r2, [pc, #104]	@ (80041e4 <TIM_OC3_SetConfig+0x100>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d113      	bne.n	80041a6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4a19      	ldr	r2, [pc, #100]	@ (80041e8 <TIM_OC3_SetConfig+0x104>)
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4a18      	ldr	r2, [pc, #96]	@ (80041ec <TIM_OC3_SetConfig+0x108>)
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	46c0      	nop			@ (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b006      	add	sp, #24
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	fffffeff 	.word	0xfffffeff
 80041cc:	fffffdff 	.word	0xfffffdff
 80041d0:	40012c00 	.word	0x40012c00
 80041d4:	fffff7ff 	.word	0xfffff7ff
 80041d8:	fffffbff 	.word	0xfffffbff
 80041dc:	40014000 	.word	0x40014000
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40014800 	.word	0x40014800
 80041e8:	ffffefff 	.word	0xffffefff
 80041ec:	ffffdfff 	.word	0xffffdfff

080041f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	4a26      	ldr	r2, [pc, #152]	@ (80042a0 <TIM_OC4_SetConfig+0xb0>)
 8004206:	401a      	ands	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4a22      	ldr	r2, [pc, #136]	@ (80042a4 <TIM_OC4_SetConfig+0xb4>)
 800421c:	4013      	ands	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4a21      	ldr	r2, [pc, #132]	@ (80042a8 <TIM_OC4_SetConfig+0xb8>)
 8004224:	4013      	ands	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4a1d      	ldr	r2, [pc, #116]	@ (80042ac <TIM_OC4_SetConfig+0xbc>)
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	031b      	lsls	r3, r3, #12
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a19      	ldr	r2, [pc, #100]	@ (80042b0 <TIM_OC4_SetConfig+0xc0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00b      	beq.n	8004268 <TIM_OC4_SetConfig+0x78>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a18      	ldr	r2, [pc, #96]	@ (80042b4 <TIM_OC4_SetConfig+0xc4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d007      	beq.n	8004268 <TIM_OC4_SetConfig+0x78>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a17      	ldr	r2, [pc, #92]	@ (80042b8 <TIM_OC4_SetConfig+0xc8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_OC4_SetConfig+0x78>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a16      	ldr	r2, [pc, #88]	@ (80042bc <TIM_OC4_SetConfig+0xcc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d109      	bne.n	800427c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4a15      	ldr	r2, [pc, #84]	@ (80042c0 <TIM_OC4_SetConfig+0xd0>)
 800426c:	4013      	ands	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	019b      	lsls	r3, r3, #6
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	46bd      	mov	sp, r7
 800429a:	b006      	add	sp, #24
 800429c:	bd80      	pop	{r7, pc}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	ffffefff 	.word	0xffffefff
 80042a4:	ffff8fff 	.word	0xffff8fff
 80042a8:	fffffcff 	.word	0xfffffcff
 80042ac:	ffffdfff 	.word	0xffffdfff
 80042b0:	40012c00 	.word	0x40012c00
 80042b4:	40014000 	.word	0x40014000
 80042b8:	40014400 	.word	0x40014400
 80042bc:	40014800 	.word	0x40014800
 80042c0:	ffffbfff 	.word	0xffffbfff

080042c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	2201      	movs	r2, #1
 80042dc:	4393      	bics	r3, r2
 80042de:	001a      	movs	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	22f0      	movs	r2, #240	@ 0xf0
 80042ee:	4393      	bics	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	220a      	movs	r2, #10
 8004300:	4393      	bics	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	621a      	str	r2, [r3, #32]
}
 8004318:	46c0      	nop			@ (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b006      	add	sp, #24
 800431e:	bd80      	pop	{r7, pc}

08004320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	2210      	movs	r2, #16
 8004338:	4393      	bics	r3, r2
 800433a:	001a      	movs	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4a0d      	ldr	r2, [pc, #52]	@ (8004380 <TIM_TI2_ConfigInputStage+0x60>)
 800434a:	4013      	ands	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	031b      	lsls	r3, r3, #12
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	22a0      	movs	r2, #160	@ 0xa0
 800435c:	4393      	bics	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	621a      	str	r2, [r3, #32]
}
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	46bd      	mov	sp, r7
 800437a:	b006      	add	sp, #24
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	ffff0fff 	.word	0xffff0fff

08004384 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2270      	movs	r2, #112	@ 0x70
 8004398:	4393      	bics	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	2207      	movs	r2, #7
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	609a      	str	r2, [r3, #8]
}
 80043ae:	46c0      	nop			@ (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b004      	add	sp, #16
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	4a09      	ldr	r2, [pc, #36]	@ (80043f4 <TIM_ETR_SetConfig+0x3c>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	021a      	lsls	r2, r3, #8
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	431a      	orrs	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4313      	orrs	r3, r2
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	609a      	str	r2, [r3, #8]
}
 80043ec:	46c0      	nop			@ (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b006      	add	sp, #24
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	ffff00ff 	.word	0xffff00ff

080043f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	223c      	movs	r2, #60	@ 0x3c
 8004406:	5c9b      	ldrb	r3, [r3, r2]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800440c:	2302      	movs	r3, #2
 800440e:	e047      	b.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	223c      	movs	r2, #60	@ 0x3c
 8004414:	2101      	movs	r1, #1
 8004416:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	223d      	movs	r2, #61	@ 0x3d
 800441c:	2102      	movs	r1, #2
 800441e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2270      	movs	r2, #112	@ 0x70
 8004434:	4393      	bics	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a16      	ldr	r2, [pc, #88]	@ (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00f      	beq.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	2380      	movs	r3, #128	@ 0x80
 800445a:	05db      	lsls	r3, r3, #23
 800445c:	429a      	cmp	r2, r3
 800445e:	d009      	beq.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a11      	ldr	r2, [pc, #68]	@ (80044ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a10      	ldr	r2, [pc, #64]	@ (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d10c      	bne.n	800448e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2280      	movs	r2, #128	@ 0x80
 8004478:	4393      	bics	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	4313      	orrs	r3, r2
 8004484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	223d      	movs	r2, #61	@ 0x3d
 8004492:	2101      	movs	r1, #1
 8004494:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	223c      	movs	r2, #60	@ 0x3c
 800449a:	2100      	movs	r1, #0
 800449c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b004      	add	sp, #16
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40014000 	.word	0x40014000

080044b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044bc:	46c0      	nop			@ (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	b002      	add	sp, #8
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044cc:	46c0      	nop			@ (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b002      	add	sp, #8
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <memset>:
 80044d4:	0003      	movs	r3, r0
 80044d6:	1882      	adds	r2, r0, r2
 80044d8:	4293      	cmp	r3, r2
 80044da:	d100      	bne.n	80044de <memset+0xa>
 80044dc:	4770      	bx	lr
 80044de:	7019      	strb	r1, [r3, #0]
 80044e0:	3301      	adds	r3, #1
 80044e2:	e7f9      	b.n	80044d8 <memset+0x4>

080044e4 <__libc_init_array>:
 80044e4:	b570      	push	{r4, r5, r6, lr}
 80044e6:	2600      	movs	r6, #0
 80044e8:	4c0c      	ldr	r4, [pc, #48]	@ (800451c <__libc_init_array+0x38>)
 80044ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004520 <__libc_init_array+0x3c>)
 80044ec:	1b64      	subs	r4, r4, r5
 80044ee:	10a4      	asrs	r4, r4, #2
 80044f0:	42a6      	cmp	r6, r4
 80044f2:	d109      	bne.n	8004508 <__libc_init_array+0x24>
 80044f4:	2600      	movs	r6, #0
 80044f6:	f000 f823 	bl	8004540 <_init>
 80044fa:	4c0a      	ldr	r4, [pc, #40]	@ (8004524 <__libc_init_array+0x40>)
 80044fc:	4d0a      	ldr	r5, [pc, #40]	@ (8004528 <__libc_init_array+0x44>)
 80044fe:	1b64      	subs	r4, r4, r5
 8004500:	10a4      	asrs	r4, r4, #2
 8004502:	42a6      	cmp	r6, r4
 8004504:	d105      	bne.n	8004512 <__libc_init_array+0x2e>
 8004506:	bd70      	pop	{r4, r5, r6, pc}
 8004508:	00b3      	lsls	r3, r6, #2
 800450a:	58eb      	ldr	r3, [r5, r3]
 800450c:	4798      	blx	r3
 800450e:	3601      	adds	r6, #1
 8004510:	e7ee      	b.n	80044f0 <__libc_init_array+0xc>
 8004512:	00b3      	lsls	r3, r6, #2
 8004514:	58eb      	ldr	r3, [r5, r3]
 8004516:	4798      	blx	r3
 8004518:	3601      	adds	r6, #1
 800451a:	e7f2      	b.n	8004502 <__libc_init_array+0x1e>
 800451c:	080045c8 	.word	0x080045c8
 8004520:	080045c8 	.word	0x080045c8
 8004524:	080045cc 	.word	0x080045cc
 8004528:	080045c8 	.word	0x080045c8

0800452c <memcpy>:
 800452c:	2300      	movs	r3, #0
 800452e:	b510      	push	{r4, lr}
 8004530:	429a      	cmp	r2, r3
 8004532:	d100      	bne.n	8004536 <memcpy+0xa>
 8004534:	bd10      	pop	{r4, pc}
 8004536:	5ccc      	ldrb	r4, [r1, r3]
 8004538:	54c4      	strb	r4, [r0, r3]
 800453a:	3301      	adds	r3, #1
 800453c:	e7f8      	b.n	8004530 <memcpy+0x4>
	...

08004540 <_init>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr

0800454c <_fini>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr
