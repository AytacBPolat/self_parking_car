
self_parking_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003d94  08003d94  00004d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e04  08003e04  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e04  08003e04  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e04  08003e04  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e04  08003e04  00004e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e08  08003e08  00004e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e0c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003e18  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003e18  000050c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079e5  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000154d  00000000  00000000  0000ca19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0000df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000701  00000000  00000000  0000e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018555  00000000  00000000  0000ef71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a19a  00000000  00000000  000274c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090449  00000000  00000000  00031660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000c1aa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002254  00000000  00000000  000c1b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c3d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d7c 	.word	0x08003d7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003d7c 	.word	0x08003d7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fc23 	bl	8000a7c <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fb63 	bl	800090c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fc15 	bl	8000a7c <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fc0b 	bl	8000a7c <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fb8d 	bl	8000994 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fb83 	bl	8000994 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_d2uiz>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	2200      	movs	r2, #0
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <__aeabi_d2uiz+0x38>)
 80002a2:	0004      	movs	r4, r0
 80002a4:	000d      	movs	r5, r1
 80002a6:	f7ff ffef 	bl	8000288 <__aeabi_dcmpge>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d104      	bne.n	80002b8 <__aeabi_d2uiz+0x1c>
 80002ae:	0020      	movs	r0, r4
 80002b0:	0029      	movs	r1, r5
 80002b2:	f001 fab9 	bl	8001828 <__aeabi_d2iz>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <__aeabi_d2uiz+0x38>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	0020      	movs	r0, r4
 80002be:	0029      	movs	r1, r5
 80002c0:	f000 ff16 	bl	80010f0 <__aeabi_dsub>
 80002c4:	f001 fab0 	bl	8001828 <__aeabi_d2iz>
 80002c8:	2380      	movs	r3, #128	@ 0x80
 80002ca:	061b      	lsls	r3, r3, #24
 80002cc:	469c      	mov	ip, r3
 80002ce:	4460      	add	r0, ip
 80002d0:	e7f1      	b.n	80002b6 <__aeabi_d2uiz+0x1a>
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	41e00000 	.word	0x41e00000

080002d8 <__aeabi_ddiv>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	46de      	mov	lr, fp
 80002dc:	4645      	mov	r5, r8
 80002de:	4657      	mov	r7, sl
 80002e0:	464e      	mov	r6, r9
 80002e2:	b5e0      	push	{r5, r6, r7, lr}
 80002e4:	b087      	sub	sp, #28
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	030b      	lsls	r3, r1, #12
 80002ec:	0b1b      	lsrs	r3, r3, #12
 80002ee:	469b      	mov	fp, r3
 80002f0:	0fca      	lsrs	r2, r1, #31
 80002f2:	004b      	lsls	r3, r1, #1
 80002f4:	0004      	movs	r4, r0
 80002f6:	4680      	mov	r8, r0
 80002f8:	0d5b      	lsrs	r3, r3, #21
 80002fa:	9202      	str	r2, [sp, #8]
 80002fc:	d100      	bne.n	8000300 <__aeabi_ddiv+0x28>
 80002fe:	e16a      	b.n	80005d6 <__aeabi_ddiv+0x2fe>
 8000300:	4ad4      	ldr	r2, [pc, #848]	@ (8000654 <__aeabi_ddiv+0x37c>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d100      	bne.n	8000308 <__aeabi_ddiv+0x30>
 8000306:	e18c      	b.n	8000622 <__aeabi_ddiv+0x34a>
 8000308:	4659      	mov	r1, fp
 800030a:	0f42      	lsrs	r2, r0, #29
 800030c:	00c9      	lsls	r1, r1, #3
 800030e:	430a      	orrs	r2, r1
 8000310:	2180      	movs	r1, #128	@ 0x80
 8000312:	0409      	lsls	r1, r1, #16
 8000314:	4311      	orrs	r1, r2
 8000316:	00c2      	lsls	r2, r0, #3
 8000318:	4690      	mov	r8, r2
 800031a:	4acf      	ldr	r2, [pc, #828]	@ (8000658 <__aeabi_ddiv+0x380>)
 800031c:	4689      	mov	r9, r1
 800031e:	4692      	mov	sl, r2
 8000320:	449a      	add	sl, r3
 8000322:	2300      	movs	r3, #0
 8000324:	2400      	movs	r4, #0
 8000326:	9303      	str	r3, [sp, #12]
 8000328:	9e00      	ldr	r6, [sp, #0]
 800032a:	9f01      	ldr	r7, [sp, #4]
 800032c:	033b      	lsls	r3, r7, #12
 800032e:	0b1b      	lsrs	r3, r3, #12
 8000330:	469b      	mov	fp, r3
 8000332:	007b      	lsls	r3, r7, #1
 8000334:	0030      	movs	r0, r6
 8000336:	0d5b      	lsrs	r3, r3, #21
 8000338:	0ffd      	lsrs	r5, r7, #31
 800033a:	2b00      	cmp	r3, #0
 800033c:	d100      	bne.n	8000340 <__aeabi_ddiv+0x68>
 800033e:	e128      	b.n	8000592 <__aeabi_ddiv+0x2ba>
 8000340:	4ac4      	ldr	r2, [pc, #784]	@ (8000654 <__aeabi_ddiv+0x37c>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d100      	bne.n	8000348 <__aeabi_ddiv+0x70>
 8000346:	e177      	b.n	8000638 <__aeabi_ddiv+0x360>
 8000348:	4659      	mov	r1, fp
 800034a:	0f72      	lsrs	r2, r6, #29
 800034c:	00c9      	lsls	r1, r1, #3
 800034e:	430a      	orrs	r2, r1
 8000350:	2180      	movs	r1, #128	@ 0x80
 8000352:	0409      	lsls	r1, r1, #16
 8000354:	4311      	orrs	r1, r2
 8000356:	468b      	mov	fp, r1
 8000358:	49bf      	ldr	r1, [pc, #764]	@ (8000658 <__aeabi_ddiv+0x380>)
 800035a:	00f2      	lsls	r2, r6, #3
 800035c:	468c      	mov	ip, r1
 800035e:	4651      	mov	r1, sl
 8000360:	4463      	add	r3, ip
 8000362:	1acb      	subs	r3, r1, r3
 8000364:	469a      	mov	sl, r3
 8000366:	2300      	movs	r3, #0
 8000368:	9e02      	ldr	r6, [sp, #8]
 800036a:	406e      	eors	r6, r5
 800036c:	2c0f      	cmp	r4, #15
 800036e:	d827      	bhi.n	80003c0 <__aeabi_ddiv+0xe8>
 8000370:	49ba      	ldr	r1, [pc, #744]	@ (800065c <__aeabi_ddiv+0x384>)
 8000372:	00a4      	lsls	r4, r4, #2
 8000374:	5909      	ldr	r1, [r1, r4]
 8000376:	468f      	mov	pc, r1
 8000378:	46cb      	mov	fp, r9
 800037a:	4642      	mov	r2, r8
 800037c:	9e02      	ldr	r6, [sp, #8]
 800037e:	9b03      	ldr	r3, [sp, #12]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d016      	beq.n	80003b2 <__aeabi_ddiv+0xda>
 8000384:	2b03      	cmp	r3, #3
 8000386:	d100      	bne.n	800038a <__aeabi_ddiv+0xb2>
 8000388:	e2a6      	b.n	80008d8 <__aeabi_ddiv+0x600>
 800038a:	2b01      	cmp	r3, #1
 800038c:	d000      	beq.n	8000390 <__aeabi_ddiv+0xb8>
 800038e:	e0df      	b.n	8000550 <__aeabi_ddiv+0x278>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	2400      	movs	r4, #0
 8000396:	4690      	mov	r8, r2
 8000398:	051b      	lsls	r3, r3, #20
 800039a:	4323      	orrs	r3, r4
 800039c:	07f6      	lsls	r6, r6, #31
 800039e:	4333      	orrs	r3, r6
 80003a0:	4640      	mov	r0, r8
 80003a2:	0019      	movs	r1, r3
 80003a4:	b007      	add	sp, #28
 80003a6:	bcf0      	pop	{r4, r5, r6, r7}
 80003a8:	46bb      	mov	fp, r7
 80003aa:	46b2      	mov	sl, r6
 80003ac:	46a9      	mov	r9, r5
 80003ae:	46a0      	mov	r8, r4
 80003b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b2:	2200      	movs	r2, #0
 80003b4:	2400      	movs	r4, #0
 80003b6:	4690      	mov	r8, r2
 80003b8:	4ba6      	ldr	r3, [pc, #664]	@ (8000654 <__aeabi_ddiv+0x37c>)
 80003ba:	e7ed      	b.n	8000398 <__aeabi_ddiv+0xc0>
 80003bc:	002e      	movs	r6, r5
 80003be:	e7df      	b.n	8000380 <__aeabi_ddiv+0xa8>
 80003c0:	45cb      	cmp	fp, r9
 80003c2:	d200      	bcs.n	80003c6 <__aeabi_ddiv+0xee>
 80003c4:	e1d4      	b.n	8000770 <__aeabi_ddiv+0x498>
 80003c6:	d100      	bne.n	80003ca <__aeabi_ddiv+0xf2>
 80003c8:	e1cf      	b.n	800076a <__aeabi_ddiv+0x492>
 80003ca:	2301      	movs	r3, #1
 80003cc:	425b      	negs	r3, r3
 80003ce:	469c      	mov	ip, r3
 80003d0:	4644      	mov	r4, r8
 80003d2:	4648      	mov	r0, r9
 80003d4:	2700      	movs	r7, #0
 80003d6:	44e2      	add	sl, ip
 80003d8:	465b      	mov	r3, fp
 80003da:	0e15      	lsrs	r5, r2, #24
 80003dc:	021b      	lsls	r3, r3, #8
 80003de:	431d      	orrs	r5, r3
 80003e0:	0c19      	lsrs	r1, r3, #16
 80003e2:	042b      	lsls	r3, r5, #16
 80003e4:	0212      	lsls	r2, r2, #8
 80003e6:	9500      	str	r5, [sp, #0]
 80003e8:	0c1d      	lsrs	r5, r3, #16
 80003ea:	4691      	mov	r9, r2
 80003ec:	9102      	str	r1, [sp, #8]
 80003ee:	9503      	str	r5, [sp, #12]
 80003f0:	f7ff ff10 	bl	8000214 <__aeabi_uidivmod>
 80003f4:	0002      	movs	r2, r0
 80003f6:	436a      	muls	r2, r5
 80003f8:	040b      	lsls	r3, r1, #16
 80003fa:	0c21      	lsrs	r1, r4, #16
 80003fc:	4680      	mov	r8, r0
 80003fe:	4319      	orrs	r1, r3
 8000400:	428a      	cmp	r2, r1
 8000402:	d909      	bls.n	8000418 <__aeabi_ddiv+0x140>
 8000404:	9d00      	ldr	r5, [sp, #0]
 8000406:	2301      	movs	r3, #1
 8000408:	46ac      	mov	ip, r5
 800040a:	425b      	negs	r3, r3
 800040c:	4461      	add	r1, ip
 800040e:	469c      	mov	ip, r3
 8000410:	44e0      	add	r8, ip
 8000412:	428d      	cmp	r5, r1
 8000414:	d800      	bhi.n	8000418 <__aeabi_ddiv+0x140>
 8000416:	e1fb      	b.n	8000810 <__aeabi_ddiv+0x538>
 8000418:	1a88      	subs	r0, r1, r2
 800041a:	9902      	ldr	r1, [sp, #8]
 800041c:	f7ff fefa 	bl	8000214 <__aeabi_uidivmod>
 8000420:	9a03      	ldr	r2, [sp, #12]
 8000422:	0424      	lsls	r4, r4, #16
 8000424:	4342      	muls	r2, r0
 8000426:	0409      	lsls	r1, r1, #16
 8000428:	0c24      	lsrs	r4, r4, #16
 800042a:	0003      	movs	r3, r0
 800042c:	430c      	orrs	r4, r1
 800042e:	42a2      	cmp	r2, r4
 8000430:	d906      	bls.n	8000440 <__aeabi_ddiv+0x168>
 8000432:	9900      	ldr	r1, [sp, #0]
 8000434:	3b01      	subs	r3, #1
 8000436:	468c      	mov	ip, r1
 8000438:	4464      	add	r4, ip
 800043a:	42a1      	cmp	r1, r4
 800043c:	d800      	bhi.n	8000440 <__aeabi_ddiv+0x168>
 800043e:	e1e1      	b.n	8000804 <__aeabi_ddiv+0x52c>
 8000440:	1aa0      	subs	r0, r4, r2
 8000442:	4642      	mov	r2, r8
 8000444:	0412      	lsls	r2, r2, #16
 8000446:	431a      	orrs	r2, r3
 8000448:	4693      	mov	fp, r2
 800044a:	464b      	mov	r3, r9
 800044c:	4659      	mov	r1, fp
 800044e:	0c1b      	lsrs	r3, r3, #16
 8000450:	001d      	movs	r5, r3
 8000452:	9304      	str	r3, [sp, #16]
 8000454:	040b      	lsls	r3, r1, #16
 8000456:	4649      	mov	r1, r9
 8000458:	0409      	lsls	r1, r1, #16
 800045a:	0c09      	lsrs	r1, r1, #16
 800045c:	000c      	movs	r4, r1
 800045e:	0c1b      	lsrs	r3, r3, #16
 8000460:	435c      	muls	r4, r3
 8000462:	0c12      	lsrs	r2, r2, #16
 8000464:	436b      	muls	r3, r5
 8000466:	4688      	mov	r8, r1
 8000468:	4351      	muls	r1, r2
 800046a:	436a      	muls	r2, r5
 800046c:	0c25      	lsrs	r5, r4, #16
 800046e:	46ac      	mov	ip, r5
 8000470:	185b      	adds	r3, r3, r1
 8000472:	4463      	add	r3, ip
 8000474:	4299      	cmp	r1, r3
 8000476:	d903      	bls.n	8000480 <__aeabi_ddiv+0x1a8>
 8000478:	2180      	movs	r1, #128	@ 0x80
 800047a:	0249      	lsls	r1, r1, #9
 800047c:	468c      	mov	ip, r1
 800047e:	4462      	add	r2, ip
 8000480:	0c19      	lsrs	r1, r3, #16
 8000482:	0424      	lsls	r4, r4, #16
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	0c24      	lsrs	r4, r4, #16
 8000488:	188a      	adds	r2, r1, r2
 800048a:	191c      	adds	r4, r3, r4
 800048c:	4290      	cmp	r0, r2
 800048e:	d302      	bcc.n	8000496 <__aeabi_ddiv+0x1be>
 8000490:	d116      	bne.n	80004c0 <__aeabi_ddiv+0x1e8>
 8000492:	42a7      	cmp	r7, r4
 8000494:	d214      	bcs.n	80004c0 <__aeabi_ddiv+0x1e8>
 8000496:	465b      	mov	r3, fp
 8000498:	9d00      	ldr	r5, [sp, #0]
 800049a:	3b01      	subs	r3, #1
 800049c:	444f      	add	r7, r9
 800049e:	9305      	str	r3, [sp, #20]
 80004a0:	454f      	cmp	r7, r9
 80004a2:	419b      	sbcs	r3, r3
 80004a4:	46ac      	mov	ip, r5
 80004a6:	425b      	negs	r3, r3
 80004a8:	4463      	add	r3, ip
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	4285      	cmp	r5, r0
 80004ae:	d300      	bcc.n	80004b2 <__aeabi_ddiv+0x1da>
 80004b0:	e1a1      	b.n	80007f6 <__aeabi_ddiv+0x51e>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	d900      	bls.n	80004b8 <__aeabi_ddiv+0x1e0>
 80004b6:	e1f6      	b.n	80008a6 <__aeabi_ddiv+0x5ce>
 80004b8:	d100      	bne.n	80004bc <__aeabi_ddiv+0x1e4>
 80004ba:	e1f1      	b.n	80008a0 <__aeabi_ddiv+0x5c8>
 80004bc:	9b05      	ldr	r3, [sp, #20]
 80004be:	469b      	mov	fp, r3
 80004c0:	1b3c      	subs	r4, r7, r4
 80004c2:	42a7      	cmp	r7, r4
 80004c4:	41bf      	sbcs	r7, r7
 80004c6:	9d00      	ldr	r5, [sp, #0]
 80004c8:	1a80      	subs	r0, r0, r2
 80004ca:	427f      	negs	r7, r7
 80004cc:	1bc0      	subs	r0, r0, r7
 80004ce:	4285      	cmp	r5, r0
 80004d0:	d100      	bne.n	80004d4 <__aeabi_ddiv+0x1fc>
 80004d2:	e1d0      	b.n	8000876 <__aeabi_ddiv+0x59e>
 80004d4:	9902      	ldr	r1, [sp, #8]
 80004d6:	f7ff fe9d 	bl	8000214 <__aeabi_uidivmod>
 80004da:	9a03      	ldr	r2, [sp, #12]
 80004dc:	040b      	lsls	r3, r1, #16
 80004de:	4342      	muls	r2, r0
 80004e0:	0c21      	lsrs	r1, r4, #16
 80004e2:	0007      	movs	r7, r0
 80004e4:	4319      	orrs	r1, r3
 80004e6:	428a      	cmp	r2, r1
 80004e8:	d900      	bls.n	80004ec <__aeabi_ddiv+0x214>
 80004ea:	e178      	b.n	80007de <__aeabi_ddiv+0x506>
 80004ec:	1a88      	subs	r0, r1, r2
 80004ee:	9902      	ldr	r1, [sp, #8]
 80004f0:	f7ff fe90 	bl	8000214 <__aeabi_uidivmod>
 80004f4:	9a03      	ldr	r2, [sp, #12]
 80004f6:	0424      	lsls	r4, r4, #16
 80004f8:	4342      	muls	r2, r0
 80004fa:	0409      	lsls	r1, r1, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	0003      	movs	r3, r0
 8000500:	430c      	orrs	r4, r1
 8000502:	42a2      	cmp	r2, r4
 8000504:	d900      	bls.n	8000508 <__aeabi_ddiv+0x230>
 8000506:	e15d      	b.n	80007c4 <__aeabi_ddiv+0x4ec>
 8000508:	4641      	mov	r1, r8
 800050a:	1aa4      	subs	r4, r4, r2
 800050c:	043a      	lsls	r2, r7, #16
 800050e:	431a      	orrs	r2, r3
 8000510:	9d04      	ldr	r5, [sp, #16]
 8000512:	0413      	lsls	r3, r2, #16
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	4359      	muls	r1, r3
 8000518:	4647      	mov	r7, r8
 800051a:	436b      	muls	r3, r5
 800051c:	469c      	mov	ip, r3
 800051e:	0c10      	lsrs	r0, r2, #16
 8000520:	4347      	muls	r7, r0
 8000522:	0c0b      	lsrs	r3, r1, #16
 8000524:	44bc      	add	ip, r7
 8000526:	4463      	add	r3, ip
 8000528:	4368      	muls	r0, r5
 800052a:	429f      	cmp	r7, r3
 800052c:	d903      	bls.n	8000536 <__aeabi_ddiv+0x25e>
 800052e:	2580      	movs	r5, #128	@ 0x80
 8000530:	026d      	lsls	r5, r5, #9
 8000532:	46ac      	mov	ip, r5
 8000534:	4460      	add	r0, ip
 8000536:	0c1f      	lsrs	r7, r3, #16
 8000538:	0409      	lsls	r1, r1, #16
 800053a:	041b      	lsls	r3, r3, #16
 800053c:	0c09      	lsrs	r1, r1, #16
 800053e:	183f      	adds	r7, r7, r0
 8000540:	185b      	adds	r3, r3, r1
 8000542:	42bc      	cmp	r4, r7
 8000544:	d200      	bcs.n	8000548 <__aeabi_ddiv+0x270>
 8000546:	e102      	b.n	800074e <__aeabi_ddiv+0x476>
 8000548:	d100      	bne.n	800054c <__aeabi_ddiv+0x274>
 800054a:	e0fd      	b.n	8000748 <__aeabi_ddiv+0x470>
 800054c:	2301      	movs	r3, #1
 800054e:	431a      	orrs	r2, r3
 8000550:	4b43      	ldr	r3, [pc, #268]	@ (8000660 <__aeabi_ddiv+0x388>)
 8000552:	4453      	add	r3, sl
 8000554:	2b00      	cmp	r3, #0
 8000556:	dc00      	bgt.n	800055a <__aeabi_ddiv+0x282>
 8000558:	e0ae      	b.n	80006b8 <__aeabi_ddiv+0x3e0>
 800055a:	0751      	lsls	r1, r2, #29
 800055c:	d000      	beq.n	8000560 <__aeabi_ddiv+0x288>
 800055e:	e198      	b.n	8000892 <__aeabi_ddiv+0x5ba>
 8000560:	4659      	mov	r1, fp
 8000562:	01c9      	lsls	r1, r1, #7
 8000564:	d506      	bpl.n	8000574 <__aeabi_ddiv+0x29c>
 8000566:	4659      	mov	r1, fp
 8000568:	4b3e      	ldr	r3, [pc, #248]	@ (8000664 <__aeabi_ddiv+0x38c>)
 800056a:	4019      	ands	r1, r3
 800056c:	2380      	movs	r3, #128	@ 0x80
 800056e:	468b      	mov	fp, r1
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	4453      	add	r3, sl
 8000574:	493c      	ldr	r1, [pc, #240]	@ (8000668 <__aeabi_ddiv+0x390>)
 8000576:	428b      	cmp	r3, r1
 8000578:	dd00      	ble.n	800057c <__aeabi_ddiv+0x2a4>
 800057a:	e71a      	b.n	80003b2 <__aeabi_ddiv+0xda>
 800057c:	4659      	mov	r1, fp
 800057e:	08d2      	lsrs	r2, r2, #3
 8000580:	0749      	lsls	r1, r1, #29
 8000582:	4311      	orrs	r1, r2
 8000584:	465a      	mov	r2, fp
 8000586:	055b      	lsls	r3, r3, #21
 8000588:	0254      	lsls	r4, r2, #9
 800058a:	4688      	mov	r8, r1
 800058c:	0b24      	lsrs	r4, r4, #12
 800058e:	0d5b      	lsrs	r3, r3, #21
 8000590:	e702      	b.n	8000398 <__aeabi_ddiv+0xc0>
 8000592:	465a      	mov	r2, fp
 8000594:	9b00      	ldr	r3, [sp, #0]
 8000596:	431a      	orrs	r2, r3
 8000598:	d100      	bne.n	800059c <__aeabi_ddiv+0x2c4>
 800059a:	e07e      	b.n	800069a <__aeabi_ddiv+0x3c2>
 800059c:	465b      	mov	r3, fp
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_ddiv+0x2cc>
 80005a2:	e100      	b.n	80007a6 <__aeabi_ddiv+0x4ce>
 80005a4:	4658      	mov	r0, fp
 80005a6:	f001 f99f 	bl	80018e8 <__clzsi2>
 80005aa:	0002      	movs	r2, r0
 80005ac:	0003      	movs	r3, r0
 80005ae:	3a0b      	subs	r2, #11
 80005b0:	271d      	movs	r7, #29
 80005b2:	9e00      	ldr	r6, [sp, #0]
 80005b4:	1aba      	subs	r2, r7, r2
 80005b6:	0019      	movs	r1, r3
 80005b8:	4658      	mov	r0, fp
 80005ba:	40d6      	lsrs	r6, r2
 80005bc:	3908      	subs	r1, #8
 80005be:	4088      	lsls	r0, r1
 80005c0:	0032      	movs	r2, r6
 80005c2:	4302      	orrs	r2, r0
 80005c4:	4693      	mov	fp, r2
 80005c6:	9a00      	ldr	r2, [sp, #0]
 80005c8:	408a      	lsls	r2, r1
 80005ca:	4928      	ldr	r1, [pc, #160]	@ (800066c <__aeabi_ddiv+0x394>)
 80005cc:	4453      	add	r3, sl
 80005ce:	468a      	mov	sl, r1
 80005d0:	449a      	add	sl, r3
 80005d2:	2300      	movs	r3, #0
 80005d4:	e6c8      	b.n	8000368 <__aeabi_ddiv+0x90>
 80005d6:	465b      	mov	r3, fp
 80005d8:	4303      	orrs	r3, r0
 80005da:	4699      	mov	r9, r3
 80005dc:	d056      	beq.n	800068c <__aeabi_ddiv+0x3b4>
 80005de:	465b      	mov	r3, fp
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_ddiv+0x30e>
 80005e4:	e0cd      	b.n	8000782 <__aeabi_ddiv+0x4aa>
 80005e6:	4658      	mov	r0, fp
 80005e8:	f001 f97e 	bl	80018e8 <__clzsi2>
 80005ec:	230b      	movs	r3, #11
 80005ee:	425b      	negs	r3, r3
 80005f0:	469c      	mov	ip, r3
 80005f2:	0002      	movs	r2, r0
 80005f4:	4484      	add	ip, r0
 80005f6:	4666      	mov	r6, ip
 80005f8:	231d      	movs	r3, #29
 80005fa:	1b9b      	subs	r3, r3, r6
 80005fc:	0026      	movs	r6, r4
 80005fe:	0011      	movs	r1, r2
 8000600:	4658      	mov	r0, fp
 8000602:	40de      	lsrs	r6, r3
 8000604:	3908      	subs	r1, #8
 8000606:	4088      	lsls	r0, r1
 8000608:	0033      	movs	r3, r6
 800060a:	4303      	orrs	r3, r0
 800060c:	4699      	mov	r9, r3
 800060e:	0023      	movs	r3, r4
 8000610:	408b      	lsls	r3, r1
 8000612:	4698      	mov	r8, r3
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <__aeabi_ddiv+0x398>)
 8000616:	2400      	movs	r4, #0
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	469a      	mov	sl, r3
 800061c:	2300      	movs	r3, #0
 800061e:	9303      	str	r3, [sp, #12]
 8000620:	e682      	b.n	8000328 <__aeabi_ddiv+0x50>
 8000622:	465a      	mov	r2, fp
 8000624:	4302      	orrs	r2, r0
 8000626:	4691      	mov	r9, r2
 8000628:	d12a      	bne.n	8000680 <__aeabi_ddiv+0x3a8>
 800062a:	2200      	movs	r2, #0
 800062c:	469a      	mov	sl, r3
 800062e:	2302      	movs	r3, #2
 8000630:	4690      	mov	r8, r2
 8000632:	2408      	movs	r4, #8
 8000634:	9303      	str	r3, [sp, #12]
 8000636:	e677      	b.n	8000328 <__aeabi_ddiv+0x50>
 8000638:	465a      	mov	r2, fp
 800063a:	9b00      	ldr	r3, [sp, #0]
 800063c:	431a      	orrs	r2, r3
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <__aeabi_ddiv+0x39c>)
 8000640:	469c      	mov	ip, r3
 8000642:	44e2      	add	sl, ip
 8000644:	2a00      	cmp	r2, #0
 8000646:	d117      	bne.n	8000678 <__aeabi_ddiv+0x3a0>
 8000648:	2302      	movs	r3, #2
 800064a:	431c      	orrs	r4, r3
 800064c:	2300      	movs	r3, #0
 800064e:	469b      	mov	fp, r3
 8000650:	3302      	adds	r3, #2
 8000652:	e689      	b.n	8000368 <__aeabi_ddiv+0x90>
 8000654:	000007ff 	.word	0x000007ff
 8000658:	fffffc01 	.word	0xfffffc01
 800065c:	08003d94 	.word	0x08003d94
 8000660:	000003ff 	.word	0x000003ff
 8000664:	feffffff 	.word	0xfeffffff
 8000668:	000007fe 	.word	0x000007fe
 800066c:	000003f3 	.word	0x000003f3
 8000670:	fffffc0d 	.word	0xfffffc0d
 8000674:	fffff801 	.word	0xfffff801
 8000678:	2303      	movs	r3, #3
 800067a:	0032      	movs	r2, r6
 800067c:	431c      	orrs	r4, r3
 800067e:	e673      	b.n	8000368 <__aeabi_ddiv+0x90>
 8000680:	469a      	mov	sl, r3
 8000682:	2303      	movs	r3, #3
 8000684:	46d9      	mov	r9, fp
 8000686:	240c      	movs	r4, #12
 8000688:	9303      	str	r3, [sp, #12]
 800068a:	e64d      	b.n	8000328 <__aeabi_ddiv+0x50>
 800068c:	2300      	movs	r3, #0
 800068e:	4698      	mov	r8, r3
 8000690:	469a      	mov	sl, r3
 8000692:	3301      	adds	r3, #1
 8000694:	2404      	movs	r4, #4
 8000696:	9303      	str	r3, [sp, #12]
 8000698:	e646      	b.n	8000328 <__aeabi_ddiv+0x50>
 800069a:	2301      	movs	r3, #1
 800069c:	431c      	orrs	r4, r3
 800069e:	2300      	movs	r3, #0
 80006a0:	469b      	mov	fp, r3
 80006a2:	3301      	adds	r3, #1
 80006a4:	e660      	b.n	8000368 <__aeabi_ddiv+0x90>
 80006a6:	2300      	movs	r3, #0
 80006a8:	2480      	movs	r4, #128	@ 0x80
 80006aa:	4698      	mov	r8, r3
 80006ac:	2600      	movs	r6, #0
 80006ae:	4b92      	ldr	r3, [pc, #584]	@ (80008f8 <__aeabi_ddiv+0x620>)
 80006b0:	0324      	lsls	r4, r4, #12
 80006b2:	e671      	b.n	8000398 <__aeabi_ddiv+0xc0>
 80006b4:	2201      	movs	r2, #1
 80006b6:	4252      	negs	r2, r2
 80006b8:	2101      	movs	r1, #1
 80006ba:	1ac9      	subs	r1, r1, r3
 80006bc:	2938      	cmp	r1, #56	@ 0x38
 80006be:	dd00      	ble.n	80006c2 <__aeabi_ddiv+0x3ea>
 80006c0:	e666      	b.n	8000390 <__aeabi_ddiv+0xb8>
 80006c2:	291f      	cmp	r1, #31
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_ddiv+0x3f0>
 80006c6:	e0ab      	b.n	8000820 <__aeabi_ddiv+0x548>
 80006c8:	201f      	movs	r0, #31
 80006ca:	4240      	negs	r0, r0
 80006cc:	1ac3      	subs	r3, r0, r3
 80006ce:	4658      	mov	r0, fp
 80006d0:	40d8      	lsrs	r0, r3
 80006d2:	0003      	movs	r3, r0
 80006d4:	2920      	cmp	r1, #32
 80006d6:	d004      	beq.n	80006e2 <__aeabi_ddiv+0x40a>
 80006d8:	4658      	mov	r0, fp
 80006da:	4988      	ldr	r1, [pc, #544]	@ (80008fc <__aeabi_ddiv+0x624>)
 80006dc:	4451      	add	r1, sl
 80006de:	4088      	lsls	r0, r1
 80006e0:	4302      	orrs	r2, r0
 80006e2:	1e51      	subs	r1, r2, #1
 80006e4:	418a      	sbcs	r2, r1
 80006e6:	431a      	orrs	r2, r3
 80006e8:	2307      	movs	r3, #7
 80006ea:	0019      	movs	r1, r3
 80006ec:	2400      	movs	r4, #0
 80006ee:	4011      	ands	r1, r2
 80006f0:	4213      	tst	r3, r2
 80006f2:	d00c      	beq.n	800070e <__aeabi_ddiv+0x436>
 80006f4:	230f      	movs	r3, #15
 80006f6:	4013      	ands	r3, r2
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d100      	bne.n	80006fe <__aeabi_ddiv+0x426>
 80006fc:	e0f9      	b.n	80008f2 <__aeabi_ddiv+0x61a>
 80006fe:	1d11      	adds	r1, r2, #4
 8000700:	4291      	cmp	r1, r2
 8000702:	419b      	sbcs	r3, r3
 8000704:	000a      	movs	r2, r1
 8000706:	425b      	negs	r3, r3
 8000708:	0759      	lsls	r1, r3, #29
 800070a:	025b      	lsls	r3, r3, #9
 800070c:	0b1c      	lsrs	r4, r3, #12
 800070e:	08d2      	lsrs	r2, r2, #3
 8000710:	430a      	orrs	r2, r1
 8000712:	4690      	mov	r8, r2
 8000714:	2300      	movs	r3, #0
 8000716:	e63f      	b.n	8000398 <__aeabi_ddiv+0xc0>
 8000718:	2480      	movs	r4, #128	@ 0x80
 800071a:	464b      	mov	r3, r9
 800071c:	0324      	lsls	r4, r4, #12
 800071e:	4223      	tst	r3, r4
 8000720:	d009      	beq.n	8000736 <__aeabi_ddiv+0x45e>
 8000722:	465b      	mov	r3, fp
 8000724:	4223      	tst	r3, r4
 8000726:	d106      	bne.n	8000736 <__aeabi_ddiv+0x45e>
 8000728:	431c      	orrs	r4, r3
 800072a:	0324      	lsls	r4, r4, #12
 800072c:	002e      	movs	r6, r5
 800072e:	4690      	mov	r8, r2
 8000730:	4b71      	ldr	r3, [pc, #452]	@ (80008f8 <__aeabi_ddiv+0x620>)
 8000732:	0b24      	lsrs	r4, r4, #12
 8000734:	e630      	b.n	8000398 <__aeabi_ddiv+0xc0>
 8000736:	2480      	movs	r4, #128	@ 0x80
 8000738:	464b      	mov	r3, r9
 800073a:	0324      	lsls	r4, r4, #12
 800073c:	431c      	orrs	r4, r3
 800073e:	0324      	lsls	r4, r4, #12
 8000740:	9e02      	ldr	r6, [sp, #8]
 8000742:	4b6d      	ldr	r3, [pc, #436]	@ (80008f8 <__aeabi_ddiv+0x620>)
 8000744:	0b24      	lsrs	r4, r4, #12
 8000746:	e627      	b.n	8000398 <__aeabi_ddiv+0xc0>
 8000748:	2b00      	cmp	r3, #0
 800074a:	d100      	bne.n	800074e <__aeabi_ddiv+0x476>
 800074c:	e700      	b.n	8000550 <__aeabi_ddiv+0x278>
 800074e:	9800      	ldr	r0, [sp, #0]
 8000750:	1e51      	subs	r1, r2, #1
 8000752:	4684      	mov	ip, r0
 8000754:	4464      	add	r4, ip
 8000756:	4284      	cmp	r4, r0
 8000758:	d200      	bcs.n	800075c <__aeabi_ddiv+0x484>
 800075a:	e084      	b.n	8000866 <__aeabi_ddiv+0x58e>
 800075c:	42bc      	cmp	r4, r7
 800075e:	d200      	bcs.n	8000762 <__aeabi_ddiv+0x48a>
 8000760:	e0ae      	b.n	80008c0 <__aeabi_ddiv+0x5e8>
 8000762:	d100      	bne.n	8000766 <__aeabi_ddiv+0x48e>
 8000764:	e0c1      	b.n	80008ea <__aeabi_ddiv+0x612>
 8000766:	000a      	movs	r2, r1
 8000768:	e6f0      	b.n	800054c <__aeabi_ddiv+0x274>
 800076a:	4542      	cmp	r2, r8
 800076c:	d900      	bls.n	8000770 <__aeabi_ddiv+0x498>
 800076e:	e62c      	b.n	80003ca <__aeabi_ddiv+0xf2>
 8000770:	464b      	mov	r3, r9
 8000772:	07dc      	lsls	r4, r3, #31
 8000774:	0858      	lsrs	r0, r3, #1
 8000776:	4643      	mov	r3, r8
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	431c      	orrs	r4, r3
 800077c:	4643      	mov	r3, r8
 800077e:	07df      	lsls	r7, r3, #31
 8000780:	e62a      	b.n	80003d8 <__aeabi_ddiv+0x100>
 8000782:	f001 f8b1 	bl	80018e8 <__clzsi2>
 8000786:	2315      	movs	r3, #21
 8000788:	469c      	mov	ip, r3
 800078a:	4484      	add	ip, r0
 800078c:	0002      	movs	r2, r0
 800078e:	4663      	mov	r3, ip
 8000790:	3220      	adds	r2, #32
 8000792:	2b1c      	cmp	r3, #28
 8000794:	dc00      	bgt.n	8000798 <__aeabi_ddiv+0x4c0>
 8000796:	e72e      	b.n	80005f6 <__aeabi_ddiv+0x31e>
 8000798:	0023      	movs	r3, r4
 800079a:	3808      	subs	r0, #8
 800079c:	4083      	lsls	r3, r0
 800079e:	4699      	mov	r9, r3
 80007a0:	2300      	movs	r3, #0
 80007a2:	4698      	mov	r8, r3
 80007a4:	e736      	b.n	8000614 <__aeabi_ddiv+0x33c>
 80007a6:	f001 f89f 	bl	80018e8 <__clzsi2>
 80007aa:	0002      	movs	r2, r0
 80007ac:	0003      	movs	r3, r0
 80007ae:	3215      	adds	r2, #21
 80007b0:	3320      	adds	r3, #32
 80007b2:	2a1c      	cmp	r2, #28
 80007b4:	dc00      	bgt.n	80007b8 <__aeabi_ddiv+0x4e0>
 80007b6:	e6fb      	b.n	80005b0 <__aeabi_ddiv+0x2d8>
 80007b8:	9900      	ldr	r1, [sp, #0]
 80007ba:	3808      	subs	r0, #8
 80007bc:	4081      	lsls	r1, r0
 80007be:	2200      	movs	r2, #0
 80007c0:	468b      	mov	fp, r1
 80007c2:	e702      	b.n	80005ca <__aeabi_ddiv+0x2f2>
 80007c4:	9900      	ldr	r1, [sp, #0]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	468c      	mov	ip, r1
 80007ca:	4464      	add	r4, ip
 80007cc:	42a1      	cmp	r1, r4
 80007ce:	d900      	bls.n	80007d2 <__aeabi_ddiv+0x4fa>
 80007d0:	e69a      	b.n	8000508 <__aeabi_ddiv+0x230>
 80007d2:	42a2      	cmp	r2, r4
 80007d4:	d800      	bhi.n	80007d8 <__aeabi_ddiv+0x500>
 80007d6:	e697      	b.n	8000508 <__aeabi_ddiv+0x230>
 80007d8:	1e83      	subs	r3, r0, #2
 80007da:	4464      	add	r4, ip
 80007dc:	e694      	b.n	8000508 <__aeabi_ddiv+0x230>
 80007de:	46ac      	mov	ip, r5
 80007e0:	4461      	add	r1, ip
 80007e2:	3f01      	subs	r7, #1
 80007e4:	428d      	cmp	r5, r1
 80007e6:	d900      	bls.n	80007ea <__aeabi_ddiv+0x512>
 80007e8:	e680      	b.n	80004ec <__aeabi_ddiv+0x214>
 80007ea:	428a      	cmp	r2, r1
 80007ec:	d800      	bhi.n	80007f0 <__aeabi_ddiv+0x518>
 80007ee:	e67d      	b.n	80004ec <__aeabi_ddiv+0x214>
 80007f0:	1e87      	subs	r7, r0, #2
 80007f2:	4461      	add	r1, ip
 80007f4:	e67a      	b.n	80004ec <__aeabi_ddiv+0x214>
 80007f6:	4285      	cmp	r5, r0
 80007f8:	d000      	beq.n	80007fc <__aeabi_ddiv+0x524>
 80007fa:	e65f      	b.n	80004bc <__aeabi_ddiv+0x1e4>
 80007fc:	45b9      	cmp	r9, r7
 80007fe:	d900      	bls.n	8000802 <__aeabi_ddiv+0x52a>
 8000800:	e65c      	b.n	80004bc <__aeabi_ddiv+0x1e4>
 8000802:	e656      	b.n	80004b2 <__aeabi_ddiv+0x1da>
 8000804:	42a2      	cmp	r2, r4
 8000806:	d800      	bhi.n	800080a <__aeabi_ddiv+0x532>
 8000808:	e61a      	b.n	8000440 <__aeabi_ddiv+0x168>
 800080a:	1e83      	subs	r3, r0, #2
 800080c:	4464      	add	r4, ip
 800080e:	e617      	b.n	8000440 <__aeabi_ddiv+0x168>
 8000810:	428a      	cmp	r2, r1
 8000812:	d800      	bhi.n	8000816 <__aeabi_ddiv+0x53e>
 8000814:	e600      	b.n	8000418 <__aeabi_ddiv+0x140>
 8000816:	46ac      	mov	ip, r5
 8000818:	1e83      	subs	r3, r0, #2
 800081a:	4698      	mov	r8, r3
 800081c:	4461      	add	r1, ip
 800081e:	e5fb      	b.n	8000418 <__aeabi_ddiv+0x140>
 8000820:	4837      	ldr	r0, [pc, #220]	@ (8000900 <__aeabi_ddiv+0x628>)
 8000822:	0014      	movs	r4, r2
 8000824:	4450      	add	r0, sl
 8000826:	4082      	lsls	r2, r0
 8000828:	465b      	mov	r3, fp
 800082a:	0017      	movs	r7, r2
 800082c:	4083      	lsls	r3, r0
 800082e:	40cc      	lsrs	r4, r1
 8000830:	1e7a      	subs	r2, r7, #1
 8000832:	4197      	sbcs	r7, r2
 8000834:	4323      	orrs	r3, r4
 8000836:	433b      	orrs	r3, r7
 8000838:	001a      	movs	r2, r3
 800083a:	465b      	mov	r3, fp
 800083c:	40cb      	lsrs	r3, r1
 800083e:	0751      	lsls	r1, r2, #29
 8000840:	d009      	beq.n	8000856 <__aeabi_ddiv+0x57e>
 8000842:	210f      	movs	r1, #15
 8000844:	4011      	ands	r1, r2
 8000846:	2904      	cmp	r1, #4
 8000848:	d005      	beq.n	8000856 <__aeabi_ddiv+0x57e>
 800084a:	1d11      	adds	r1, r2, #4
 800084c:	4291      	cmp	r1, r2
 800084e:	4192      	sbcs	r2, r2
 8000850:	4252      	negs	r2, r2
 8000852:	189b      	adds	r3, r3, r2
 8000854:	000a      	movs	r2, r1
 8000856:	0219      	lsls	r1, r3, #8
 8000858:	d400      	bmi.n	800085c <__aeabi_ddiv+0x584>
 800085a:	e755      	b.n	8000708 <__aeabi_ddiv+0x430>
 800085c:	2200      	movs	r2, #0
 800085e:	2301      	movs	r3, #1
 8000860:	2400      	movs	r4, #0
 8000862:	4690      	mov	r8, r2
 8000864:	e598      	b.n	8000398 <__aeabi_ddiv+0xc0>
 8000866:	000a      	movs	r2, r1
 8000868:	42bc      	cmp	r4, r7
 800086a:	d000      	beq.n	800086e <__aeabi_ddiv+0x596>
 800086c:	e66e      	b.n	800054c <__aeabi_ddiv+0x274>
 800086e:	454b      	cmp	r3, r9
 8000870:	d000      	beq.n	8000874 <__aeabi_ddiv+0x59c>
 8000872:	e66b      	b.n	800054c <__aeabi_ddiv+0x274>
 8000874:	e66c      	b.n	8000550 <__aeabi_ddiv+0x278>
 8000876:	4b23      	ldr	r3, [pc, #140]	@ (8000904 <__aeabi_ddiv+0x62c>)
 8000878:	4a23      	ldr	r2, [pc, #140]	@ (8000908 <__aeabi_ddiv+0x630>)
 800087a:	4453      	add	r3, sl
 800087c:	4592      	cmp	sl, r2
 800087e:	da00      	bge.n	8000882 <__aeabi_ddiv+0x5aa>
 8000880:	e718      	b.n	80006b4 <__aeabi_ddiv+0x3dc>
 8000882:	2101      	movs	r1, #1
 8000884:	4249      	negs	r1, r1
 8000886:	1d0a      	adds	r2, r1, #4
 8000888:	428a      	cmp	r2, r1
 800088a:	4189      	sbcs	r1, r1
 800088c:	4249      	negs	r1, r1
 800088e:	448b      	add	fp, r1
 8000890:	e666      	b.n	8000560 <__aeabi_ddiv+0x288>
 8000892:	210f      	movs	r1, #15
 8000894:	4011      	ands	r1, r2
 8000896:	2904      	cmp	r1, #4
 8000898:	d100      	bne.n	800089c <__aeabi_ddiv+0x5c4>
 800089a:	e661      	b.n	8000560 <__aeabi_ddiv+0x288>
 800089c:	0011      	movs	r1, r2
 800089e:	e7f2      	b.n	8000886 <__aeabi_ddiv+0x5ae>
 80008a0:	42bc      	cmp	r4, r7
 80008a2:	d800      	bhi.n	80008a6 <__aeabi_ddiv+0x5ce>
 80008a4:	e60a      	b.n	80004bc <__aeabi_ddiv+0x1e4>
 80008a6:	2302      	movs	r3, #2
 80008a8:	425b      	negs	r3, r3
 80008aa:	469c      	mov	ip, r3
 80008ac:	9900      	ldr	r1, [sp, #0]
 80008ae:	444f      	add	r7, r9
 80008b0:	454f      	cmp	r7, r9
 80008b2:	419b      	sbcs	r3, r3
 80008b4:	44e3      	add	fp, ip
 80008b6:	468c      	mov	ip, r1
 80008b8:	425b      	negs	r3, r3
 80008ba:	4463      	add	r3, ip
 80008bc:	18c0      	adds	r0, r0, r3
 80008be:	e5ff      	b.n	80004c0 <__aeabi_ddiv+0x1e8>
 80008c0:	4649      	mov	r1, r9
 80008c2:	9d00      	ldr	r5, [sp, #0]
 80008c4:	0048      	lsls	r0, r1, #1
 80008c6:	4548      	cmp	r0, r9
 80008c8:	4189      	sbcs	r1, r1
 80008ca:	46ac      	mov	ip, r5
 80008cc:	4249      	negs	r1, r1
 80008ce:	4461      	add	r1, ip
 80008d0:	4681      	mov	r9, r0
 80008d2:	3a02      	subs	r2, #2
 80008d4:	1864      	adds	r4, r4, r1
 80008d6:	e7c7      	b.n	8000868 <__aeabi_ddiv+0x590>
 80008d8:	2480      	movs	r4, #128	@ 0x80
 80008da:	465b      	mov	r3, fp
 80008dc:	0324      	lsls	r4, r4, #12
 80008de:	431c      	orrs	r4, r3
 80008e0:	0324      	lsls	r4, r4, #12
 80008e2:	4690      	mov	r8, r2
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <__aeabi_ddiv+0x620>)
 80008e6:	0b24      	lsrs	r4, r4, #12
 80008e8:	e556      	b.n	8000398 <__aeabi_ddiv+0xc0>
 80008ea:	4599      	cmp	r9, r3
 80008ec:	d3e8      	bcc.n	80008c0 <__aeabi_ddiv+0x5e8>
 80008ee:	000a      	movs	r2, r1
 80008f0:	e7bd      	b.n	800086e <__aeabi_ddiv+0x596>
 80008f2:	2300      	movs	r3, #0
 80008f4:	e708      	b.n	8000708 <__aeabi_ddiv+0x430>
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	000007ff 	.word	0x000007ff
 80008fc:	0000043e 	.word	0x0000043e
 8000900:	0000041e 	.word	0x0000041e
 8000904:	000003ff 	.word	0x000003ff
 8000908:	fffffc02 	.word	0xfffffc02

0800090c <__eqdf2>:
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090e:	4657      	mov	r7, sl
 8000910:	46de      	mov	lr, fp
 8000912:	464e      	mov	r6, r9
 8000914:	4645      	mov	r5, r8
 8000916:	b5e0      	push	{r5, r6, r7, lr}
 8000918:	000d      	movs	r5, r1
 800091a:	0004      	movs	r4, r0
 800091c:	0fe8      	lsrs	r0, r5, #31
 800091e:	4683      	mov	fp, r0
 8000920:	0309      	lsls	r1, r1, #12
 8000922:	0fd8      	lsrs	r0, r3, #31
 8000924:	0b09      	lsrs	r1, r1, #12
 8000926:	4682      	mov	sl, r0
 8000928:	4819      	ldr	r0, [pc, #100]	@ (8000990 <__eqdf2+0x84>)
 800092a:	468c      	mov	ip, r1
 800092c:	031f      	lsls	r7, r3, #12
 800092e:	0069      	lsls	r1, r5, #1
 8000930:	005e      	lsls	r6, r3, #1
 8000932:	0d49      	lsrs	r1, r1, #21
 8000934:	0b3f      	lsrs	r7, r7, #12
 8000936:	0d76      	lsrs	r6, r6, #21
 8000938:	4281      	cmp	r1, r0
 800093a:	d018      	beq.n	800096e <__eqdf2+0x62>
 800093c:	4286      	cmp	r6, r0
 800093e:	d00f      	beq.n	8000960 <__eqdf2+0x54>
 8000940:	2001      	movs	r0, #1
 8000942:	42b1      	cmp	r1, r6
 8000944:	d10d      	bne.n	8000962 <__eqdf2+0x56>
 8000946:	45bc      	cmp	ip, r7
 8000948:	d10b      	bne.n	8000962 <__eqdf2+0x56>
 800094a:	4294      	cmp	r4, r2
 800094c:	d109      	bne.n	8000962 <__eqdf2+0x56>
 800094e:	45d3      	cmp	fp, sl
 8000950:	d01c      	beq.n	800098c <__eqdf2+0x80>
 8000952:	2900      	cmp	r1, #0
 8000954:	d105      	bne.n	8000962 <__eqdf2+0x56>
 8000956:	4660      	mov	r0, ip
 8000958:	4320      	orrs	r0, r4
 800095a:	1e43      	subs	r3, r0, #1
 800095c:	4198      	sbcs	r0, r3
 800095e:	e000      	b.n	8000962 <__eqdf2+0x56>
 8000960:	2001      	movs	r0, #1
 8000962:	bcf0      	pop	{r4, r5, r6, r7}
 8000964:	46bb      	mov	fp, r7
 8000966:	46b2      	mov	sl, r6
 8000968:	46a9      	mov	r9, r5
 800096a:	46a0      	mov	r8, r4
 800096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096e:	2001      	movs	r0, #1
 8000970:	428e      	cmp	r6, r1
 8000972:	d1f6      	bne.n	8000962 <__eqdf2+0x56>
 8000974:	4661      	mov	r1, ip
 8000976:	4339      	orrs	r1, r7
 8000978:	000f      	movs	r7, r1
 800097a:	4317      	orrs	r7, r2
 800097c:	4327      	orrs	r7, r4
 800097e:	d1f0      	bne.n	8000962 <__eqdf2+0x56>
 8000980:	465b      	mov	r3, fp
 8000982:	4652      	mov	r2, sl
 8000984:	1a98      	subs	r0, r3, r2
 8000986:	1e43      	subs	r3, r0, #1
 8000988:	4198      	sbcs	r0, r3
 800098a:	e7ea      	b.n	8000962 <__eqdf2+0x56>
 800098c:	2000      	movs	r0, #0
 800098e:	e7e8      	b.n	8000962 <__eqdf2+0x56>
 8000990:	000007ff 	.word	0x000007ff

08000994 <__gedf2>:
 8000994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000996:	4657      	mov	r7, sl
 8000998:	464e      	mov	r6, r9
 800099a:	4645      	mov	r5, r8
 800099c:	46de      	mov	lr, fp
 800099e:	b5e0      	push	{r5, r6, r7, lr}
 80009a0:	000d      	movs	r5, r1
 80009a2:	030f      	lsls	r7, r1, #12
 80009a4:	0b39      	lsrs	r1, r7, #12
 80009a6:	b083      	sub	sp, #12
 80009a8:	0004      	movs	r4, r0
 80009aa:	4680      	mov	r8, r0
 80009ac:	9101      	str	r1, [sp, #4]
 80009ae:	0058      	lsls	r0, r3, #1
 80009b0:	0fe9      	lsrs	r1, r5, #31
 80009b2:	4f31      	ldr	r7, [pc, #196]	@ (8000a78 <__gedf2+0xe4>)
 80009b4:	0d40      	lsrs	r0, r0, #21
 80009b6:	468c      	mov	ip, r1
 80009b8:	006e      	lsls	r6, r5, #1
 80009ba:	0319      	lsls	r1, r3, #12
 80009bc:	4682      	mov	sl, r0
 80009be:	4691      	mov	r9, r2
 80009c0:	0d76      	lsrs	r6, r6, #21
 80009c2:	0b09      	lsrs	r1, r1, #12
 80009c4:	0fd8      	lsrs	r0, r3, #31
 80009c6:	42be      	cmp	r6, r7
 80009c8:	d01f      	beq.n	8000a0a <__gedf2+0x76>
 80009ca:	45ba      	cmp	sl, r7
 80009cc:	d00f      	beq.n	80009ee <__gedf2+0x5a>
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	d12f      	bne.n	8000a32 <__gedf2+0x9e>
 80009d2:	4655      	mov	r5, sl
 80009d4:	9e01      	ldr	r6, [sp, #4]
 80009d6:	4334      	orrs	r4, r6
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d127      	bne.n	8000a2c <__gedf2+0x98>
 80009dc:	430a      	orrs	r2, r1
 80009de:	d03a      	beq.n	8000a56 <__gedf2+0xc2>
 80009e0:	2c00      	cmp	r4, #0
 80009e2:	d145      	bne.n	8000a70 <__gedf2+0xdc>
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d11a      	bne.n	8000a1e <__gedf2+0x8a>
 80009e8:	2001      	movs	r0, #1
 80009ea:	4240      	negs	r0, r0
 80009ec:	e017      	b.n	8000a1e <__gedf2+0x8a>
 80009ee:	4311      	orrs	r1, r2
 80009f0:	d13b      	bne.n	8000a6a <__gedf2+0xd6>
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	d102      	bne.n	80009fc <__gedf2+0x68>
 80009f6:	9f01      	ldr	r7, [sp, #4]
 80009f8:	4327      	orrs	r7, r4
 80009fa:	d0f3      	beq.n	80009e4 <__gedf2+0x50>
 80009fc:	4584      	cmp	ip, r0
 80009fe:	d109      	bne.n	8000a14 <__gedf2+0x80>
 8000a00:	4663      	mov	r3, ip
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f0      	beq.n	80009e8 <__gedf2+0x54>
 8000a06:	4660      	mov	r0, ip
 8000a08:	e009      	b.n	8000a1e <__gedf2+0x8a>
 8000a0a:	9f01      	ldr	r7, [sp, #4]
 8000a0c:	4327      	orrs	r7, r4
 8000a0e:	d12c      	bne.n	8000a6a <__gedf2+0xd6>
 8000a10:	45b2      	cmp	sl, r6
 8000a12:	d024      	beq.n	8000a5e <__gedf2+0xca>
 8000a14:	4663      	mov	r3, ip
 8000a16:	2002      	movs	r0, #2
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	4018      	ands	r0, r3
 8000a1c:	3801      	subs	r0, #1
 8000a1e:	b003      	add	sp, #12
 8000a20:	bcf0      	pop	{r4, r5, r6, r7}
 8000a22:	46bb      	mov	fp, r7
 8000a24:	46b2      	mov	sl, r6
 8000a26:	46a9      	mov	r9, r5
 8000a28:	46a0      	mov	r8, r4
 8000a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a2c:	2c00      	cmp	r4, #0
 8000a2e:	d0d9      	beq.n	80009e4 <__gedf2+0x50>
 8000a30:	e7e4      	b.n	80009fc <__gedf2+0x68>
 8000a32:	4654      	mov	r4, sl
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d0ed      	beq.n	8000a14 <__gedf2+0x80>
 8000a38:	4584      	cmp	ip, r0
 8000a3a:	d1eb      	bne.n	8000a14 <__gedf2+0x80>
 8000a3c:	4556      	cmp	r6, sl
 8000a3e:	dce9      	bgt.n	8000a14 <__gedf2+0x80>
 8000a40:	dbde      	blt.n	8000a00 <__gedf2+0x6c>
 8000a42:	9b01      	ldr	r3, [sp, #4]
 8000a44:	428b      	cmp	r3, r1
 8000a46:	d8e5      	bhi.n	8000a14 <__gedf2+0x80>
 8000a48:	d1da      	bne.n	8000a00 <__gedf2+0x6c>
 8000a4a:	45c8      	cmp	r8, r9
 8000a4c:	d8e2      	bhi.n	8000a14 <__gedf2+0x80>
 8000a4e:	2000      	movs	r0, #0
 8000a50:	45c8      	cmp	r8, r9
 8000a52:	d2e4      	bcs.n	8000a1e <__gedf2+0x8a>
 8000a54:	e7d4      	b.n	8000a00 <__gedf2+0x6c>
 8000a56:	2000      	movs	r0, #0
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d0e0      	beq.n	8000a1e <__gedf2+0x8a>
 8000a5c:	e7da      	b.n	8000a14 <__gedf2+0x80>
 8000a5e:	4311      	orrs	r1, r2
 8000a60:	d103      	bne.n	8000a6a <__gedf2+0xd6>
 8000a62:	4584      	cmp	ip, r0
 8000a64:	d1d6      	bne.n	8000a14 <__gedf2+0x80>
 8000a66:	2000      	movs	r0, #0
 8000a68:	e7d9      	b.n	8000a1e <__gedf2+0x8a>
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	4240      	negs	r0, r0
 8000a6e:	e7d6      	b.n	8000a1e <__gedf2+0x8a>
 8000a70:	4584      	cmp	ip, r0
 8000a72:	d0e6      	beq.n	8000a42 <__gedf2+0xae>
 8000a74:	e7ce      	b.n	8000a14 <__gedf2+0x80>
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	000007ff 	.word	0x000007ff

08000a7c <__ledf2>:
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	4657      	mov	r7, sl
 8000a80:	464e      	mov	r6, r9
 8000a82:	4645      	mov	r5, r8
 8000a84:	46de      	mov	lr, fp
 8000a86:	b5e0      	push	{r5, r6, r7, lr}
 8000a88:	000d      	movs	r5, r1
 8000a8a:	030f      	lsls	r7, r1, #12
 8000a8c:	0004      	movs	r4, r0
 8000a8e:	4680      	mov	r8, r0
 8000a90:	0fe8      	lsrs	r0, r5, #31
 8000a92:	0b39      	lsrs	r1, r7, #12
 8000a94:	4684      	mov	ip, r0
 8000a96:	b083      	sub	sp, #12
 8000a98:	0058      	lsls	r0, r3, #1
 8000a9a:	4f30      	ldr	r7, [pc, #192]	@ (8000b5c <__ledf2+0xe0>)
 8000a9c:	0d40      	lsrs	r0, r0, #21
 8000a9e:	9101      	str	r1, [sp, #4]
 8000aa0:	031e      	lsls	r6, r3, #12
 8000aa2:	0069      	lsls	r1, r5, #1
 8000aa4:	4682      	mov	sl, r0
 8000aa6:	4691      	mov	r9, r2
 8000aa8:	0d49      	lsrs	r1, r1, #21
 8000aaa:	0b36      	lsrs	r6, r6, #12
 8000aac:	0fd8      	lsrs	r0, r3, #31
 8000aae:	42b9      	cmp	r1, r7
 8000ab0:	d020      	beq.n	8000af4 <__ledf2+0x78>
 8000ab2:	45ba      	cmp	sl, r7
 8000ab4:	d00f      	beq.n	8000ad6 <__ledf2+0x5a>
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	d12b      	bne.n	8000b12 <__ledf2+0x96>
 8000aba:	9901      	ldr	r1, [sp, #4]
 8000abc:	430c      	orrs	r4, r1
 8000abe:	4651      	mov	r1, sl
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	d137      	bne.n	8000b34 <__ledf2+0xb8>
 8000ac4:	4332      	orrs	r2, r6
 8000ac6:	d038      	beq.n	8000b3a <__ledf2+0xbe>
 8000ac8:	2c00      	cmp	r4, #0
 8000aca:	d144      	bne.n	8000b56 <__ledf2+0xda>
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d119      	bne.n	8000b04 <__ledf2+0x88>
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	4240      	negs	r0, r0
 8000ad4:	e016      	b.n	8000b04 <__ledf2+0x88>
 8000ad6:	4316      	orrs	r6, r2
 8000ad8:	d113      	bne.n	8000b02 <__ledf2+0x86>
 8000ada:	2900      	cmp	r1, #0
 8000adc:	d102      	bne.n	8000ae4 <__ledf2+0x68>
 8000ade:	9f01      	ldr	r7, [sp, #4]
 8000ae0:	4327      	orrs	r7, r4
 8000ae2:	d0f3      	beq.n	8000acc <__ledf2+0x50>
 8000ae4:	4584      	cmp	ip, r0
 8000ae6:	d020      	beq.n	8000b2a <__ledf2+0xae>
 8000ae8:	4663      	mov	r3, ip
 8000aea:	2002      	movs	r0, #2
 8000aec:	3b01      	subs	r3, #1
 8000aee:	4018      	ands	r0, r3
 8000af0:	3801      	subs	r0, #1
 8000af2:	e007      	b.n	8000b04 <__ledf2+0x88>
 8000af4:	9f01      	ldr	r7, [sp, #4]
 8000af6:	4327      	orrs	r7, r4
 8000af8:	d103      	bne.n	8000b02 <__ledf2+0x86>
 8000afa:	458a      	cmp	sl, r1
 8000afc:	d1f4      	bne.n	8000ae8 <__ledf2+0x6c>
 8000afe:	4316      	orrs	r6, r2
 8000b00:	d01f      	beq.n	8000b42 <__ledf2+0xc6>
 8000b02:	2002      	movs	r0, #2
 8000b04:	b003      	add	sp, #12
 8000b06:	bcf0      	pop	{r4, r5, r6, r7}
 8000b08:	46bb      	mov	fp, r7
 8000b0a:	46b2      	mov	sl, r6
 8000b0c:	46a9      	mov	r9, r5
 8000b0e:	46a0      	mov	r8, r4
 8000b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b12:	4654      	mov	r4, sl
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d0e7      	beq.n	8000ae8 <__ledf2+0x6c>
 8000b18:	4584      	cmp	ip, r0
 8000b1a:	d1e5      	bne.n	8000ae8 <__ledf2+0x6c>
 8000b1c:	4551      	cmp	r1, sl
 8000b1e:	dce3      	bgt.n	8000ae8 <__ledf2+0x6c>
 8000b20:	db03      	blt.n	8000b2a <__ledf2+0xae>
 8000b22:	9b01      	ldr	r3, [sp, #4]
 8000b24:	42b3      	cmp	r3, r6
 8000b26:	d8df      	bhi.n	8000ae8 <__ledf2+0x6c>
 8000b28:	d00f      	beq.n	8000b4a <__ledf2+0xce>
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d0cf      	beq.n	8000ad0 <__ledf2+0x54>
 8000b30:	4660      	mov	r0, ip
 8000b32:	e7e7      	b.n	8000b04 <__ledf2+0x88>
 8000b34:	2c00      	cmp	r4, #0
 8000b36:	d0c9      	beq.n	8000acc <__ledf2+0x50>
 8000b38:	e7d4      	b.n	8000ae4 <__ledf2+0x68>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d0e1      	beq.n	8000b04 <__ledf2+0x88>
 8000b40:	e7d2      	b.n	8000ae8 <__ledf2+0x6c>
 8000b42:	4584      	cmp	ip, r0
 8000b44:	d1d0      	bne.n	8000ae8 <__ledf2+0x6c>
 8000b46:	2000      	movs	r0, #0
 8000b48:	e7dc      	b.n	8000b04 <__ledf2+0x88>
 8000b4a:	45c8      	cmp	r8, r9
 8000b4c:	d8cc      	bhi.n	8000ae8 <__ledf2+0x6c>
 8000b4e:	2000      	movs	r0, #0
 8000b50:	45c8      	cmp	r8, r9
 8000b52:	d2d7      	bcs.n	8000b04 <__ledf2+0x88>
 8000b54:	e7e9      	b.n	8000b2a <__ledf2+0xae>
 8000b56:	4584      	cmp	ip, r0
 8000b58:	d0e3      	beq.n	8000b22 <__ledf2+0xa6>
 8000b5a:	e7c5      	b.n	8000ae8 <__ledf2+0x6c>
 8000b5c:	000007ff 	.word	0x000007ff

08000b60 <__aeabi_dmul>:
 8000b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b62:	4657      	mov	r7, sl
 8000b64:	46de      	mov	lr, fp
 8000b66:	464e      	mov	r6, r9
 8000b68:	4645      	mov	r5, r8
 8000b6a:	b5e0      	push	{r5, r6, r7, lr}
 8000b6c:	001f      	movs	r7, r3
 8000b6e:	030b      	lsls	r3, r1, #12
 8000b70:	0b1b      	lsrs	r3, r3, #12
 8000b72:	0016      	movs	r6, r2
 8000b74:	469a      	mov	sl, r3
 8000b76:	0fca      	lsrs	r2, r1, #31
 8000b78:	004b      	lsls	r3, r1, #1
 8000b7a:	0004      	movs	r4, r0
 8000b7c:	4693      	mov	fp, r2
 8000b7e:	b087      	sub	sp, #28
 8000b80:	0d5b      	lsrs	r3, r3, #21
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dmul+0x26>
 8000b84:	e0d5      	b.n	8000d32 <__aeabi_dmul+0x1d2>
 8000b86:	4abb      	ldr	r2, [pc, #748]	@ (8000e74 <__aeabi_dmul+0x314>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_dmul+0x2e>
 8000b8c:	e0f8      	b.n	8000d80 <__aeabi_dmul+0x220>
 8000b8e:	4651      	mov	r1, sl
 8000b90:	0f42      	lsrs	r2, r0, #29
 8000b92:	00c9      	lsls	r1, r1, #3
 8000b94:	430a      	orrs	r2, r1
 8000b96:	2180      	movs	r1, #128	@ 0x80
 8000b98:	0409      	lsls	r1, r1, #16
 8000b9a:	4311      	orrs	r1, r2
 8000b9c:	00c2      	lsls	r2, r0, #3
 8000b9e:	4691      	mov	r9, r2
 8000ba0:	4ab5      	ldr	r2, [pc, #724]	@ (8000e78 <__aeabi_dmul+0x318>)
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	189d      	adds	r5, r3, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	4698      	mov	r8, r3
 8000baa:	9302      	str	r3, [sp, #8]
 8000bac:	033c      	lsls	r4, r7, #12
 8000bae:	007b      	lsls	r3, r7, #1
 8000bb0:	0ffa      	lsrs	r2, r7, #31
 8000bb2:	0030      	movs	r0, r6
 8000bb4:	0b24      	lsrs	r4, r4, #12
 8000bb6:	0d5b      	lsrs	r3, r3, #21
 8000bb8:	9200      	str	r2, [sp, #0]
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dmul+0x5e>
 8000bbc:	e096      	b.n	8000cec <__aeabi_dmul+0x18c>
 8000bbe:	4aad      	ldr	r2, [pc, #692]	@ (8000e74 <__aeabi_dmul+0x314>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d031      	beq.n	8000c28 <__aeabi_dmul+0xc8>
 8000bc4:	0f72      	lsrs	r2, r6, #29
 8000bc6:	00e4      	lsls	r4, r4, #3
 8000bc8:	4322      	orrs	r2, r4
 8000bca:	2480      	movs	r4, #128	@ 0x80
 8000bcc:	0424      	lsls	r4, r4, #16
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	4aa9      	ldr	r2, [pc, #676]	@ (8000e78 <__aeabi_dmul+0x318>)
 8000bd2:	00f0      	lsls	r0, r6, #3
 8000bd4:	4694      	mov	ip, r2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	195b      	adds	r3, r3, r5
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	9201      	str	r2, [sp, #4]
 8000bde:	4642      	mov	r2, r8
 8000be0:	2600      	movs	r6, #0
 8000be2:	2a0a      	cmp	r2, #10
 8000be4:	dc42      	bgt.n	8000c6c <__aeabi_dmul+0x10c>
 8000be6:	465a      	mov	r2, fp
 8000be8:	9900      	ldr	r1, [sp, #0]
 8000bea:	404a      	eors	r2, r1
 8000bec:	4693      	mov	fp, r2
 8000bee:	4642      	mov	r2, r8
 8000bf0:	2a02      	cmp	r2, #2
 8000bf2:	dc32      	bgt.n	8000c5a <__aeabi_dmul+0xfa>
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	2a01      	cmp	r2, #1
 8000bf8:	d900      	bls.n	8000bfc <__aeabi_dmul+0x9c>
 8000bfa:	e149      	b.n	8000e90 <__aeabi_dmul+0x330>
 8000bfc:	2e02      	cmp	r6, #2
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dmul+0xa2>
 8000c00:	e0ca      	b.n	8000d98 <__aeabi_dmul+0x238>
 8000c02:	2e01      	cmp	r6, #1
 8000c04:	d13d      	bne.n	8000c82 <__aeabi_dmul+0x122>
 8000c06:	2300      	movs	r3, #0
 8000c08:	2400      	movs	r4, #0
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	0010      	movs	r0, r2
 8000c0e:	465a      	mov	r2, fp
 8000c10:	051b      	lsls	r3, r3, #20
 8000c12:	4323      	orrs	r3, r4
 8000c14:	07d2      	lsls	r2, r2, #31
 8000c16:	4313      	orrs	r3, r2
 8000c18:	0019      	movs	r1, r3
 8000c1a:	b007      	add	sp, #28
 8000c1c:	bcf0      	pop	{r4, r5, r6, r7}
 8000c1e:	46bb      	mov	fp, r7
 8000c20:	46b2      	mov	sl, r6
 8000c22:	46a9      	mov	r9, r5
 8000c24:	46a0      	mov	r8, r4
 8000c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c28:	4b92      	ldr	r3, [pc, #584]	@ (8000e74 <__aeabi_dmul+0x314>)
 8000c2a:	4326      	orrs	r6, r4
 8000c2c:	18eb      	adds	r3, r5, r3
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_dmul+0xd4>
 8000c32:	e0bb      	b.n	8000dac <__aeabi_dmul+0x24c>
 8000c34:	2203      	movs	r2, #3
 8000c36:	4641      	mov	r1, r8
 8000c38:	4311      	orrs	r1, r2
 8000c3a:	465a      	mov	r2, fp
 8000c3c:	4688      	mov	r8, r1
 8000c3e:	9900      	ldr	r1, [sp, #0]
 8000c40:	404a      	eors	r2, r1
 8000c42:	2180      	movs	r1, #128	@ 0x80
 8000c44:	0109      	lsls	r1, r1, #4
 8000c46:	468c      	mov	ip, r1
 8000c48:	0029      	movs	r1, r5
 8000c4a:	4461      	add	r1, ip
 8000c4c:	9101      	str	r1, [sp, #4]
 8000c4e:	4641      	mov	r1, r8
 8000c50:	290a      	cmp	r1, #10
 8000c52:	dd00      	ble.n	8000c56 <__aeabi_dmul+0xf6>
 8000c54:	e233      	b.n	80010be <__aeabi_dmul+0x55e>
 8000c56:	4693      	mov	fp, r2
 8000c58:	2603      	movs	r6, #3
 8000c5a:	4642      	mov	r2, r8
 8000c5c:	2701      	movs	r7, #1
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	21a6      	movs	r1, #166	@ 0xa6
 8000c62:	003a      	movs	r2, r7
 8000c64:	00c9      	lsls	r1, r1, #3
 8000c66:	400a      	ands	r2, r1
 8000c68:	420f      	tst	r7, r1
 8000c6a:	d031      	beq.n	8000cd0 <__aeabi_dmul+0x170>
 8000c6c:	9e02      	ldr	r6, [sp, #8]
 8000c6e:	2e02      	cmp	r6, #2
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dmul+0x114>
 8000c72:	e235      	b.n	80010e0 <__aeabi_dmul+0x580>
 8000c74:	2e03      	cmp	r6, #3
 8000c76:	d100      	bne.n	8000c7a <__aeabi_dmul+0x11a>
 8000c78:	e1d2      	b.n	8001020 <__aeabi_dmul+0x4c0>
 8000c7a:	4654      	mov	r4, sl
 8000c7c:	4648      	mov	r0, r9
 8000c7e:	2e01      	cmp	r6, #1
 8000c80:	d0c1      	beq.n	8000c06 <__aeabi_dmul+0xa6>
 8000c82:	9a01      	ldr	r2, [sp, #4]
 8000c84:	4b7d      	ldr	r3, [pc, #500]	@ (8000e7c <__aeabi_dmul+0x31c>)
 8000c86:	4694      	mov	ip, r2
 8000c88:	4463      	add	r3, ip
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_dmul+0x130>
 8000c8e:	e0c0      	b.n	8000e12 <__aeabi_dmul+0x2b2>
 8000c90:	0742      	lsls	r2, r0, #29
 8000c92:	d009      	beq.n	8000ca8 <__aeabi_dmul+0x148>
 8000c94:	220f      	movs	r2, #15
 8000c96:	4002      	ands	r2, r0
 8000c98:	2a04      	cmp	r2, #4
 8000c9a:	d005      	beq.n	8000ca8 <__aeabi_dmul+0x148>
 8000c9c:	1d02      	adds	r2, r0, #4
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	4180      	sbcs	r0, r0
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	1824      	adds	r4, r4, r0
 8000ca6:	0010      	movs	r0, r2
 8000ca8:	01e2      	lsls	r2, r4, #7
 8000caa:	d506      	bpl.n	8000cba <__aeabi_dmul+0x15a>
 8000cac:	4b74      	ldr	r3, [pc, #464]	@ (8000e80 <__aeabi_dmul+0x320>)
 8000cae:	9a01      	ldr	r2, [sp, #4]
 8000cb0:	401c      	ands	r4, r3
 8000cb2:	2380      	movs	r3, #128	@ 0x80
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	4463      	add	r3, ip
 8000cba:	4a72      	ldr	r2, [pc, #456]	@ (8000e84 <__aeabi_dmul+0x324>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	dc6b      	bgt.n	8000d98 <__aeabi_dmul+0x238>
 8000cc0:	0762      	lsls	r2, r4, #29
 8000cc2:	08c0      	lsrs	r0, r0, #3
 8000cc4:	0264      	lsls	r4, r4, #9
 8000cc6:	055b      	lsls	r3, r3, #21
 8000cc8:	4302      	orrs	r2, r0
 8000cca:	0b24      	lsrs	r4, r4, #12
 8000ccc:	0d5b      	lsrs	r3, r3, #21
 8000cce:	e79d      	b.n	8000c0c <__aeabi_dmul+0xac>
 8000cd0:	2190      	movs	r1, #144	@ 0x90
 8000cd2:	0089      	lsls	r1, r1, #2
 8000cd4:	420f      	tst	r7, r1
 8000cd6:	d163      	bne.n	8000da0 <__aeabi_dmul+0x240>
 8000cd8:	2288      	movs	r2, #136	@ 0x88
 8000cda:	423a      	tst	r2, r7
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dmul+0x180>
 8000cde:	e0d7      	b.n	8000e90 <__aeabi_dmul+0x330>
 8000ce0:	9b00      	ldr	r3, [sp, #0]
 8000ce2:	46a2      	mov	sl, r4
 8000ce4:	469b      	mov	fp, r3
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	9602      	str	r6, [sp, #8]
 8000cea:	e7bf      	b.n	8000c6c <__aeabi_dmul+0x10c>
 8000cec:	0023      	movs	r3, r4
 8000cee:	4333      	orrs	r3, r6
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_dmul+0x194>
 8000cf2:	e07f      	b.n	8000df4 <__aeabi_dmul+0x294>
 8000cf4:	2c00      	cmp	r4, #0
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dmul+0x19a>
 8000cf8:	e1ad      	b.n	8001056 <__aeabi_dmul+0x4f6>
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f000 fdf4 	bl	80018e8 <__clzsi2>
 8000d00:	0002      	movs	r2, r0
 8000d02:	0003      	movs	r3, r0
 8000d04:	3a0b      	subs	r2, #11
 8000d06:	201d      	movs	r0, #29
 8000d08:	0019      	movs	r1, r3
 8000d0a:	1a82      	subs	r2, r0, r2
 8000d0c:	0030      	movs	r0, r6
 8000d0e:	3908      	subs	r1, #8
 8000d10:	40d0      	lsrs	r0, r2
 8000d12:	408c      	lsls	r4, r1
 8000d14:	4304      	orrs	r4, r0
 8000d16:	0030      	movs	r0, r6
 8000d18:	4088      	lsls	r0, r1
 8000d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8000e88 <__aeabi_dmul+0x328>)
 8000d1c:	1aeb      	subs	r3, r5, r3
 8000d1e:	4694      	mov	ip, r2
 8000d20:	4463      	add	r3, ip
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	9201      	str	r2, [sp, #4]
 8000d26:	4642      	mov	r2, r8
 8000d28:	2600      	movs	r6, #0
 8000d2a:	2a0a      	cmp	r2, #10
 8000d2c:	dc00      	bgt.n	8000d30 <__aeabi_dmul+0x1d0>
 8000d2e:	e75a      	b.n	8000be6 <__aeabi_dmul+0x86>
 8000d30:	e79c      	b.n	8000c6c <__aeabi_dmul+0x10c>
 8000d32:	4653      	mov	r3, sl
 8000d34:	4303      	orrs	r3, r0
 8000d36:	4699      	mov	r9, r3
 8000d38:	d054      	beq.n	8000de4 <__aeabi_dmul+0x284>
 8000d3a:	4653      	mov	r3, sl
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_dmul+0x1e2>
 8000d40:	e177      	b.n	8001032 <__aeabi_dmul+0x4d2>
 8000d42:	4650      	mov	r0, sl
 8000d44:	f000 fdd0 	bl	80018e8 <__clzsi2>
 8000d48:	230b      	movs	r3, #11
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	469c      	mov	ip, r3
 8000d4e:	0002      	movs	r2, r0
 8000d50:	4484      	add	ip, r0
 8000d52:	0011      	movs	r1, r2
 8000d54:	4650      	mov	r0, sl
 8000d56:	3908      	subs	r1, #8
 8000d58:	4088      	lsls	r0, r1
 8000d5a:	231d      	movs	r3, #29
 8000d5c:	4680      	mov	r8, r0
 8000d5e:	4660      	mov	r0, ip
 8000d60:	1a1b      	subs	r3, r3, r0
 8000d62:	0020      	movs	r0, r4
 8000d64:	40d8      	lsrs	r0, r3
 8000d66:	0003      	movs	r3, r0
 8000d68:	4640      	mov	r0, r8
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	469a      	mov	sl, r3
 8000d6e:	0023      	movs	r3, r4
 8000d70:	408b      	lsls	r3, r1
 8000d72:	4699      	mov	r9, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	4d44      	ldr	r5, [pc, #272]	@ (8000e88 <__aeabi_dmul+0x328>)
 8000d78:	4698      	mov	r8, r3
 8000d7a:	1aad      	subs	r5, r5, r2
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	e715      	b.n	8000bac <__aeabi_dmul+0x4c>
 8000d80:	4652      	mov	r2, sl
 8000d82:	4302      	orrs	r2, r0
 8000d84:	4691      	mov	r9, r2
 8000d86:	d126      	bne.n	8000dd6 <__aeabi_dmul+0x276>
 8000d88:	2200      	movs	r2, #0
 8000d8a:	001d      	movs	r5, r3
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	4692      	mov	sl, r2
 8000d90:	3208      	adds	r2, #8
 8000d92:	4690      	mov	r8, r2
 8000d94:	9302      	str	r3, [sp, #8]
 8000d96:	e709      	b.n	8000bac <__aeabi_dmul+0x4c>
 8000d98:	2400      	movs	r4, #0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4b35      	ldr	r3, [pc, #212]	@ (8000e74 <__aeabi_dmul+0x314>)
 8000d9e:	e735      	b.n	8000c0c <__aeabi_dmul+0xac>
 8000da0:	2300      	movs	r3, #0
 8000da2:	2480      	movs	r4, #128	@ 0x80
 8000da4:	469b      	mov	fp, r3
 8000da6:	0324      	lsls	r4, r4, #12
 8000da8:	4b32      	ldr	r3, [pc, #200]	@ (8000e74 <__aeabi_dmul+0x314>)
 8000daa:	e72f      	b.n	8000c0c <__aeabi_dmul+0xac>
 8000dac:	2202      	movs	r2, #2
 8000dae:	4641      	mov	r1, r8
 8000db0:	4311      	orrs	r1, r2
 8000db2:	2280      	movs	r2, #128	@ 0x80
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	4694      	mov	ip, r2
 8000db8:	002a      	movs	r2, r5
 8000dba:	4462      	add	r2, ip
 8000dbc:	4688      	mov	r8, r1
 8000dbe:	9201      	str	r2, [sp, #4]
 8000dc0:	290a      	cmp	r1, #10
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_dmul+0x266>
 8000dc4:	e752      	b.n	8000c6c <__aeabi_dmul+0x10c>
 8000dc6:	465a      	mov	r2, fp
 8000dc8:	2000      	movs	r0, #0
 8000dca:	9900      	ldr	r1, [sp, #0]
 8000dcc:	0004      	movs	r4, r0
 8000dce:	404a      	eors	r2, r1
 8000dd0:	4693      	mov	fp, r2
 8000dd2:	2602      	movs	r6, #2
 8000dd4:	e70b      	b.n	8000bee <__aeabi_dmul+0x8e>
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	001d      	movs	r5, r3
 8000dda:	2303      	movs	r3, #3
 8000ddc:	4681      	mov	r9, r0
 8000dde:	4690      	mov	r8, r2
 8000de0:	9302      	str	r3, [sp, #8]
 8000de2:	e6e3      	b.n	8000bac <__aeabi_dmul+0x4c>
 8000de4:	2300      	movs	r3, #0
 8000de6:	469a      	mov	sl, r3
 8000de8:	3304      	adds	r3, #4
 8000dea:	4698      	mov	r8, r3
 8000dec:	3b03      	subs	r3, #3
 8000dee:	2500      	movs	r5, #0
 8000df0:	9302      	str	r3, [sp, #8]
 8000df2:	e6db      	b.n	8000bac <__aeabi_dmul+0x4c>
 8000df4:	4642      	mov	r2, r8
 8000df6:	3301      	adds	r3, #1
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	002b      	movs	r3, r5
 8000dfc:	4690      	mov	r8, r2
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	4642      	mov	r2, r8
 8000e04:	2400      	movs	r4, #0
 8000e06:	2000      	movs	r0, #0
 8000e08:	2601      	movs	r6, #1
 8000e0a:	2a0a      	cmp	r2, #10
 8000e0c:	dc00      	bgt.n	8000e10 <__aeabi_dmul+0x2b0>
 8000e0e:	e6ea      	b.n	8000be6 <__aeabi_dmul+0x86>
 8000e10:	e72c      	b.n	8000c6c <__aeabi_dmul+0x10c>
 8000e12:	2201      	movs	r2, #1
 8000e14:	1ad2      	subs	r2, r2, r3
 8000e16:	2a38      	cmp	r2, #56	@ 0x38
 8000e18:	dd00      	ble.n	8000e1c <__aeabi_dmul+0x2bc>
 8000e1a:	e6f4      	b.n	8000c06 <__aeabi_dmul+0xa6>
 8000e1c:	2a1f      	cmp	r2, #31
 8000e1e:	dc00      	bgt.n	8000e22 <__aeabi_dmul+0x2c2>
 8000e20:	e12a      	b.n	8001078 <__aeabi_dmul+0x518>
 8000e22:	211f      	movs	r1, #31
 8000e24:	4249      	negs	r1, r1
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	0021      	movs	r1, r4
 8000e2a:	40d9      	lsrs	r1, r3
 8000e2c:	000b      	movs	r3, r1
 8000e2e:	2a20      	cmp	r2, #32
 8000e30:	d005      	beq.n	8000e3e <__aeabi_dmul+0x2de>
 8000e32:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <__aeabi_dmul+0x32c>)
 8000e34:	9d01      	ldr	r5, [sp, #4]
 8000e36:	4694      	mov	ip, r2
 8000e38:	4465      	add	r5, ip
 8000e3a:	40ac      	lsls	r4, r5
 8000e3c:	4320      	orrs	r0, r4
 8000e3e:	1e42      	subs	r2, r0, #1
 8000e40:	4190      	sbcs	r0, r2
 8000e42:	4318      	orrs	r0, r3
 8000e44:	2307      	movs	r3, #7
 8000e46:	0019      	movs	r1, r3
 8000e48:	2400      	movs	r4, #0
 8000e4a:	4001      	ands	r1, r0
 8000e4c:	4203      	tst	r3, r0
 8000e4e:	d00c      	beq.n	8000e6a <__aeabi_dmul+0x30a>
 8000e50:	230f      	movs	r3, #15
 8000e52:	4003      	ands	r3, r0
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dmul+0x2fa>
 8000e58:	e140      	b.n	80010dc <__aeabi_dmul+0x57c>
 8000e5a:	1d03      	adds	r3, r0, #4
 8000e5c:	4283      	cmp	r3, r0
 8000e5e:	41a4      	sbcs	r4, r4
 8000e60:	0018      	movs	r0, r3
 8000e62:	4264      	negs	r4, r4
 8000e64:	0761      	lsls	r1, r4, #29
 8000e66:	0264      	lsls	r4, r4, #9
 8000e68:	0b24      	lsrs	r4, r4, #12
 8000e6a:	08c2      	lsrs	r2, r0, #3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	e6cc      	b.n	8000c0c <__aeabi_dmul+0xac>
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	fffffc01 	.word	0xfffffc01
 8000e7c:	000003ff 	.word	0x000003ff
 8000e80:	feffffff 	.word	0xfeffffff
 8000e84:	000007fe 	.word	0x000007fe
 8000e88:	fffffc0d 	.word	0xfffffc0d
 8000e8c:	0000043e 	.word	0x0000043e
 8000e90:	4649      	mov	r1, r9
 8000e92:	464a      	mov	r2, r9
 8000e94:	0409      	lsls	r1, r1, #16
 8000e96:	0c09      	lsrs	r1, r1, #16
 8000e98:	000d      	movs	r5, r1
 8000e9a:	0c16      	lsrs	r6, r2, #16
 8000e9c:	0c02      	lsrs	r2, r0, #16
 8000e9e:	0400      	lsls	r0, r0, #16
 8000ea0:	0c00      	lsrs	r0, r0, #16
 8000ea2:	4345      	muls	r5, r0
 8000ea4:	46ac      	mov	ip, r5
 8000ea6:	0005      	movs	r5, r0
 8000ea8:	4375      	muls	r5, r6
 8000eaa:	46a8      	mov	r8, r5
 8000eac:	0015      	movs	r5, r2
 8000eae:	000f      	movs	r7, r1
 8000eb0:	4375      	muls	r5, r6
 8000eb2:	9200      	str	r2, [sp, #0]
 8000eb4:	9502      	str	r5, [sp, #8]
 8000eb6:	002a      	movs	r2, r5
 8000eb8:	9d00      	ldr	r5, [sp, #0]
 8000eba:	436f      	muls	r7, r5
 8000ebc:	4665      	mov	r5, ip
 8000ebe:	0c2d      	lsrs	r5, r5, #16
 8000ec0:	46a9      	mov	r9, r5
 8000ec2:	4447      	add	r7, r8
 8000ec4:	444f      	add	r7, r9
 8000ec6:	45b8      	cmp	r8, r7
 8000ec8:	d905      	bls.n	8000ed6 <__aeabi_dmul+0x376>
 8000eca:	0015      	movs	r5, r2
 8000ecc:	2280      	movs	r2, #128	@ 0x80
 8000ece:	0252      	lsls	r2, r2, #9
 8000ed0:	4690      	mov	r8, r2
 8000ed2:	4445      	add	r5, r8
 8000ed4:	9502      	str	r5, [sp, #8]
 8000ed6:	0c3d      	lsrs	r5, r7, #16
 8000ed8:	9503      	str	r5, [sp, #12]
 8000eda:	4665      	mov	r5, ip
 8000edc:	042d      	lsls	r5, r5, #16
 8000ede:	043f      	lsls	r7, r7, #16
 8000ee0:	0c2d      	lsrs	r5, r5, #16
 8000ee2:	46ac      	mov	ip, r5
 8000ee4:	003d      	movs	r5, r7
 8000ee6:	4465      	add	r5, ip
 8000ee8:	9504      	str	r5, [sp, #16]
 8000eea:	0c25      	lsrs	r5, r4, #16
 8000eec:	0424      	lsls	r4, r4, #16
 8000eee:	0c24      	lsrs	r4, r4, #16
 8000ef0:	46ac      	mov	ip, r5
 8000ef2:	0025      	movs	r5, r4
 8000ef4:	4375      	muls	r5, r6
 8000ef6:	46a8      	mov	r8, r5
 8000ef8:	4665      	mov	r5, ip
 8000efa:	000f      	movs	r7, r1
 8000efc:	4369      	muls	r1, r5
 8000efe:	4441      	add	r1, r8
 8000f00:	4689      	mov	r9, r1
 8000f02:	4367      	muls	r7, r4
 8000f04:	0c39      	lsrs	r1, r7, #16
 8000f06:	4449      	add	r1, r9
 8000f08:	436e      	muls	r6, r5
 8000f0a:	4588      	cmp	r8, r1
 8000f0c:	d903      	bls.n	8000f16 <__aeabi_dmul+0x3b6>
 8000f0e:	2280      	movs	r2, #128	@ 0x80
 8000f10:	0252      	lsls	r2, r2, #9
 8000f12:	4690      	mov	r8, r2
 8000f14:	4446      	add	r6, r8
 8000f16:	0c0d      	lsrs	r5, r1, #16
 8000f18:	46a8      	mov	r8, r5
 8000f1a:	0035      	movs	r5, r6
 8000f1c:	4445      	add	r5, r8
 8000f1e:	9505      	str	r5, [sp, #20]
 8000f20:	9d03      	ldr	r5, [sp, #12]
 8000f22:	043f      	lsls	r7, r7, #16
 8000f24:	46a8      	mov	r8, r5
 8000f26:	0c3f      	lsrs	r7, r7, #16
 8000f28:	0409      	lsls	r1, r1, #16
 8000f2a:	19c9      	adds	r1, r1, r7
 8000f2c:	4488      	add	r8, r1
 8000f2e:	4645      	mov	r5, r8
 8000f30:	9503      	str	r5, [sp, #12]
 8000f32:	4655      	mov	r5, sl
 8000f34:	042e      	lsls	r6, r5, #16
 8000f36:	0c36      	lsrs	r6, r6, #16
 8000f38:	0c2f      	lsrs	r7, r5, #16
 8000f3a:	0035      	movs	r5, r6
 8000f3c:	4345      	muls	r5, r0
 8000f3e:	4378      	muls	r0, r7
 8000f40:	4681      	mov	r9, r0
 8000f42:	0038      	movs	r0, r7
 8000f44:	46a8      	mov	r8, r5
 8000f46:	0c2d      	lsrs	r5, r5, #16
 8000f48:	46aa      	mov	sl, r5
 8000f4a:	9a00      	ldr	r2, [sp, #0]
 8000f4c:	4350      	muls	r0, r2
 8000f4e:	4372      	muls	r2, r6
 8000f50:	444a      	add	r2, r9
 8000f52:	4452      	add	r2, sl
 8000f54:	4591      	cmp	r9, r2
 8000f56:	d903      	bls.n	8000f60 <__aeabi_dmul+0x400>
 8000f58:	2580      	movs	r5, #128	@ 0x80
 8000f5a:	026d      	lsls	r5, r5, #9
 8000f5c:	46a9      	mov	r9, r5
 8000f5e:	4448      	add	r0, r9
 8000f60:	0c15      	lsrs	r5, r2, #16
 8000f62:	46a9      	mov	r9, r5
 8000f64:	4645      	mov	r5, r8
 8000f66:	042d      	lsls	r5, r5, #16
 8000f68:	0c2d      	lsrs	r5, r5, #16
 8000f6a:	46a8      	mov	r8, r5
 8000f6c:	4665      	mov	r5, ip
 8000f6e:	437d      	muls	r5, r7
 8000f70:	0412      	lsls	r2, r2, #16
 8000f72:	4448      	add	r0, r9
 8000f74:	4490      	add	r8, r2
 8000f76:	46a9      	mov	r9, r5
 8000f78:	0032      	movs	r2, r6
 8000f7a:	4665      	mov	r5, ip
 8000f7c:	4362      	muls	r2, r4
 8000f7e:	436e      	muls	r6, r5
 8000f80:	437c      	muls	r4, r7
 8000f82:	0c17      	lsrs	r7, r2, #16
 8000f84:	1936      	adds	r6, r6, r4
 8000f86:	19bf      	adds	r7, r7, r6
 8000f88:	42bc      	cmp	r4, r7
 8000f8a:	d903      	bls.n	8000f94 <__aeabi_dmul+0x434>
 8000f8c:	2480      	movs	r4, #128	@ 0x80
 8000f8e:	0264      	lsls	r4, r4, #9
 8000f90:	46a4      	mov	ip, r4
 8000f92:	44e1      	add	r9, ip
 8000f94:	9c02      	ldr	r4, [sp, #8]
 8000f96:	9e03      	ldr	r6, [sp, #12]
 8000f98:	46a4      	mov	ip, r4
 8000f9a:	9d05      	ldr	r5, [sp, #20]
 8000f9c:	4466      	add	r6, ip
 8000f9e:	428e      	cmp	r6, r1
 8000fa0:	4189      	sbcs	r1, r1
 8000fa2:	46ac      	mov	ip, r5
 8000fa4:	0412      	lsls	r2, r2, #16
 8000fa6:	043c      	lsls	r4, r7, #16
 8000fa8:	0c12      	lsrs	r2, r2, #16
 8000faa:	18a2      	adds	r2, r4, r2
 8000fac:	4462      	add	r2, ip
 8000fae:	4249      	negs	r1, r1
 8000fb0:	1854      	adds	r4, r2, r1
 8000fb2:	4446      	add	r6, r8
 8000fb4:	46a4      	mov	ip, r4
 8000fb6:	4546      	cmp	r6, r8
 8000fb8:	41a4      	sbcs	r4, r4
 8000fba:	4682      	mov	sl, r0
 8000fbc:	4264      	negs	r4, r4
 8000fbe:	46a0      	mov	r8, r4
 8000fc0:	42aa      	cmp	r2, r5
 8000fc2:	4192      	sbcs	r2, r2
 8000fc4:	458c      	cmp	ip, r1
 8000fc6:	4189      	sbcs	r1, r1
 8000fc8:	44e2      	add	sl, ip
 8000fca:	44d0      	add	r8, sl
 8000fcc:	4249      	negs	r1, r1
 8000fce:	4252      	negs	r2, r2
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	45a0      	cmp	r8, r4
 8000fd4:	41a4      	sbcs	r4, r4
 8000fd6:	4582      	cmp	sl, r0
 8000fd8:	4189      	sbcs	r1, r1
 8000fda:	4264      	negs	r4, r4
 8000fdc:	4249      	negs	r1, r1
 8000fde:	430c      	orrs	r4, r1
 8000fe0:	4641      	mov	r1, r8
 8000fe2:	0c3f      	lsrs	r7, r7, #16
 8000fe4:	19d2      	adds	r2, r2, r7
 8000fe6:	1912      	adds	r2, r2, r4
 8000fe8:	0dcc      	lsrs	r4, r1, #23
 8000fea:	9904      	ldr	r1, [sp, #16]
 8000fec:	0270      	lsls	r0, r6, #9
 8000fee:	4308      	orrs	r0, r1
 8000ff0:	1e41      	subs	r1, r0, #1
 8000ff2:	4188      	sbcs	r0, r1
 8000ff4:	4641      	mov	r1, r8
 8000ff6:	444a      	add	r2, r9
 8000ff8:	0df6      	lsrs	r6, r6, #23
 8000ffa:	0252      	lsls	r2, r2, #9
 8000ffc:	4330      	orrs	r0, r6
 8000ffe:	0249      	lsls	r1, r1, #9
 8001000:	4314      	orrs	r4, r2
 8001002:	4308      	orrs	r0, r1
 8001004:	01d2      	lsls	r2, r2, #7
 8001006:	d535      	bpl.n	8001074 <__aeabi_dmul+0x514>
 8001008:	2201      	movs	r2, #1
 800100a:	0843      	lsrs	r3, r0, #1
 800100c:	4002      	ands	r2, r0
 800100e:	4313      	orrs	r3, r2
 8001010:	07e0      	lsls	r0, r4, #31
 8001012:	4318      	orrs	r0, r3
 8001014:	0864      	lsrs	r4, r4, #1
 8001016:	e634      	b.n	8000c82 <__aeabi_dmul+0x122>
 8001018:	9b00      	ldr	r3, [sp, #0]
 800101a:	46a2      	mov	sl, r4
 800101c:	469b      	mov	fp, r3
 800101e:	4681      	mov	r9, r0
 8001020:	2480      	movs	r4, #128	@ 0x80
 8001022:	4653      	mov	r3, sl
 8001024:	0324      	lsls	r4, r4, #12
 8001026:	431c      	orrs	r4, r3
 8001028:	0324      	lsls	r4, r4, #12
 800102a:	464a      	mov	r2, r9
 800102c:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <__aeabi_dmul+0x588>)
 800102e:	0b24      	lsrs	r4, r4, #12
 8001030:	e5ec      	b.n	8000c0c <__aeabi_dmul+0xac>
 8001032:	f000 fc59 	bl	80018e8 <__clzsi2>
 8001036:	2315      	movs	r3, #21
 8001038:	469c      	mov	ip, r3
 800103a:	4484      	add	ip, r0
 800103c:	0002      	movs	r2, r0
 800103e:	4663      	mov	r3, ip
 8001040:	3220      	adds	r2, #32
 8001042:	2b1c      	cmp	r3, #28
 8001044:	dc00      	bgt.n	8001048 <__aeabi_dmul+0x4e8>
 8001046:	e684      	b.n	8000d52 <__aeabi_dmul+0x1f2>
 8001048:	2300      	movs	r3, #0
 800104a:	4699      	mov	r9, r3
 800104c:	0023      	movs	r3, r4
 800104e:	3808      	subs	r0, #8
 8001050:	4083      	lsls	r3, r0
 8001052:	469a      	mov	sl, r3
 8001054:	e68e      	b.n	8000d74 <__aeabi_dmul+0x214>
 8001056:	f000 fc47 	bl	80018e8 <__clzsi2>
 800105a:	0002      	movs	r2, r0
 800105c:	0003      	movs	r3, r0
 800105e:	3215      	adds	r2, #21
 8001060:	3320      	adds	r3, #32
 8001062:	2a1c      	cmp	r2, #28
 8001064:	dc00      	bgt.n	8001068 <__aeabi_dmul+0x508>
 8001066:	e64e      	b.n	8000d06 <__aeabi_dmul+0x1a6>
 8001068:	0002      	movs	r2, r0
 800106a:	0034      	movs	r4, r6
 800106c:	3a08      	subs	r2, #8
 800106e:	2000      	movs	r0, #0
 8001070:	4094      	lsls	r4, r2
 8001072:	e652      	b.n	8000d1a <__aeabi_dmul+0x1ba>
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	e604      	b.n	8000c82 <__aeabi_dmul+0x122>
 8001078:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <__aeabi_dmul+0x58c>)
 800107a:	0021      	movs	r1, r4
 800107c:	469c      	mov	ip, r3
 800107e:	0003      	movs	r3, r0
 8001080:	9d01      	ldr	r5, [sp, #4]
 8001082:	40d3      	lsrs	r3, r2
 8001084:	4465      	add	r5, ip
 8001086:	40a9      	lsls	r1, r5
 8001088:	4319      	orrs	r1, r3
 800108a:	0003      	movs	r3, r0
 800108c:	40ab      	lsls	r3, r5
 800108e:	1e58      	subs	r0, r3, #1
 8001090:	4183      	sbcs	r3, r0
 8001092:	4319      	orrs	r1, r3
 8001094:	0008      	movs	r0, r1
 8001096:	40d4      	lsrs	r4, r2
 8001098:	074b      	lsls	r3, r1, #29
 800109a:	d009      	beq.n	80010b0 <__aeabi_dmul+0x550>
 800109c:	230f      	movs	r3, #15
 800109e:	400b      	ands	r3, r1
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d005      	beq.n	80010b0 <__aeabi_dmul+0x550>
 80010a4:	1d0b      	adds	r3, r1, #4
 80010a6:	428b      	cmp	r3, r1
 80010a8:	4180      	sbcs	r0, r0
 80010aa:	4240      	negs	r0, r0
 80010ac:	1824      	adds	r4, r4, r0
 80010ae:	0018      	movs	r0, r3
 80010b0:	0223      	lsls	r3, r4, #8
 80010b2:	d400      	bmi.n	80010b6 <__aeabi_dmul+0x556>
 80010b4:	e6d6      	b.n	8000e64 <__aeabi_dmul+0x304>
 80010b6:	2301      	movs	r3, #1
 80010b8:	2400      	movs	r4, #0
 80010ba:	2200      	movs	r2, #0
 80010bc:	e5a6      	b.n	8000c0c <__aeabi_dmul+0xac>
 80010be:	290f      	cmp	r1, #15
 80010c0:	d1aa      	bne.n	8001018 <__aeabi_dmul+0x4b8>
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	4652      	mov	r2, sl
 80010c6:	031b      	lsls	r3, r3, #12
 80010c8:	421a      	tst	r2, r3
 80010ca:	d0a9      	beq.n	8001020 <__aeabi_dmul+0x4c0>
 80010cc:	421c      	tst	r4, r3
 80010ce:	d1a7      	bne.n	8001020 <__aeabi_dmul+0x4c0>
 80010d0:	431c      	orrs	r4, r3
 80010d2:	9b00      	ldr	r3, [sp, #0]
 80010d4:	0002      	movs	r2, r0
 80010d6:	469b      	mov	fp, r3
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <__aeabi_dmul+0x588>)
 80010da:	e597      	b.n	8000c0c <__aeabi_dmul+0xac>
 80010dc:	2400      	movs	r4, #0
 80010de:	e6c1      	b.n	8000e64 <__aeabi_dmul+0x304>
 80010e0:	2400      	movs	r4, #0
 80010e2:	4b01      	ldr	r3, [pc, #4]	@ (80010e8 <__aeabi_dmul+0x588>)
 80010e4:	0022      	movs	r2, r4
 80010e6:	e591      	b.n	8000c0c <__aeabi_dmul+0xac>
 80010e8:	000007ff 	.word	0x000007ff
 80010ec:	0000041e 	.word	0x0000041e

080010f0 <__aeabi_dsub>:
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	464e      	mov	r6, r9
 80010f4:	4645      	mov	r5, r8
 80010f6:	46de      	mov	lr, fp
 80010f8:	4657      	mov	r7, sl
 80010fa:	b5e0      	push	{r5, r6, r7, lr}
 80010fc:	b085      	sub	sp, #20
 80010fe:	9000      	str	r0, [sp, #0]
 8001100:	9101      	str	r1, [sp, #4]
 8001102:	030c      	lsls	r4, r1, #12
 8001104:	004f      	lsls	r7, r1, #1
 8001106:	0fce      	lsrs	r6, r1, #31
 8001108:	0a61      	lsrs	r1, r4, #9
 800110a:	9c00      	ldr	r4, [sp, #0]
 800110c:	46b0      	mov	r8, r6
 800110e:	0f64      	lsrs	r4, r4, #29
 8001110:	430c      	orrs	r4, r1
 8001112:	9900      	ldr	r1, [sp, #0]
 8001114:	0d7f      	lsrs	r7, r7, #21
 8001116:	00c8      	lsls	r0, r1, #3
 8001118:	0011      	movs	r1, r2
 800111a:	001a      	movs	r2, r3
 800111c:	031b      	lsls	r3, r3, #12
 800111e:	469c      	mov	ip, r3
 8001120:	9100      	str	r1, [sp, #0]
 8001122:	9201      	str	r2, [sp, #4]
 8001124:	0051      	lsls	r1, r2, #1
 8001126:	0d4b      	lsrs	r3, r1, #21
 8001128:	4699      	mov	r9, r3
 800112a:	9b01      	ldr	r3, [sp, #4]
 800112c:	9d00      	ldr	r5, [sp, #0]
 800112e:	0fd9      	lsrs	r1, r3, #31
 8001130:	4663      	mov	r3, ip
 8001132:	0f6a      	lsrs	r2, r5, #29
 8001134:	0a5b      	lsrs	r3, r3, #9
 8001136:	4313      	orrs	r3, r2
 8001138:	00ea      	lsls	r2, r5, #3
 800113a:	4694      	mov	ip, r2
 800113c:	4693      	mov	fp, r2
 800113e:	4ac1      	ldr	r2, [pc, #772]	@ (8001444 <__aeabi_dsub+0x354>)
 8001140:	9003      	str	r0, [sp, #12]
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	4591      	cmp	r9, r2
 8001146:	d100      	bne.n	800114a <__aeabi_dsub+0x5a>
 8001148:	e0cd      	b.n	80012e6 <__aeabi_dsub+0x1f6>
 800114a:	2501      	movs	r5, #1
 800114c:	4069      	eors	r1, r5
 800114e:	464d      	mov	r5, r9
 8001150:	1b7d      	subs	r5, r7, r5
 8001152:	46aa      	mov	sl, r5
 8001154:	428e      	cmp	r6, r1
 8001156:	d100      	bne.n	800115a <__aeabi_dsub+0x6a>
 8001158:	e080      	b.n	800125c <__aeabi_dsub+0x16c>
 800115a:	2d00      	cmp	r5, #0
 800115c:	dc00      	bgt.n	8001160 <__aeabi_dsub+0x70>
 800115e:	e335      	b.n	80017cc <__aeabi_dsub+0x6dc>
 8001160:	4649      	mov	r1, r9
 8001162:	2900      	cmp	r1, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_dsub+0x78>
 8001166:	e0df      	b.n	8001328 <__aeabi_dsub+0x238>
 8001168:	4297      	cmp	r7, r2
 800116a:	d100      	bne.n	800116e <__aeabi_dsub+0x7e>
 800116c:	e194      	b.n	8001498 <__aeabi_dsub+0x3a8>
 800116e:	4652      	mov	r2, sl
 8001170:	2501      	movs	r5, #1
 8001172:	2a38      	cmp	r2, #56	@ 0x38
 8001174:	dc19      	bgt.n	80011aa <__aeabi_dsub+0xba>
 8001176:	2280      	movs	r2, #128	@ 0x80
 8001178:	9b02      	ldr	r3, [sp, #8]
 800117a:	0412      	lsls	r2, r2, #16
 800117c:	4313      	orrs	r3, r2
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	4652      	mov	r2, sl
 8001182:	2a1f      	cmp	r2, #31
 8001184:	dd00      	ble.n	8001188 <__aeabi_dsub+0x98>
 8001186:	e1e3      	b.n	8001550 <__aeabi_dsub+0x460>
 8001188:	4653      	mov	r3, sl
 800118a:	2220      	movs	r2, #32
 800118c:	4661      	mov	r1, ip
 800118e:	9d02      	ldr	r5, [sp, #8]
 8001190:	1ad2      	subs	r2, r2, r3
 8001192:	4095      	lsls	r5, r2
 8001194:	40d9      	lsrs	r1, r3
 8001196:	430d      	orrs	r5, r1
 8001198:	4661      	mov	r1, ip
 800119a:	4091      	lsls	r1, r2
 800119c:	000a      	movs	r2, r1
 800119e:	1e51      	subs	r1, r2, #1
 80011a0:	418a      	sbcs	r2, r1
 80011a2:	4315      	orrs	r5, r2
 80011a4:	9a02      	ldr	r2, [sp, #8]
 80011a6:	40da      	lsrs	r2, r3
 80011a8:	1aa4      	subs	r4, r4, r2
 80011aa:	1b45      	subs	r5, r0, r5
 80011ac:	42a8      	cmp	r0, r5
 80011ae:	4180      	sbcs	r0, r0
 80011b0:	4240      	negs	r0, r0
 80011b2:	1a24      	subs	r4, r4, r0
 80011b4:	0223      	lsls	r3, r4, #8
 80011b6:	d400      	bmi.n	80011ba <__aeabi_dsub+0xca>
 80011b8:	e13d      	b.n	8001436 <__aeabi_dsub+0x346>
 80011ba:	0264      	lsls	r4, r4, #9
 80011bc:	0a64      	lsrs	r4, r4, #9
 80011be:	2c00      	cmp	r4, #0
 80011c0:	d100      	bne.n	80011c4 <__aeabi_dsub+0xd4>
 80011c2:	e147      	b.n	8001454 <__aeabi_dsub+0x364>
 80011c4:	0020      	movs	r0, r4
 80011c6:	f000 fb8f 	bl	80018e8 <__clzsi2>
 80011ca:	0003      	movs	r3, r0
 80011cc:	3b08      	subs	r3, #8
 80011ce:	2120      	movs	r1, #32
 80011d0:	0028      	movs	r0, r5
 80011d2:	1aca      	subs	r2, r1, r3
 80011d4:	40d0      	lsrs	r0, r2
 80011d6:	409c      	lsls	r4, r3
 80011d8:	0002      	movs	r2, r0
 80011da:	409d      	lsls	r5, r3
 80011dc:	4322      	orrs	r2, r4
 80011de:	429f      	cmp	r7, r3
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_dsub+0xf4>
 80011e2:	e177      	b.n	80014d4 <__aeabi_dsub+0x3e4>
 80011e4:	1bd8      	subs	r0, r3, r7
 80011e6:	3001      	adds	r0, #1
 80011e8:	1a09      	subs	r1, r1, r0
 80011ea:	002c      	movs	r4, r5
 80011ec:	408d      	lsls	r5, r1
 80011ee:	40c4      	lsrs	r4, r0
 80011f0:	1e6b      	subs	r3, r5, #1
 80011f2:	419d      	sbcs	r5, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	40c2      	lsrs	r2, r0
 80011f8:	408b      	lsls	r3, r1
 80011fa:	4325      	orrs	r5, r4
 80011fc:	2700      	movs	r7, #0
 80011fe:	0014      	movs	r4, r2
 8001200:	431d      	orrs	r5, r3
 8001202:	076b      	lsls	r3, r5, #29
 8001204:	d009      	beq.n	800121a <__aeabi_dsub+0x12a>
 8001206:	230f      	movs	r3, #15
 8001208:	402b      	ands	r3, r5
 800120a:	2b04      	cmp	r3, #4
 800120c:	d005      	beq.n	800121a <__aeabi_dsub+0x12a>
 800120e:	1d2b      	adds	r3, r5, #4
 8001210:	42ab      	cmp	r3, r5
 8001212:	41ad      	sbcs	r5, r5
 8001214:	426d      	negs	r5, r5
 8001216:	1964      	adds	r4, r4, r5
 8001218:	001d      	movs	r5, r3
 800121a:	0223      	lsls	r3, r4, #8
 800121c:	d400      	bmi.n	8001220 <__aeabi_dsub+0x130>
 800121e:	e140      	b.n	80014a2 <__aeabi_dsub+0x3b2>
 8001220:	4a88      	ldr	r2, [pc, #544]	@ (8001444 <__aeabi_dsub+0x354>)
 8001222:	3701      	adds	r7, #1
 8001224:	4297      	cmp	r7, r2
 8001226:	d100      	bne.n	800122a <__aeabi_dsub+0x13a>
 8001228:	e101      	b.n	800142e <__aeabi_dsub+0x33e>
 800122a:	2601      	movs	r6, #1
 800122c:	4643      	mov	r3, r8
 800122e:	4986      	ldr	r1, [pc, #536]	@ (8001448 <__aeabi_dsub+0x358>)
 8001230:	08ed      	lsrs	r5, r5, #3
 8001232:	4021      	ands	r1, r4
 8001234:	074a      	lsls	r2, r1, #29
 8001236:	432a      	orrs	r2, r5
 8001238:	057c      	lsls	r4, r7, #21
 800123a:	024d      	lsls	r5, r1, #9
 800123c:	0b2d      	lsrs	r5, r5, #12
 800123e:	0d64      	lsrs	r4, r4, #21
 8001240:	401e      	ands	r6, r3
 8001242:	0524      	lsls	r4, r4, #20
 8001244:	432c      	orrs	r4, r5
 8001246:	07f6      	lsls	r6, r6, #31
 8001248:	4334      	orrs	r4, r6
 800124a:	0010      	movs	r0, r2
 800124c:	0021      	movs	r1, r4
 800124e:	b005      	add	sp, #20
 8001250:	bcf0      	pop	{r4, r5, r6, r7}
 8001252:	46bb      	mov	fp, r7
 8001254:	46b2      	mov	sl, r6
 8001256:	46a9      	mov	r9, r5
 8001258:	46a0      	mov	r8, r4
 800125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125c:	2d00      	cmp	r5, #0
 800125e:	dc00      	bgt.n	8001262 <__aeabi_dsub+0x172>
 8001260:	e2d0      	b.n	8001804 <__aeabi_dsub+0x714>
 8001262:	4649      	mov	r1, r9
 8001264:	2900      	cmp	r1, #0
 8001266:	d000      	beq.n	800126a <__aeabi_dsub+0x17a>
 8001268:	e0d4      	b.n	8001414 <__aeabi_dsub+0x324>
 800126a:	4661      	mov	r1, ip
 800126c:	9b02      	ldr	r3, [sp, #8]
 800126e:	4319      	orrs	r1, r3
 8001270:	d100      	bne.n	8001274 <__aeabi_dsub+0x184>
 8001272:	e12b      	b.n	80014cc <__aeabi_dsub+0x3dc>
 8001274:	1e69      	subs	r1, r5, #1
 8001276:	2d01      	cmp	r5, #1
 8001278:	d100      	bne.n	800127c <__aeabi_dsub+0x18c>
 800127a:	e1d9      	b.n	8001630 <__aeabi_dsub+0x540>
 800127c:	4295      	cmp	r5, r2
 800127e:	d100      	bne.n	8001282 <__aeabi_dsub+0x192>
 8001280:	e10a      	b.n	8001498 <__aeabi_dsub+0x3a8>
 8001282:	2501      	movs	r5, #1
 8001284:	2938      	cmp	r1, #56	@ 0x38
 8001286:	dc17      	bgt.n	80012b8 <__aeabi_dsub+0x1c8>
 8001288:	468a      	mov	sl, r1
 800128a:	4653      	mov	r3, sl
 800128c:	2b1f      	cmp	r3, #31
 800128e:	dd00      	ble.n	8001292 <__aeabi_dsub+0x1a2>
 8001290:	e1e7      	b.n	8001662 <__aeabi_dsub+0x572>
 8001292:	2220      	movs	r2, #32
 8001294:	1ad2      	subs	r2, r2, r3
 8001296:	9b02      	ldr	r3, [sp, #8]
 8001298:	4661      	mov	r1, ip
 800129a:	4093      	lsls	r3, r2
 800129c:	001d      	movs	r5, r3
 800129e:	4653      	mov	r3, sl
 80012a0:	40d9      	lsrs	r1, r3
 80012a2:	4663      	mov	r3, ip
 80012a4:	4093      	lsls	r3, r2
 80012a6:	001a      	movs	r2, r3
 80012a8:	430d      	orrs	r5, r1
 80012aa:	1e51      	subs	r1, r2, #1
 80012ac:	418a      	sbcs	r2, r1
 80012ae:	4653      	mov	r3, sl
 80012b0:	4315      	orrs	r5, r2
 80012b2:	9a02      	ldr	r2, [sp, #8]
 80012b4:	40da      	lsrs	r2, r3
 80012b6:	18a4      	adds	r4, r4, r2
 80012b8:	182d      	adds	r5, r5, r0
 80012ba:	4285      	cmp	r5, r0
 80012bc:	4180      	sbcs	r0, r0
 80012be:	4240      	negs	r0, r0
 80012c0:	1824      	adds	r4, r4, r0
 80012c2:	0223      	lsls	r3, r4, #8
 80012c4:	d400      	bmi.n	80012c8 <__aeabi_dsub+0x1d8>
 80012c6:	e0b6      	b.n	8001436 <__aeabi_dsub+0x346>
 80012c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001444 <__aeabi_dsub+0x354>)
 80012ca:	3701      	adds	r7, #1
 80012cc:	429f      	cmp	r7, r3
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dsub+0x1e2>
 80012d0:	e0ad      	b.n	800142e <__aeabi_dsub+0x33e>
 80012d2:	2101      	movs	r1, #1
 80012d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001448 <__aeabi_dsub+0x358>)
 80012d6:	086a      	lsrs	r2, r5, #1
 80012d8:	401c      	ands	r4, r3
 80012da:	4029      	ands	r1, r5
 80012dc:	430a      	orrs	r2, r1
 80012de:	07e5      	lsls	r5, r4, #31
 80012e0:	4315      	orrs	r5, r2
 80012e2:	0864      	lsrs	r4, r4, #1
 80012e4:	e78d      	b.n	8001202 <__aeabi_dsub+0x112>
 80012e6:	4a59      	ldr	r2, [pc, #356]	@ (800144c <__aeabi_dsub+0x35c>)
 80012e8:	9b02      	ldr	r3, [sp, #8]
 80012ea:	4692      	mov	sl, r2
 80012ec:	4662      	mov	r2, ip
 80012ee:	44ba      	add	sl, r7
 80012f0:	431a      	orrs	r2, r3
 80012f2:	d02c      	beq.n	800134e <__aeabi_dsub+0x25e>
 80012f4:	428e      	cmp	r6, r1
 80012f6:	d02e      	beq.n	8001356 <__aeabi_dsub+0x266>
 80012f8:	4652      	mov	r2, sl
 80012fa:	2a00      	cmp	r2, #0
 80012fc:	d060      	beq.n	80013c0 <__aeabi_dsub+0x2d0>
 80012fe:	2f00      	cmp	r7, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_dsub+0x214>
 8001302:	e0db      	b.n	80014bc <__aeabi_dsub+0x3cc>
 8001304:	4663      	mov	r3, ip
 8001306:	000e      	movs	r6, r1
 8001308:	9c02      	ldr	r4, [sp, #8]
 800130a:	08d8      	lsrs	r0, r3, #3
 800130c:	0762      	lsls	r2, r4, #29
 800130e:	4302      	orrs	r2, r0
 8001310:	08e4      	lsrs	r4, r4, #3
 8001312:	0013      	movs	r3, r2
 8001314:	4323      	orrs	r3, r4
 8001316:	d100      	bne.n	800131a <__aeabi_dsub+0x22a>
 8001318:	e254      	b.n	80017c4 <__aeabi_dsub+0x6d4>
 800131a:	2580      	movs	r5, #128	@ 0x80
 800131c:	032d      	lsls	r5, r5, #12
 800131e:	4325      	orrs	r5, r4
 8001320:	032d      	lsls	r5, r5, #12
 8001322:	4c48      	ldr	r4, [pc, #288]	@ (8001444 <__aeabi_dsub+0x354>)
 8001324:	0b2d      	lsrs	r5, r5, #12
 8001326:	e78c      	b.n	8001242 <__aeabi_dsub+0x152>
 8001328:	4661      	mov	r1, ip
 800132a:	9b02      	ldr	r3, [sp, #8]
 800132c:	4319      	orrs	r1, r3
 800132e:	d100      	bne.n	8001332 <__aeabi_dsub+0x242>
 8001330:	e0cc      	b.n	80014cc <__aeabi_dsub+0x3dc>
 8001332:	0029      	movs	r1, r5
 8001334:	3901      	subs	r1, #1
 8001336:	2d01      	cmp	r5, #1
 8001338:	d100      	bne.n	800133c <__aeabi_dsub+0x24c>
 800133a:	e188      	b.n	800164e <__aeabi_dsub+0x55e>
 800133c:	4295      	cmp	r5, r2
 800133e:	d100      	bne.n	8001342 <__aeabi_dsub+0x252>
 8001340:	e0aa      	b.n	8001498 <__aeabi_dsub+0x3a8>
 8001342:	2501      	movs	r5, #1
 8001344:	2938      	cmp	r1, #56	@ 0x38
 8001346:	dd00      	ble.n	800134a <__aeabi_dsub+0x25a>
 8001348:	e72f      	b.n	80011aa <__aeabi_dsub+0xba>
 800134a:	468a      	mov	sl, r1
 800134c:	e718      	b.n	8001180 <__aeabi_dsub+0x90>
 800134e:	2201      	movs	r2, #1
 8001350:	4051      	eors	r1, r2
 8001352:	428e      	cmp	r6, r1
 8001354:	d1d0      	bne.n	80012f8 <__aeabi_dsub+0x208>
 8001356:	4653      	mov	r3, sl
 8001358:	2b00      	cmp	r3, #0
 800135a:	d100      	bne.n	800135e <__aeabi_dsub+0x26e>
 800135c:	e0be      	b.n	80014dc <__aeabi_dsub+0x3ec>
 800135e:	2f00      	cmp	r7, #0
 8001360:	d000      	beq.n	8001364 <__aeabi_dsub+0x274>
 8001362:	e138      	b.n	80015d6 <__aeabi_dsub+0x4e6>
 8001364:	46ca      	mov	sl, r9
 8001366:	0022      	movs	r2, r4
 8001368:	4302      	orrs	r2, r0
 800136a:	d100      	bne.n	800136e <__aeabi_dsub+0x27e>
 800136c:	e1e2      	b.n	8001734 <__aeabi_dsub+0x644>
 800136e:	4653      	mov	r3, sl
 8001370:	1e59      	subs	r1, r3, #1
 8001372:	2b01      	cmp	r3, #1
 8001374:	d100      	bne.n	8001378 <__aeabi_dsub+0x288>
 8001376:	e20d      	b.n	8001794 <__aeabi_dsub+0x6a4>
 8001378:	4a32      	ldr	r2, [pc, #200]	@ (8001444 <__aeabi_dsub+0x354>)
 800137a:	4592      	cmp	sl, r2
 800137c:	d100      	bne.n	8001380 <__aeabi_dsub+0x290>
 800137e:	e1d2      	b.n	8001726 <__aeabi_dsub+0x636>
 8001380:	2701      	movs	r7, #1
 8001382:	2938      	cmp	r1, #56	@ 0x38
 8001384:	dc13      	bgt.n	80013ae <__aeabi_dsub+0x2be>
 8001386:	291f      	cmp	r1, #31
 8001388:	dd00      	ble.n	800138c <__aeabi_dsub+0x29c>
 800138a:	e1ee      	b.n	800176a <__aeabi_dsub+0x67a>
 800138c:	2220      	movs	r2, #32
 800138e:	9b02      	ldr	r3, [sp, #8]
 8001390:	1a52      	subs	r2, r2, r1
 8001392:	0025      	movs	r5, r4
 8001394:	0007      	movs	r7, r0
 8001396:	469a      	mov	sl, r3
 8001398:	40cc      	lsrs	r4, r1
 800139a:	4090      	lsls	r0, r2
 800139c:	4095      	lsls	r5, r2
 800139e:	40cf      	lsrs	r7, r1
 80013a0:	44a2      	add	sl, r4
 80013a2:	1e42      	subs	r2, r0, #1
 80013a4:	4190      	sbcs	r0, r2
 80013a6:	4653      	mov	r3, sl
 80013a8:	432f      	orrs	r7, r5
 80013aa:	4307      	orrs	r7, r0
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	003d      	movs	r5, r7
 80013b0:	4465      	add	r5, ip
 80013b2:	4565      	cmp	r5, ip
 80013b4:	4192      	sbcs	r2, r2
 80013b6:	9b02      	ldr	r3, [sp, #8]
 80013b8:	4252      	negs	r2, r2
 80013ba:	464f      	mov	r7, r9
 80013bc:	18d4      	adds	r4, r2, r3
 80013be:	e780      	b.n	80012c2 <__aeabi_dsub+0x1d2>
 80013c0:	4a23      	ldr	r2, [pc, #140]	@ (8001450 <__aeabi_dsub+0x360>)
 80013c2:	1c7d      	adds	r5, r7, #1
 80013c4:	4215      	tst	r5, r2
 80013c6:	d000      	beq.n	80013ca <__aeabi_dsub+0x2da>
 80013c8:	e0aa      	b.n	8001520 <__aeabi_dsub+0x430>
 80013ca:	4662      	mov	r2, ip
 80013cc:	0025      	movs	r5, r4
 80013ce:	9b02      	ldr	r3, [sp, #8]
 80013d0:	4305      	orrs	r5, r0
 80013d2:	431a      	orrs	r2, r3
 80013d4:	2f00      	cmp	r7, #0
 80013d6:	d000      	beq.n	80013da <__aeabi_dsub+0x2ea>
 80013d8:	e0f5      	b.n	80015c6 <__aeabi_dsub+0x4d6>
 80013da:	2d00      	cmp	r5, #0
 80013dc:	d100      	bne.n	80013e0 <__aeabi_dsub+0x2f0>
 80013de:	e16b      	b.n	80016b8 <__aeabi_dsub+0x5c8>
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dsub+0x2f6>
 80013e4:	e152      	b.n	800168c <__aeabi_dsub+0x59c>
 80013e6:	4663      	mov	r3, ip
 80013e8:	1ac5      	subs	r5, r0, r3
 80013ea:	9b02      	ldr	r3, [sp, #8]
 80013ec:	1ae2      	subs	r2, r4, r3
 80013ee:	42a8      	cmp	r0, r5
 80013f0:	419b      	sbcs	r3, r3
 80013f2:	425b      	negs	r3, r3
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	021a      	lsls	r2, r3, #8
 80013f8:	d400      	bmi.n	80013fc <__aeabi_dsub+0x30c>
 80013fa:	e1d5      	b.n	80017a8 <__aeabi_dsub+0x6b8>
 80013fc:	4663      	mov	r3, ip
 80013fe:	1a1d      	subs	r5, r3, r0
 8001400:	45ac      	cmp	ip, r5
 8001402:	4192      	sbcs	r2, r2
 8001404:	2601      	movs	r6, #1
 8001406:	9b02      	ldr	r3, [sp, #8]
 8001408:	4252      	negs	r2, r2
 800140a:	1b1c      	subs	r4, r3, r4
 800140c:	4688      	mov	r8, r1
 800140e:	1aa4      	subs	r4, r4, r2
 8001410:	400e      	ands	r6, r1
 8001412:	e6f6      	b.n	8001202 <__aeabi_dsub+0x112>
 8001414:	4297      	cmp	r7, r2
 8001416:	d03f      	beq.n	8001498 <__aeabi_dsub+0x3a8>
 8001418:	4652      	mov	r2, sl
 800141a:	2501      	movs	r5, #1
 800141c:	2a38      	cmp	r2, #56	@ 0x38
 800141e:	dd00      	ble.n	8001422 <__aeabi_dsub+0x332>
 8001420:	e74a      	b.n	80012b8 <__aeabi_dsub+0x1c8>
 8001422:	2280      	movs	r2, #128	@ 0x80
 8001424:	9b02      	ldr	r3, [sp, #8]
 8001426:	0412      	lsls	r2, r2, #16
 8001428:	4313      	orrs	r3, r2
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	e72d      	b.n	800128a <__aeabi_dsub+0x19a>
 800142e:	003c      	movs	r4, r7
 8001430:	2500      	movs	r5, #0
 8001432:	2200      	movs	r2, #0
 8001434:	e705      	b.n	8001242 <__aeabi_dsub+0x152>
 8001436:	2307      	movs	r3, #7
 8001438:	402b      	ands	r3, r5
 800143a:	2b00      	cmp	r3, #0
 800143c:	d000      	beq.n	8001440 <__aeabi_dsub+0x350>
 800143e:	e6e2      	b.n	8001206 <__aeabi_dsub+0x116>
 8001440:	e06b      	b.n	800151a <__aeabi_dsub+0x42a>
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	000007ff 	.word	0x000007ff
 8001448:	ff7fffff 	.word	0xff7fffff
 800144c:	fffff801 	.word	0xfffff801
 8001450:	000007fe 	.word	0x000007fe
 8001454:	0028      	movs	r0, r5
 8001456:	f000 fa47 	bl	80018e8 <__clzsi2>
 800145a:	0003      	movs	r3, r0
 800145c:	3318      	adds	r3, #24
 800145e:	2b1f      	cmp	r3, #31
 8001460:	dc00      	bgt.n	8001464 <__aeabi_dsub+0x374>
 8001462:	e6b4      	b.n	80011ce <__aeabi_dsub+0xde>
 8001464:	002a      	movs	r2, r5
 8001466:	3808      	subs	r0, #8
 8001468:	4082      	lsls	r2, r0
 800146a:	429f      	cmp	r7, r3
 800146c:	dd00      	ble.n	8001470 <__aeabi_dsub+0x380>
 800146e:	e0b9      	b.n	80015e4 <__aeabi_dsub+0x4f4>
 8001470:	1bdb      	subs	r3, r3, r7
 8001472:	1c58      	adds	r0, r3, #1
 8001474:	281f      	cmp	r0, #31
 8001476:	dc00      	bgt.n	800147a <__aeabi_dsub+0x38a>
 8001478:	e1a0      	b.n	80017bc <__aeabi_dsub+0x6cc>
 800147a:	0015      	movs	r5, r2
 800147c:	3b1f      	subs	r3, #31
 800147e:	40dd      	lsrs	r5, r3
 8001480:	2820      	cmp	r0, #32
 8001482:	d005      	beq.n	8001490 <__aeabi_dsub+0x3a0>
 8001484:	2340      	movs	r3, #64	@ 0x40
 8001486:	1a1b      	subs	r3, r3, r0
 8001488:	409a      	lsls	r2, r3
 800148a:	1e53      	subs	r3, r2, #1
 800148c:	419a      	sbcs	r2, r3
 800148e:	4315      	orrs	r5, r2
 8001490:	2307      	movs	r3, #7
 8001492:	2700      	movs	r7, #0
 8001494:	402b      	ands	r3, r5
 8001496:	e7d0      	b.n	800143a <__aeabi_dsub+0x34a>
 8001498:	08c0      	lsrs	r0, r0, #3
 800149a:	0762      	lsls	r2, r4, #29
 800149c:	4302      	orrs	r2, r0
 800149e:	08e4      	lsrs	r4, r4, #3
 80014a0:	e737      	b.n	8001312 <__aeabi_dsub+0x222>
 80014a2:	08ea      	lsrs	r2, r5, #3
 80014a4:	0763      	lsls	r3, r4, #29
 80014a6:	431a      	orrs	r2, r3
 80014a8:	4bd3      	ldr	r3, [pc, #844]	@ (80017f8 <__aeabi_dsub+0x708>)
 80014aa:	08e4      	lsrs	r4, r4, #3
 80014ac:	429f      	cmp	r7, r3
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dsub+0x3c2>
 80014b0:	e72f      	b.n	8001312 <__aeabi_dsub+0x222>
 80014b2:	0324      	lsls	r4, r4, #12
 80014b4:	0b25      	lsrs	r5, r4, #12
 80014b6:	057c      	lsls	r4, r7, #21
 80014b8:	0d64      	lsrs	r4, r4, #21
 80014ba:	e6c2      	b.n	8001242 <__aeabi_dsub+0x152>
 80014bc:	46ca      	mov	sl, r9
 80014be:	0022      	movs	r2, r4
 80014c0:	4302      	orrs	r2, r0
 80014c2:	d158      	bne.n	8001576 <__aeabi_dsub+0x486>
 80014c4:	4663      	mov	r3, ip
 80014c6:	000e      	movs	r6, r1
 80014c8:	9c02      	ldr	r4, [sp, #8]
 80014ca:	9303      	str	r3, [sp, #12]
 80014cc:	9b03      	ldr	r3, [sp, #12]
 80014ce:	4657      	mov	r7, sl
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	e7e7      	b.n	80014a4 <__aeabi_dsub+0x3b4>
 80014d4:	4cc9      	ldr	r4, [pc, #804]	@ (80017fc <__aeabi_dsub+0x70c>)
 80014d6:	1aff      	subs	r7, r7, r3
 80014d8:	4014      	ands	r4, r2
 80014da:	e692      	b.n	8001202 <__aeabi_dsub+0x112>
 80014dc:	4dc8      	ldr	r5, [pc, #800]	@ (8001800 <__aeabi_dsub+0x710>)
 80014de:	1c7a      	adds	r2, r7, #1
 80014e0:	422a      	tst	r2, r5
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dsub+0x3f6>
 80014e4:	e084      	b.n	80015f0 <__aeabi_dsub+0x500>
 80014e6:	0022      	movs	r2, r4
 80014e8:	4302      	orrs	r2, r0
 80014ea:	2f00      	cmp	r7, #0
 80014ec:	d000      	beq.n	80014f0 <__aeabi_dsub+0x400>
 80014ee:	e0ef      	b.n	80016d0 <__aeabi_dsub+0x5e0>
 80014f0:	2a00      	cmp	r2, #0
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dsub+0x406>
 80014f4:	e0e5      	b.n	80016c2 <__aeabi_dsub+0x5d2>
 80014f6:	4662      	mov	r2, ip
 80014f8:	9902      	ldr	r1, [sp, #8]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	d100      	bne.n	8001500 <__aeabi_dsub+0x410>
 80014fe:	e0c5      	b.n	800168c <__aeabi_dsub+0x59c>
 8001500:	4663      	mov	r3, ip
 8001502:	18c5      	adds	r5, r0, r3
 8001504:	468c      	mov	ip, r1
 8001506:	4285      	cmp	r5, r0
 8001508:	4180      	sbcs	r0, r0
 800150a:	4464      	add	r4, ip
 800150c:	4240      	negs	r0, r0
 800150e:	1824      	adds	r4, r4, r0
 8001510:	0223      	lsls	r3, r4, #8
 8001512:	d502      	bpl.n	800151a <__aeabi_dsub+0x42a>
 8001514:	4bb9      	ldr	r3, [pc, #740]	@ (80017fc <__aeabi_dsub+0x70c>)
 8001516:	3701      	adds	r7, #1
 8001518:	401c      	ands	r4, r3
 800151a:	46ba      	mov	sl, r7
 800151c:	9503      	str	r5, [sp, #12]
 800151e:	e7d5      	b.n	80014cc <__aeabi_dsub+0x3dc>
 8001520:	4662      	mov	r2, ip
 8001522:	1a85      	subs	r5, r0, r2
 8001524:	42a8      	cmp	r0, r5
 8001526:	4192      	sbcs	r2, r2
 8001528:	4252      	negs	r2, r2
 800152a:	4691      	mov	r9, r2
 800152c:	9b02      	ldr	r3, [sp, #8]
 800152e:	1ae3      	subs	r3, r4, r3
 8001530:	001a      	movs	r2, r3
 8001532:	464b      	mov	r3, r9
 8001534:	1ad2      	subs	r2, r2, r3
 8001536:	0013      	movs	r3, r2
 8001538:	4691      	mov	r9, r2
 800153a:	021a      	lsls	r2, r3, #8
 800153c:	d46c      	bmi.n	8001618 <__aeabi_dsub+0x528>
 800153e:	464a      	mov	r2, r9
 8001540:	464c      	mov	r4, r9
 8001542:	432a      	orrs	r2, r5
 8001544:	d000      	beq.n	8001548 <__aeabi_dsub+0x458>
 8001546:	e63a      	b.n	80011be <__aeabi_dsub+0xce>
 8001548:	2600      	movs	r6, #0
 800154a:	2400      	movs	r4, #0
 800154c:	2500      	movs	r5, #0
 800154e:	e678      	b.n	8001242 <__aeabi_dsub+0x152>
 8001550:	9902      	ldr	r1, [sp, #8]
 8001552:	4653      	mov	r3, sl
 8001554:	000d      	movs	r5, r1
 8001556:	3a20      	subs	r2, #32
 8001558:	40d5      	lsrs	r5, r2
 800155a:	2b20      	cmp	r3, #32
 800155c:	d006      	beq.n	800156c <__aeabi_dsub+0x47c>
 800155e:	2240      	movs	r2, #64	@ 0x40
 8001560:	1ad2      	subs	r2, r2, r3
 8001562:	000b      	movs	r3, r1
 8001564:	4093      	lsls	r3, r2
 8001566:	4662      	mov	r2, ip
 8001568:	431a      	orrs	r2, r3
 800156a:	4693      	mov	fp, r2
 800156c:	465b      	mov	r3, fp
 800156e:	1e5a      	subs	r2, r3, #1
 8001570:	4193      	sbcs	r3, r2
 8001572:	431d      	orrs	r5, r3
 8001574:	e619      	b.n	80011aa <__aeabi_dsub+0xba>
 8001576:	4653      	mov	r3, sl
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	2b01      	cmp	r3, #1
 800157c:	d100      	bne.n	8001580 <__aeabi_dsub+0x490>
 800157e:	e0c6      	b.n	800170e <__aeabi_dsub+0x61e>
 8001580:	4e9d      	ldr	r6, [pc, #628]	@ (80017f8 <__aeabi_dsub+0x708>)
 8001582:	45b2      	cmp	sl, r6
 8001584:	d100      	bne.n	8001588 <__aeabi_dsub+0x498>
 8001586:	e6bd      	b.n	8001304 <__aeabi_dsub+0x214>
 8001588:	4688      	mov	r8, r1
 800158a:	000e      	movs	r6, r1
 800158c:	2501      	movs	r5, #1
 800158e:	2a38      	cmp	r2, #56	@ 0x38
 8001590:	dc10      	bgt.n	80015b4 <__aeabi_dsub+0x4c4>
 8001592:	2a1f      	cmp	r2, #31
 8001594:	dc7f      	bgt.n	8001696 <__aeabi_dsub+0x5a6>
 8001596:	2120      	movs	r1, #32
 8001598:	0025      	movs	r5, r4
 800159a:	1a89      	subs	r1, r1, r2
 800159c:	0007      	movs	r7, r0
 800159e:	4088      	lsls	r0, r1
 80015a0:	408d      	lsls	r5, r1
 80015a2:	40d7      	lsrs	r7, r2
 80015a4:	40d4      	lsrs	r4, r2
 80015a6:	1e41      	subs	r1, r0, #1
 80015a8:	4188      	sbcs	r0, r1
 80015aa:	9b02      	ldr	r3, [sp, #8]
 80015ac:	433d      	orrs	r5, r7
 80015ae:	1b1b      	subs	r3, r3, r4
 80015b0:	4305      	orrs	r5, r0
 80015b2:	9302      	str	r3, [sp, #8]
 80015b4:	4662      	mov	r2, ip
 80015b6:	1b55      	subs	r5, r2, r5
 80015b8:	45ac      	cmp	ip, r5
 80015ba:	4192      	sbcs	r2, r2
 80015bc:	9b02      	ldr	r3, [sp, #8]
 80015be:	4252      	negs	r2, r2
 80015c0:	464f      	mov	r7, r9
 80015c2:	1a9c      	subs	r4, r3, r2
 80015c4:	e5f6      	b.n	80011b4 <__aeabi_dsub+0xc4>
 80015c6:	2d00      	cmp	r5, #0
 80015c8:	d000      	beq.n	80015cc <__aeabi_dsub+0x4dc>
 80015ca:	e0b7      	b.n	800173c <__aeabi_dsub+0x64c>
 80015cc:	2a00      	cmp	r2, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dsub+0x4e2>
 80015d0:	e0f0      	b.n	80017b4 <__aeabi_dsub+0x6c4>
 80015d2:	2601      	movs	r6, #1
 80015d4:	400e      	ands	r6, r1
 80015d6:	4663      	mov	r3, ip
 80015d8:	9802      	ldr	r0, [sp, #8]
 80015da:	08d9      	lsrs	r1, r3, #3
 80015dc:	0742      	lsls	r2, r0, #29
 80015de:	430a      	orrs	r2, r1
 80015e0:	08c4      	lsrs	r4, r0, #3
 80015e2:	e696      	b.n	8001312 <__aeabi_dsub+0x222>
 80015e4:	4c85      	ldr	r4, [pc, #532]	@ (80017fc <__aeabi_dsub+0x70c>)
 80015e6:	1aff      	subs	r7, r7, r3
 80015e8:	4014      	ands	r4, r2
 80015ea:	0762      	lsls	r2, r4, #29
 80015ec:	08e4      	lsrs	r4, r4, #3
 80015ee:	e760      	b.n	80014b2 <__aeabi_dsub+0x3c2>
 80015f0:	4981      	ldr	r1, [pc, #516]	@ (80017f8 <__aeabi_dsub+0x708>)
 80015f2:	428a      	cmp	r2, r1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dsub+0x508>
 80015f6:	e0c9      	b.n	800178c <__aeabi_dsub+0x69c>
 80015f8:	4663      	mov	r3, ip
 80015fa:	18c1      	adds	r1, r0, r3
 80015fc:	4281      	cmp	r1, r0
 80015fe:	4180      	sbcs	r0, r0
 8001600:	9b02      	ldr	r3, [sp, #8]
 8001602:	4240      	negs	r0, r0
 8001604:	18e3      	adds	r3, r4, r3
 8001606:	181b      	adds	r3, r3, r0
 8001608:	07dd      	lsls	r5, r3, #31
 800160a:	085c      	lsrs	r4, r3, #1
 800160c:	2307      	movs	r3, #7
 800160e:	0849      	lsrs	r1, r1, #1
 8001610:	430d      	orrs	r5, r1
 8001612:	0017      	movs	r7, r2
 8001614:	402b      	ands	r3, r5
 8001616:	e710      	b.n	800143a <__aeabi_dsub+0x34a>
 8001618:	4663      	mov	r3, ip
 800161a:	1a1d      	subs	r5, r3, r0
 800161c:	45ac      	cmp	ip, r5
 800161e:	4192      	sbcs	r2, r2
 8001620:	2601      	movs	r6, #1
 8001622:	9b02      	ldr	r3, [sp, #8]
 8001624:	4252      	negs	r2, r2
 8001626:	1b1c      	subs	r4, r3, r4
 8001628:	4688      	mov	r8, r1
 800162a:	1aa4      	subs	r4, r4, r2
 800162c:	400e      	ands	r6, r1
 800162e:	e5c6      	b.n	80011be <__aeabi_dsub+0xce>
 8001630:	4663      	mov	r3, ip
 8001632:	18c5      	adds	r5, r0, r3
 8001634:	9b02      	ldr	r3, [sp, #8]
 8001636:	4285      	cmp	r5, r0
 8001638:	4180      	sbcs	r0, r0
 800163a:	469c      	mov	ip, r3
 800163c:	4240      	negs	r0, r0
 800163e:	4464      	add	r4, ip
 8001640:	1824      	adds	r4, r4, r0
 8001642:	2701      	movs	r7, #1
 8001644:	0223      	lsls	r3, r4, #8
 8001646:	d400      	bmi.n	800164a <__aeabi_dsub+0x55a>
 8001648:	e6f5      	b.n	8001436 <__aeabi_dsub+0x346>
 800164a:	2702      	movs	r7, #2
 800164c:	e641      	b.n	80012d2 <__aeabi_dsub+0x1e2>
 800164e:	4663      	mov	r3, ip
 8001650:	1ac5      	subs	r5, r0, r3
 8001652:	42a8      	cmp	r0, r5
 8001654:	4180      	sbcs	r0, r0
 8001656:	9b02      	ldr	r3, [sp, #8]
 8001658:	4240      	negs	r0, r0
 800165a:	1ae4      	subs	r4, r4, r3
 800165c:	2701      	movs	r7, #1
 800165e:	1a24      	subs	r4, r4, r0
 8001660:	e5a8      	b.n	80011b4 <__aeabi_dsub+0xc4>
 8001662:	9d02      	ldr	r5, [sp, #8]
 8001664:	4652      	mov	r2, sl
 8001666:	002b      	movs	r3, r5
 8001668:	3a20      	subs	r2, #32
 800166a:	40d3      	lsrs	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	4653      	mov	r3, sl
 8001670:	2b20      	cmp	r3, #32
 8001672:	d006      	beq.n	8001682 <__aeabi_dsub+0x592>
 8001674:	2240      	movs	r2, #64	@ 0x40
 8001676:	1ad2      	subs	r2, r2, r3
 8001678:	002b      	movs	r3, r5
 800167a:	4093      	lsls	r3, r2
 800167c:	4662      	mov	r2, ip
 800167e:	431a      	orrs	r2, r3
 8001680:	4693      	mov	fp, r2
 8001682:	465d      	mov	r5, fp
 8001684:	1e6b      	subs	r3, r5, #1
 8001686:	419d      	sbcs	r5, r3
 8001688:	430d      	orrs	r5, r1
 800168a:	e615      	b.n	80012b8 <__aeabi_dsub+0x1c8>
 800168c:	0762      	lsls	r2, r4, #29
 800168e:	08c0      	lsrs	r0, r0, #3
 8001690:	4302      	orrs	r2, r0
 8001692:	08e4      	lsrs	r4, r4, #3
 8001694:	e70d      	b.n	80014b2 <__aeabi_dsub+0x3c2>
 8001696:	0011      	movs	r1, r2
 8001698:	0027      	movs	r7, r4
 800169a:	3920      	subs	r1, #32
 800169c:	40cf      	lsrs	r7, r1
 800169e:	2a20      	cmp	r2, #32
 80016a0:	d005      	beq.n	80016ae <__aeabi_dsub+0x5be>
 80016a2:	2140      	movs	r1, #64	@ 0x40
 80016a4:	1a8a      	subs	r2, r1, r2
 80016a6:	4094      	lsls	r4, r2
 80016a8:	0025      	movs	r5, r4
 80016aa:	4305      	orrs	r5, r0
 80016ac:	9503      	str	r5, [sp, #12]
 80016ae:	9d03      	ldr	r5, [sp, #12]
 80016b0:	1e6a      	subs	r2, r5, #1
 80016b2:	4195      	sbcs	r5, r2
 80016b4:	433d      	orrs	r5, r7
 80016b6:	e77d      	b.n	80015b4 <__aeabi_dsub+0x4c4>
 80016b8:	2a00      	cmp	r2, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_dsub+0x5ce>
 80016bc:	e744      	b.n	8001548 <__aeabi_dsub+0x458>
 80016be:	2601      	movs	r6, #1
 80016c0:	400e      	ands	r6, r1
 80016c2:	4663      	mov	r3, ip
 80016c4:	08d9      	lsrs	r1, r3, #3
 80016c6:	9b02      	ldr	r3, [sp, #8]
 80016c8:	075a      	lsls	r2, r3, #29
 80016ca:	430a      	orrs	r2, r1
 80016cc:	08dc      	lsrs	r4, r3, #3
 80016ce:	e6f0      	b.n	80014b2 <__aeabi_dsub+0x3c2>
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d028      	beq.n	8001726 <__aeabi_dsub+0x636>
 80016d4:	4662      	mov	r2, ip
 80016d6:	9f02      	ldr	r7, [sp, #8]
 80016d8:	08c0      	lsrs	r0, r0, #3
 80016da:	433a      	orrs	r2, r7
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dsub+0x5f0>
 80016de:	e6dc      	b.n	800149a <__aeabi_dsub+0x3aa>
 80016e0:	0762      	lsls	r2, r4, #29
 80016e2:	4310      	orrs	r0, r2
 80016e4:	2280      	movs	r2, #128	@ 0x80
 80016e6:	08e4      	lsrs	r4, r4, #3
 80016e8:	0312      	lsls	r2, r2, #12
 80016ea:	4214      	tst	r4, r2
 80016ec:	d009      	beq.n	8001702 <__aeabi_dsub+0x612>
 80016ee:	08fd      	lsrs	r5, r7, #3
 80016f0:	4215      	tst	r5, r2
 80016f2:	d106      	bne.n	8001702 <__aeabi_dsub+0x612>
 80016f4:	4663      	mov	r3, ip
 80016f6:	2601      	movs	r6, #1
 80016f8:	002c      	movs	r4, r5
 80016fa:	08d8      	lsrs	r0, r3, #3
 80016fc:	077b      	lsls	r3, r7, #29
 80016fe:	4318      	orrs	r0, r3
 8001700:	400e      	ands	r6, r1
 8001702:	0f42      	lsrs	r2, r0, #29
 8001704:	00c0      	lsls	r0, r0, #3
 8001706:	08c0      	lsrs	r0, r0, #3
 8001708:	0752      	lsls	r2, r2, #29
 800170a:	4302      	orrs	r2, r0
 800170c:	e601      	b.n	8001312 <__aeabi_dsub+0x222>
 800170e:	4663      	mov	r3, ip
 8001710:	1a1d      	subs	r5, r3, r0
 8001712:	45ac      	cmp	ip, r5
 8001714:	4192      	sbcs	r2, r2
 8001716:	9b02      	ldr	r3, [sp, #8]
 8001718:	4252      	negs	r2, r2
 800171a:	1b1c      	subs	r4, r3, r4
 800171c:	000e      	movs	r6, r1
 800171e:	4688      	mov	r8, r1
 8001720:	2701      	movs	r7, #1
 8001722:	1aa4      	subs	r4, r4, r2
 8001724:	e546      	b.n	80011b4 <__aeabi_dsub+0xc4>
 8001726:	4663      	mov	r3, ip
 8001728:	08d9      	lsrs	r1, r3, #3
 800172a:	9b02      	ldr	r3, [sp, #8]
 800172c:	075a      	lsls	r2, r3, #29
 800172e:	430a      	orrs	r2, r1
 8001730:	08dc      	lsrs	r4, r3, #3
 8001732:	e5ee      	b.n	8001312 <__aeabi_dsub+0x222>
 8001734:	4663      	mov	r3, ip
 8001736:	9c02      	ldr	r4, [sp, #8]
 8001738:	9303      	str	r3, [sp, #12]
 800173a:	e6c7      	b.n	80014cc <__aeabi_dsub+0x3dc>
 800173c:	08c0      	lsrs	r0, r0, #3
 800173e:	2a00      	cmp	r2, #0
 8001740:	d100      	bne.n	8001744 <__aeabi_dsub+0x654>
 8001742:	e6aa      	b.n	800149a <__aeabi_dsub+0x3aa>
 8001744:	0762      	lsls	r2, r4, #29
 8001746:	4310      	orrs	r0, r2
 8001748:	2280      	movs	r2, #128	@ 0x80
 800174a:	08e4      	lsrs	r4, r4, #3
 800174c:	0312      	lsls	r2, r2, #12
 800174e:	4214      	tst	r4, r2
 8001750:	d0d7      	beq.n	8001702 <__aeabi_dsub+0x612>
 8001752:	9f02      	ldr	r7, [sp, #8]
 8001754:	08fd      	lsrs	r5, r7, #3
 8001756:	4215      	tst	r5, r2
 8001758:	d1d3      	bne.n	8001702 <__aeabi_dsub+0x612>
 800175a:	4663      	mov	r3, ip
 800175c:	2601      	movs	r6, #1
 800175e:	08d8      	lsrs	r0, r3, #3
 8001760:	077b      	lsls	r3, r7, #29
 8001762:	002c      	movs	r4, r5
 8001764:	4318      	orrs	r0, r3
 8001766:	400e      	ands	r6, r1
 8001768:	e7cb      	b.n	8001702 <__aeabi_dsub+0x612>
 800176a:	000a      	movs	r2, r1
 800176c:	0027      	movs	r7, r4
 800176e:	3a20      	subs	r2, #32
 8001770:	40d7      	lsrs	r7, r2
 8001772:	2920      	cmp	r1, #32
 8001774:	d005      	beq.n	8001782 <__aeabi_dsub+0x692>
 8001776:	2240      	movs	r2, #64	@ 0x40
 8001778:	1a52      	subs	r2, r2, r1
 800177a:	4094      	lsls	r4, r2
 800177c:	0025      	movs	r5, r4
 800177e:	4305      	orrs	r5, r0
 8001780:	9503      	str	r5, [sp, #12]
 8001782:	9d03      	ldr	r5, [sp, #12]
 8001784:	1e6a      	subs	r2, r5, #1
 8001786:	4195      	sbcs	r5, r2
 8001788:	432f      	orrs	r7, r5
 800178a:	e610      	b.n	80013ae <__aeabi_dsub+0x2be>
 800178c:	0014      	movs	r4, r2
 800178e:	2500      	movs	r5, #0
 8001790:	2200      	movs	r2, #0
 8001792:	e556      	b.n	8001242 <__aeabi_dsub+0x152>
 8001794:	9b02      	ldr	r3, [sp, #8]
 8001796:	4460      	add	r0, ip
 8001798:	4699      	mov	r9, r3
 800179a:	4560      	cmp	r0, ip
 800179c:	4192      	sbcs	r2, r2
 800179e:	444c      	add	r4, r9
 80017a0:	4252      	negs	r2, r2
 80017a2:	0005      	movs	r5, r0
 80017a4:	18a4      	adds	r4, r4, r2
 80017a6:	e74c      	b.n	8001642 <__aeabi_dsub+0x552>
 80017a8:	001a      	movs	r2, r3
 80017aa:	001c      	movs	r4, r3
 80017ac:	432a      	orrs	r2, r5
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dsub+0x6c2>
 80017b0:	e6b3      	b.n	800151a <__aeabi_dsub+0x42a>
 80017b2:	e6c9      	b.n	8001548 <__aeabi_dsub+0x458>
 80017b4:	2480      	movs	r4, #128	@ 0x80
 80017b6:	2600      	movs	r6, #0
 80017b8:	0324      	lsls	r4, r4, #12
 80017ba:	e5ae      	b.n	800131a <__aeabi_dsub+0x22a>
 80017bc:	2120      	movs	r1, #32
 80017be:	2500      	movs	r5, #0
 80017c0:	1a09      	subs	r1, r1, r0
 80017c2:	e517      	b.n	80011f4 <__aeabi_dsub+0x104>
 80017c4:	2200      	movs	r2, #0
 80017c6:	2500      	movs	r5, #0
 80017c8:	4c0b      	ldr	r4, [pc, #44]	@ (80017f8 <__aeabi_dsub+0x708>)
 80017ca:	e53a      	b.n	8001242 <__aeabi_dsub+0x152>
 80017cc:	2d00      	cmp	r5, #0
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dsub+0x6e2>
 80017d0:	e5f6      	b.n	80013c0 <__aeabi_dsub+0x2d0>
 80017d2:	464b      	mov	r3, r9
 80017d4:	1bda      	subs	r2, r3, r7
 80017d6:	4692      	mov	sl, r2
 80017d8:	2f00      	cmp	r7, #0
 80017da:	d100      	bne.n	80017de <__aeabi_dsub+0x6ee>
 80017dc:	e66f      	b.n	80014be <__aeabi_dsub+0x3ce>
 80017de:	2a38      	cmp	r2, #56	@ 0x38
 80017e0:	dc05      	bgt.n	80017ee <__aeabi_dsub+0x6fe>
 80017e2:	2680      	movs	r6, #128	@ 0x80
 80017e4:	0436      	lsls	r6, r6, #16
 80017e6:	4334      	orrs	r4, r6
 80017e8:	4688      	mov	r8, r1
 80017ea:	000e      	movs	r6, r1
 80017ec:	e6d1      	b.n	8001592 <__aeabi_dsub+0x4a2>
 80017ee:	4688      	mov	r8, r1
 80017f0:	000e      	movs	r6, r1
 80017f2:	2501      	movs	r5, #1
 80017f4:	e6de      	b.n	80015b4 <__aeabi_dsub+0x4c4>
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	000007ff 	.word	0x000007ff
 80017fc:	ff7fffff 	.word	0xff7fffff
 8001800:	000007fe 	.word	0x000007fe
 8001804:	2d00      	cmp	r5, #0
 8001806:	d100      	bne.n	800180a <__aeabi_dsub+0x71a>
 8001808:	e668      	b.n	80014dc <__aeabi_dsub+0x3ec>
 800180a:	464b      	mov	r3, r9
 800180c:	1bd9      	subs	r1, r3, r7
 800180e:	2f00      	cmp	r7, #0
 8001810:	d101      	bne.n	8001816 <__aeabi_dsub+0x726>
 8001812:	468a      	mov	sl, r1
 8001814:	e5a7      	b.n	8001366 <__aeabi_dsub+0x276>
 8001816:	2701      	movs	r7, #1
 8001818:	2938      	cmp	r1, #56	@ 0x38
 800181a:	dd00      	ble.n	800181e <__aeabi_dsub+0x72e>
 800181c:	e5c7      	b.n	80013ae <__aeabi_dsub+0x2be>
 800181e:	2280      	movs	r2, #128	@ 0x80
 8001820:	0412      	lsls	r2, r2, #16
 8001822:	4314      	orrs	r4, r2
 8001824:	e5af      	b.n	8001386 <__aeabi_dsub+0x296>
 8001826:	46c0      	nop			@ (mov r8, r8)

08001828 <__aeabi_d2iz>:
 8001828:	000b      	movs	r3, r1
 800182a:	0002      	movs	r2, r0
 800182c:	b570      	push	{r4, r5, r6, lr}
 800182e:	4d16      	ldr	r5, [pc, #88]	@ (8001888 <__aeabi_d2iz+0x60>)
 8001830:	030c      	lsls	r4, r1, #12
 8001832:	b082      	sub	sp, #8
 8001834:	0049      	lsls	r1, r1, #1
 8001836:	2000      	movs	r0, #0
 8001838:	9200      	str	r2, [sp, #0]
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	0b24      	lsrs	r4, r4, #12
 800183e:	0d49      	lsrs	r1, r1, #21
 8001840:	0fde      	lsrs	r6, r3, #31
 8001842:	42a9      	cmp	r1, r5
 8001844:	dd04      	ble.n	8001850 <__aeabi_d2iz+0x28>
 8001846:	4811      	ldr	r0, [pc, #68]	@ (800188c <__aeabi_d2iz+0x64>)
 8001848:	4281      	cmp	r1, r0
 800184a:	dd03      	ble.n	8001854 <__aeabi_d2iz+0x2c>
 800184c:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <__aeabi_d2iz+0x68>)
 800184e:	18f0      	adds	r0, r6, r3
 8001850:	b002      	add	sp, #8
 8001852:	bd70      	pop	{r4, r5, r6, pc}
 8001854:	2080      	movs	r0, #128	@ 0x80
 8001856:	0340      	lsls	r0, r0, #13
 8001858:	4320      	orrs	r0, r4
 800185a:	4c0e      	ldr	r4, [pc, #56]	@ (8001894 <__aeabi_d2iz+0x6c>)
 800185c:	1a64      	subs	r4, r4, r1
 800185e:	2c1f      	cmp	r4, #31
 8001860:	dd08      	ble.n	8001874 <__aeabi_d2iz+0x4c>
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <__aeabi_d2iz+0x70>)
 8001864:	1a5b      	subs	r3, r3, r1
 8001866:	40d8      	lsrs	r0, r3
 8001868:	0003      	movs	r3, r0
 800186a:	4258      	negs	r0, r3
 800186c:	2e00      	cmp	r6, #0
 800186e:	d1ef      	bne.n	8001850 <__aeabi_d2iz+0x28>
 8001870:	0018      	movs	r0, r3
 8001872:	e7ed      	b.n	8001850 <__aeabi_d2iz+0x28>
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <__aeabi_d2iz+0x74>)
 8001876:	9a00      	ldr	r2, [sp, #0]
 8001878:	469c      	mov	ip, r3
 800187a:	0003      	movs	r3, r0
 800187c:	4461      	add	r1, ip
 800187e:	408b      	lsls	r3, r1
 8001880:	40e2      	lsrs	r2, r4
 8001882:	4313      	orrs	r3, r2
 8001884:	e7f1      	b.n	800186a <__aeabi_d2iz+0x42>
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	000003fe 	.word	0x000003fe
 800188c:	0000041d 	.word	0x0000041d
 8001890:	7fffffff 	.word	0x7fffffff
 8001894:	00000433 	.word	0x00000433
 8001898:	00000413 	.word	0x00000413
 800189c:	fffffbed 	.word	0xfffffbed

080018a0 <__aeabi_ui2d>:
 80018a0:	b510      	push	{r4, lr}
 80018a2:	1e04      	subs	r4, r0, #0
 80018a4:	d010      	beq.n	80018c8 <__aeabi_ui2d+0x28>
 80018a6:	f000 f81f 	bl	80018e8 <__clzsi2>
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <__aeabi_ui2d+0x44>)
 80018ac:	1a1b      	subs	r3, r3, r0
 80018ae:	055b      	lsls	r3, r3, #21
 80018b0:	0d5b      	lsrs	r3, r3, #21
 80018b2:	280a      	cmp	r0, #10
 80018b4:	dc0f      	bgt.n	80018d6 <__aeabi_ui2d+0x36>
 80018b6:	220b      	movs	r2, #11
 80018b8:	0021      	movs	r1, r4
 80018ba:	1a12      	subs	r2, r2, r0
 80018bc:	40d1      	lsrs	r1, r2
 80018be:	3015      	adds	r0, #21
 80018c0:	030a      	lsls	r2, r1, #12
 80018c2:	4084      	lsls	r4, r0
 80018c4:	0b12      	lsrs	r2, r2, #12
 80018c6:	e001      	b.n	80018cc <__aeabi_ui2d+0x2c>
 80018c8:	2300      	movs	r3, #0
 80018ca:	2200      	movs	r2, #0
 80018cc:	051b      	lsls	r3, r3, #20
 80018ce:	4313      	orrs	r3, r2
 80018d0:	0020      	movs	r0, r4
 80018d2:	0019      	movs	r1, r3
 80018d4:	bd10      	pop	{r4, pc}
 80018d6:	0022      	movs	r2, r4
 80018d8:	380b      	subs	r0, #11
 80018da:	4082      	lsls	r2, r0
 80018dc:	0312      	lsls	r2, r2, #12
 80018de:	2400      	movs	r4, #0
 80018e0:	0b12      	lsrs	r2, r2, #12
 80018e2:	e7f3      	b.n	80018cc <__aeabi_ui2d+0x2c>
 80018e4:	0000041e 	.word	0x0000041e

080018e8 <__clzsi2>:
 80018e8:	211c      	movs	r1, #28
 80018ea:	2301      	movs	r3, #1
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	4298      	cmp	r0, r3
 80018f0:	d301      	bcc.n	80018f6 <__clzsi2+0xe>
 80018f2:	0c00      	lsrs	r0, r0, #16
 80018f4:	3910      	subs	r1, #16
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	4298      	cmp	r0, r3
 80018fa:	d301      	bcc.n	8001900 <__clzsi2+0x18>
 80018fc:	0a00      	lsrs	r0, r0, #8
 80018fe:	3908      	subs	r1, #8
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	4298      	cmp	r0, r3
 8001904:	d301      	bcc.n	800190a <__clzsi2+0x22>
 8001906:	0900      	lsrs	r0, r0, #4
 8001908:	3904      	subs	r1, #4
 800190a:	a202      	add	r2, pc, #8	@ (adr r2, 8001914 <__clzsi2+0x2c>)
 800190c:	5c10      	ldrb	r0, [r2, r0]
 800190e:	1840      	adds	r0, r0, r1
 8001910:	4770      	bx	lr
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	02020304 	.word	0x02020304
 8001918:	01010101 	.word	0x01010101
	...

08001924 <measure_distance>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t myTime = 0;
bool isTimerActive = false;

uint16_t measure_distance(GPIO_TypeDef* TRIG_GPIO_Port, uint16_t TRIG_Pin, GPIO_TypeDef* ECHO_GPIO_Port, uint16_t ECHO_Pin, TIM_HandleTypeDef tim) {
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	0008      	movs	r0, r1
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	0019      	movs	r1, r3
 8001932:	240a      	movs	r4, #10
 8001934:	193b      	adds	r3, r7, r4
 8001936:	1c02      	adds	r2, r0, #0
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	2308      	movs	r3, #8
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	1c0a      	adds	r2, r1, #0
 8001940:	801a      	strh	r2, [r3, #0]
	uint32_t pMillis;
	uint32_t value1 = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
	uint32_t value2 = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
	uint16_t distance  = 0; //cm
 800194a:	2316      	movs	r3, #22
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	2200      	movs	r2, #0
 8001950:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001952:	193b      	adds	r3, r7, r4
 8001954:	8819      	ldrh	r1, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	0018      	movs	r0, r3
 800195c:	f001 f885 	bl	8002a6a <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001960:	4b38      	ldr	r3, [pc, #224]	@ (8001a44 <measure_distance+0x120>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&tim) < 10);  // wait for 10 us
 8001968:	46c0      	nop			@ (mov r8, r8)
 800196a:	2330      	movs	r3, #48	@ 0x30
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	2b09      	cmp	r3, #9
 8001974:	d9f9      	bls.n	800196a <measure_distance+0x46>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001976:	230a      	movs	r3, #10
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	8819      	ldrh	r1, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	0018      	movs	r0, r3
 8001982:	f001 f872 	bl	8002a6a <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001986:	f000 fdcf 	bl	8002528 <HAL_GetTick>
 800198a:	0003      	movs	r3, r0
 800198c:	613b      	str	r3, [r7, #16]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	2308      	movs	r3, #8
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	881a      	ldrh	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0011      	movs	r1, r2
 800199a:	0018      	movs	r0, r3
 800199c:	f001 f848 	bl	8002a30 <HAL_GPIO_ReadPin>
 80019a0:	1e03      	subs	r3, r0, #0
 80019a2:	d107      	bne.n	80019b4 <measure_distance+0x90>
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	330a      	adds	r3, #10
 80019a8:	001c      	movs	r4, r3
 80019aa:	f000 fdbd 	bl	8002528 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	429c      	cmp	r4, r3
 80019b2:	d8ed      	bhi.n	8001990 <measure_distance+0x6c>
	value1 = __HAL_TIM_GET_COUNTER (&tim);
 80019b4:	2330      	movs	r3, #48	@ 0x30
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	61fb      	str	r3, [r7, #28]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80019be:	f000 fdb3 	bl	8002528 <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	2308      	movs	r3, #8
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	881a      	ldrh	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	0011      	movs	r1, r2
 80019d2:	0018      	movs	r0, r3
 80019d4:	f001 f82c 	bl	8002a30 <HAL_GPIO_ReadPin>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d007      	beq.n	80019ec <measure_distance+0xc8>
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3332      	adds	r3, #50	@ 0x32
 80019e0:	001c      	movs	r4, r3
 80019e2:	f000 fda1 	bl	8002528 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	429c      	cmp	r4, r3
 80019ea:	d8ed      	bhi.n	80019c8 <measure_distance+0xa4>
	value2 = __HAL_TIM_GET_COUNTER (&tim);
 80019ec:	2330      	movs	r3, #48	@ 0x30
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	61bb      	str	r3, [r7, #24]

	distance = (value2 - value1) * 0.034 / 2;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff ff4f 	bl	80018a0 <__aeabi_ui2d>
 8001a02:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <measure_distance+0x124>)
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <measure_distance+0x128>)
 8001a06:	f7ff f8ab 	bl	8000b60 <__aeabi_dmul>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	000b      	movs	r3, r1
 8001a0e:	0010      	movs	r0, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	2200      	movs	r2, #0
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	05db      	lsls	r3, r3, #23
 8001a18:	f7fe fc5e 	bl	80002d8 <__aeabi_ddiv>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	000b      	movs	r3, r1
 8001a20:	2516      	movs	r5, #22
 8001a22:	197c      	adds	r4, r7, r5
 8001a24:	0010      	movs	r0, r2
 8001a26:	0019      	movs	r1, r3
 8001a28:	f7fe fc38 	bl	800029c <__aeabi_d2uiz>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	8023      	strh	r3, [r4, #0]
	HAL_Delay(50);
 8001a30:	2032      	movs	r0, #50	@ 0x32
 8001a32:	f000 fd83 	bl	800253c <HAL_Delay>

	return distance;
 8001a36:	197b      	adds	r3, r7, r5
 8001a38:	881b      	ldrh	r3, [r3, #0]
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b008      	add	sp, #32
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	20000028 	.word	0x20000028
 8001a48:	b020c49c 	.word	0xb020c49c
 8001a4c:	3fa16872 	.word	0x3fa16872

08001a50 <goForward>:

// CAR MOVEMENT
void goForward() {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_MOTOR_POS_GPIO_Port, RIGHT_MOTOR_POS_Pin, 1);
 8001a54:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <goForward+0x40>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	2120      	movs	r1, #32
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f001 f805 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_NEG_GPIO_Port, RIGHT_MOTOR_NEG_Pin, 0);
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <goForward+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	2140      	movs	r1, #64	@ 0x40
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 ffff 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_POS_GPIO_Port, LEFT_MOTOR_POS_Pin, 1);
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4807      	ldr	r0, [pc, #28]	@ (8001a90 <goForward+0x40>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	0019      	movs	r1, r3
 8001a76:	f000 fff8 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_NEG_GPIO_Port, LEFT_MOTOR_NEG_Pin, 0);
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4804      	ldr	r0, [pc, #16]	@ (8001a90 <goForward+0x40>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	0019      	movs	r1, r3
 8001a84:	f000 fff1 	bl	8002a6a <HAL_GPIO_WritePin>
}
 8001a88:	46c0      	nop			@ (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	48000800 	.word	0x48000800

08001a94 <goBackwards>:

void goBackwards() {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_MOTOR_POS_GPIO_Port, RIGHT_MOTOR_POS_Pin, 0);
 8001a98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <goBackwards+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 ffe3 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_NEG_GPIO_Port, RIGHT_MOTOR_NEG_Pin, 1);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <goBackwards+0x40>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2140      	movs	r1, #64	@ 0x40
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 ffdd 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_POS_GPIO_Port, LEFT_MOTOR_POS_Pin, 0);
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <goBackwards+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	0019      	movs	r1, r3
 8001aba:	f000 ffd6 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_NEG_GPIO_Port, LEFT_MOTOR_NEG_Pin, 1);
 8001abe:	2380      	movs	r3, #128	@ 0x80
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4804      	ldr	r0, [pc, #16]	@ (8001ad4 <goBackwards+0x40>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	f000 ffcf 	bl	8002a6a <HAL_GPIO_WritePin>
}
 8001acc:	46c0      	nop			@ (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	48000800 	.word	0x48000800

08001ad8 <turnRight>:

void turnRight() {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_MOTOR_POS_GPIO_Port, RIGHT_MOTOR_POS_Pin, 1);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <turnRight+0x40>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 ffc1 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_NEG_GPIO_Port, RIGHT_MOTOR_NEG_Pin, 0);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <turnRight+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	2140      	movs	r1, #64	@ 0x40
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 ffbb 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_POS_GPIO_Port, LEFT_MOTOR_POS_Pin, 0);
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4807      	ldr	r0, [pc, #28]	@ (8001b18 <turnRight+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	0019      	movs	r1, r3
 8001afe:	f000 ffb4 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_NEG_GPIO_Port, LEFT_MOTOR_NEG_Pin, 1);
 8001b02:	2380      	movs	r3, #128	@ 0x80
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <turnRight+0x40>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	f000 ffad 	bl	8002a6a <HAL_GPIO_WritePin>
}
 8001b10:	46c0      	nop			@ (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	48000800 	.word	0x48000800

08001b1c <turnLeft>:

void turnLeft() {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_MOTOR_POS_GPIO_Port, RIGHT_MOTOR_POS_Pin, 0);
 8001b20:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <turnLeft+0x40>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	2120      	movs	r1, #32
 8001b26:	0018      	movs	r0, r3
 8001b28:	f000 ff9f 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_NEG_GPIO_Port, RIGHT_MOTOR_NEG_Pin, 1);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <turnLeft+0x40>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2140      	movs	r1, #64	@ 0x40
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 ff99 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_POS_GPIO_Port, LEFT_MOTOR_POS_Pin, 1);
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4807      	ldr	r0, [pc, #28]	@ (8001b5c <turnLeft+0x40>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	0019      	movs	r1, r3
 8001b42:	f000 ff92 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_NEG_GPIO_Port, LEFT_MOTOR_NEG_Pin, 0);
 8001b46:	2380      	movs	r3, #128	@ 0x80
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <turnLeft+0x40>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	0019      	movs	r1, r3
 8001b50:	f000 ff8b 	bl	8002a6a <HAL_GPIO_WritePin>
}
 8001b54:	46c0      	nop			@ (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	48000800 	.word	0x48000800

08001b60 <stop>:

void stop() {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_MOTOR_POS_GPIO_Port, RIGHT_MOTOR_POS_Pin, 0);
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <stop+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	2120      	movs	r1, #32
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 ff7d 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_NEG_GPIO_Port, RIGHT_MOTOR_NEG_Pin, 0);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <stop+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	2140      	movs	r1, #64	@ 0x40
 8001b76:	0018      	movs	r0, r3
 8001b78:	f000 ff77 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_POS_GPIO_Port, LEFT_MOTOR_POS_Pin, 0);
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4807      	ldr	r0, [pc, #28]	@ (8001ba0 <stop+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	0019      	movs	r1, r3
 8001b86:	f000 ff70 	bl	8002a6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_NEG_GPIO_Port, LEFT_MOTOR_NEG_Pin, 0);
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <stop+0x40>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	0019      	movs	r1, r3
 8001b94:	f000 ff69 	bl	8002a6a <HAL_GPIO_WritePin>
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	48000800 	.word	0x48000800

08001ba4 <reset_time>:

void reset_time() {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	myTime = 0;
 8001ba8:	4b02      	ldr	r3, [pc, #8]	@ (8001bb4 <reset_time+0x10>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200000b8 	.word	0x200000b8

08001bb8 <start_timer>:

void start_timer() {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	isTimerActive = true;
 8001bbc:	4b02      	ldr	r3, [pc, #8]	@ (8001bc8 <start_timer+0x10>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200000bc 	.word	0x200000bc

08001bcc <stop_timer>:

void stop_timer() {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	isTimerActive = false;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	@ (8001bdc <stop_timer+0x10>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
}
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200000bc 	.word	0x200000bc

08001be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be2:	46ce      	mov	lr, r9
 8001be4:	4647      	mov	r7, r8
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b09b      	sub	sp, #108	@ 0x6c
 8001bea:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bec:	f000 fc42 	bl	8002474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf0:	f000 f9e6 	bl	8001fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf4:	f000 face 	bl	8002194 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001bf8:	f000 fa76 	bl	80020e8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001bfc:	f000 fa1c 	bl	8002038 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001c00:	4b67      	ldr	r3, [pc, #412]	@ (8001da0 <main+0x1c0>)
 8001c02:	0018      	movs	r0, r3
 8001c04:	f001 fcba 	bl	800357c <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim1);
 8001c08:	4b66      	ldr	r3, [pc, #408]	@ (8001da4 <main+0x1c4>)
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f001 fc6c 	bl	80034e8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8001c10:	4b64      	ldr	r3, [pc, #400]	@ (8001da4 <main+0x1c4>)
 8001c12:	0018      	movs	r0, r3
 8001c14:	f001 fc68 	bl	80034e8 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(SIDE_TRIG_GPIO_Port, SIDE_TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001c18:	4b63      	ldr	r3, [pc, #396]	@ (8001da8 <main+0x1c8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f000 ff23 	bl	8002a6a <HAL_GPIO_WritePin>

  uint16_t sideDistanceReference = measure_distance(SIDE_TRIG_GPIO_Port, SIDE_TRIG_Pin, SIDE_ECHO_GPIO_Port, SIDE_ECHO_Pin, htim1);
 8001c24:	230e      	movs	r3, #14
 8001c26:	18fc      	adds	r4, r7, r3
 8001c28:	4e5f      	ldr	r6, [pc, #380]	@ (8001da8 <main+0x1c8>)
 8001c2a:	4d5f      	ldr	r5, [pc, #380]	@ (8001da8 <main+0x1c8>)
 8001c2c:	4a5d      	ldr	r2, [pc, #372]	@ (8001da4 <main+0x1c4>)
 8001c2e:	466b      	mov	r3, sp
 8001c30:	0018      	movs	r0, r3
 8001c32:	0011      	movs	r1, r2
 8001c34:	2348      	movs	r3, #72	@ 0x48
 8001c36:	001a      	movs	r2, r3
 8001c38:	f002 f896 	bl	8003d68 <memcpy>
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	0032      	movs	r2, r6
 8001c40:	2104      	movs	r1, #4
 8001c42:	0028      	movs	r0, r5
 8001c44:	f7ff fe6e 	bl	8001924 <measure_distance>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	8023      	strh	r3, [r4, #0]

  uint32_t timeDistance = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]

  bool isGoBackwardsDone = false;
 8001c50:	231b      	movs	r3, #27
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]

  bool isParkDone = false;
 8001c58:	231a      	movs	r3, #26
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
  bool isParking = false;
 8001c60:	2319      	movs	r3, #25
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
  bool isDetectParkingSpot = false;
 8001c68:	2318      	movs	r3, #24
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]

  bool isStartTurningLeftTimeStarted = false;
 8001c70:	2317      	movs	r3, #23
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
  bool isStartTurningLeft = false;
 8001c78:	2316      	movs	r3, #22
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
  bool isFinishTurningLeft = false;
 8001c80:	2315      	movs	r3, #21
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]

  bool isStartTurningRightTimeStarted = false;
 8001c88:	2314      	movs	r3, #20
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
  bool isStartTurningRight = false;
 8001c90:	2313      	movs	r3, #19
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
  bool isFinishTurningRight = false;
 8001c98:	2312      	movs	r3, #18
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]

  bool isCarAlignStarted = false;
 8001ca0:	2311      	movs	r3, #17
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
  bool isCarAligned = false;
 8001ca8:	2310      	movs	r3, #16
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]

  uint32_t carRotateTime = 688;
 8001cb0:	23ac      	movs	r3, #172	@ 0xac
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!isParkDone) {
 8001cb6:	231a      	movs	r3, #26
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4053      	eors	r3, r2
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f7      	beq.n	8001cb6 <main+0xd6>
		  if (!isParking) {
 8001cc6:	2319      	movs	r3, #25
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4053      	eors	r3, r2
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d100      	bne.n	8001cd8 <main+0xf8>
 8001cd6:	e06f      	b.n	8001db8 <main+0x1d8>
			  goForward();
 8001cd8:	f7ff feba 	bl	8001a50 <goForward>
			  uint16_t sideDist = measure_distance(SIDE_TRIG_GPIO_Port, SIDE_TRIG_Pin, SIDE_ECHO_GPIO_Port, SIDE_ECHO_Pin, htim1);
 8001cdc:	1d3c      	adds	r4, r7, #4
 8001cde:	4e32      	ldr	r6, [pc, #200]	@ (8001da8 <main+0x1c8>)
 8001ce0:	4d31      	ldr	r5, [pc, #196]	@ (8001da8 <main+0x1c8>)
 8001ce2:	4a30      	ldr	r2, [pc, #192]	@ (8001da4 <main+0x1c4>)
 8001ce4:	466b      	mov	r3, sp
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	0011      	movs	r1, r2
 8001cea:	2348      	movs	r3, #72	@ 0x48
 8001cec:	001a      	movs	r2, r3
 8001cee:	f002 f83b 	bl	8003d68 <memcpy>
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	0032      	movs	r2, r6
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	0028      	movs	r0, r5
 8001cfa:	f7ff fe13 	bl	8001924 <measure_distance>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	8023      	strh	r3, [r4, #0]

			  // calculate gap
			  uint16_t sideDistanceGap = sideDist - sideDistanceReference;
 8001d02:	1cbb      	adds	r3, r7, #2
 8001d04:	1d39      	adds	r1, r7, #4
 8001d06:	220e      	movs	r2, #14
 8001d08:	18ba      	adds	r2, r7, r2
 8001d0a:	8809      	ldrh	r1, [r1, #0]
 8001d0c:	8812      	ldrh	r2, [r2, #0]
 8001d0e:	1a8a      	subs	r2, r1, r2
 8001d10:	801a      	strh	r2, [r3, #0]
			  // check is there enough gap for parking
			  if (sideDistanceGap >= 10 && sideDistanceGap < 10000 && !isDetectParkingSpot) {
 8001d12:	1cbb      	adds	r3, r7, #2
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	2b09      	cmp	r3, #9
 8001d18:	d911      	bls.n	8001d3e <main+0x15e>
 8001d1a:	1cbb      	adds	r3, r7, #2
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	4a23      	ldr	r2, [pc, #140]	@ (8001dac <main+0x1cc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d80c      	bhi.n	8001d3e <main+0x15e>
 8001d24:	2118      	movs	r1, #24
 8001d26:	187b      	adds	r3, r7, r1
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4053      	eors	r3, r2
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <main+0x15e>
				  isDetectParkingSpot = true;
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
				  start_timer();
 8001d3a:	f7ff ff3d 	bl	8001bb8 <start_timer>
			  }

			  if (isDetectParkingSpot) {
 8001d3e:	2318      	movs	r3, #24
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0b6      	beq.n	8001cb6 <main+0xd6>
				  if (sideDistanceGap <= 7 || sideDistanceGap >= 65000) {
 8001d48:	1cbb      	adds	r3, r7, #2
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	2b07      	cmp	r3, #7
 8001d4e:	d904      	bls.n	8001d5a <main+0x17a>
 8001d50:	1cbb      	adds	r3, r7, #2
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	4a16      	ldr	r2, [pc, #88]	@ (8001db0 <main+0x1d0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d9ad      	bls.n	8001cb6 <main+0xd6>
					  stop_timer();
 8001d5a:	f7ff ff37 	bl	8001bcc <stop_timer>
					  if (myTime >= 300) {
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <main+0x1d4>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2396      	movs	r3, #150	@ 0x96
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d312      	bcc.n	8001d90 <main+0x1b0>
						  stop();
 8001d6a:	f7ff fef9 	bl	8001b60 <stop>
						  timeDistance = myTime;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <main+0x1d4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61fb      	str	r3, [r7, #28]
						  isParking = true;
 8001d74:	2319      	movs	r3, #25
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
						  HAL_Delay(1000);
 8001d7c:	23fa      	movs	r3, #250	@ 0xfa
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	0018      	movs	r0, r3
 8001d82:	f000 fbdb 	bl	800253c <HAL_Delay>
						  reset_time();
 8001d86:	f7ff ff0d 	bl	8001ba4 <reset_time>
						  start_timer();
 8001d8a:	f7ff ff15 	bl	8001bb8 <start_timer>
 8001d8e:	e792      	b.n	8001cb6 <main+0xd6>
					  }
					  else {
						  isDetectParkingSpot = false;
 8001d90:	2318      	movs	r3, #24
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
						  reset_time();
 8001d98:	f7ff ff04 	bl	8001ba4 <reset_time>
 8001d9c:	e78b      	b.n	8001cb6 <main+0xd6>
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	20000070 	.word	0x20000070
 8001da4:	20000028 	.word	0x20000028
 8001da8:	48000800 	.word	0x48000800
 8001dac:	0000270f 	.word	0x0000270f
 8001db0:	0000fde7 	.word	0x0000fde7
 8001db4:	200000b8 	.word	0x200000b8
				  }
			  }

		  }
		  else {
			  if (!isGoBackwardsDone) {
 8001db8:	231b      	movs	r3, #27
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4053      	eors	r3, r2
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <main+0x1ec>
				  goBackwards();
 8001dc8:	f7ff fe64 	bl	8001a94 <goBackwards>
			  }
			  if (myTime >= timeDistance && !isGoBackwardsDone && (!isStartTurningLeft || !isStartTurningRight)) {
 8001dcc:	4b77      	ldr	r3, [pc, #476]	@ (8001fac <main+0x3cc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d82a      	bhi.n	8001e2c <main+0x24c>
 8001dd6:	231b      	movs	r3, #27
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4053      	eors	r3, r2
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d022      	beq.n	8001e2c <main+0x24c>
 8001de6:	2316      	movs	r3, #22
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4053      	eors	r3, r2
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d107      	bne.n	8001e06 <main+0x226>
 8001df6:	2313      	movs	r3, #19
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4053      	eors	r3, r2
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d012      	beq.n	8001e2c <main+0x24c>
				  stop();
 8001e06:	f7ff feab 	bl	8001b60 <stop>
				  stop_timer();
 8001e0a:	f7ff fedf 	bl	8001bcc <stop_timer>
				  reset_time();
 8001e0e:	f7ff fec9 	bl	8001ba4 <reset_time>
				  HAL_Delay(1000);
 8001e12:	23fa      	movs	r3, #250	@ 0xfa
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	0018      	movs	r0, r3
 8001e18:	f000 fb90 	bl	800253c <HAL_Delay>
				  isStartTurningLeft = true;
 8001e1c:	2316      	movs	r3, #22
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
				  isGoBackwardsDone = true;
 8001e24:	231b      	movs	r3, #27
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
			  }
			  if (!isStartTurningLeftTimeStarted && isStartTurningLeft) {
 8001e2c:	2417      	movs	r4, #23
 8001e2e:	193b      	adds	r3, r7, r4
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4053      	eors	r3, r2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d009      	beq.n	8001e50 <main+0x270>
 8001e3c:	2316      	movs	r3, #22
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d004      	beq.n	8001e50 <main+0x270>
				  start_timer();
 8001e46:	f7ff feb7 	bl	8001bb8 <start_timer>
				  isStartTurningLeftTimeStarted = true;
 8001e4a:	193b      	adds	r3, r7, r4
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
			  }
			  if (isStartTurningLeft && !isFinishTurningLeft) {
 8001e50:	2416      	movs	r4, #22
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01e      	beq.n	8001e98 <main+0x2b8>
 8001e5a:	2515      	movs	r5, #21
 8001e5c:	197b      	adds	r3, r7, r5
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	4053      	eors	r3, r2
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d016      	beq.n	8001e98 <main+0x2b8>
				  turnLeft();
 8001e6a:	f7ff fe57 	bl	8001b1c <turnLeft>
				  if (myTime >= carRotateTime) {
 8001e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001fac <main+0x3cc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d80f      	bhi.n	8001e98 <main+0x2b8>
					  isStartTurningLeft = false;
 8001e78:	193b      	adds	r3, r7, r4
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
					  isFinishTurningLeft = true;
 8001e7e:	197b      	adds	r3, r7, r5
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
					  stop();
 8001e84:	f7ff fe6c 	bl	8001b60 <stop>
					  stop_timer();
 8001e88:	f7ff fea0 	bl	8001bcc <stop_timer>
					  reset_time();
 8001e8c:	f7ff fe8a 	bl	8001ba4 <reset_time>
					  isCarAlignStarted = true;
 8001e90:	2311      	movs	r3, #17
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  if (isCarAlignStarted && !isCarAligned) {
 8001e98:	2311      	movs	r3, #17
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d039      	beq.n	8001f16 <main+0x336>
 8001ea2:	2210      	movs	r2, #16
 8001ea4:	18bb      	adds	r3, r7, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4053      	eors	r3, r2
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d031      	beq.n	8001f16 <main+0x336>
				  goBackwards();
 8001eb2:	f7ff fdef 	bl	8001a94 <goBackwards>

				  uint16_t frontDist = measure_distance(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, FRONT_ECHO_GPIO_Port, FRONT_ECHO_Pin, htim1);
 8001eb6:	1dbc      	adds	r4, r7, #6
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	00de      	lsls	r6, r3, #3
 8001ebc:	493c      	ldr	r1, [pc, #240]	@ (8001fb0 <main+0x3d0>)
 8001ebe:	4689      	mov	r9, r1
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	011d      	lsls	r5, r3, #4
 8001ec4:	493a      	ldr	r1, [pc, #232]	@ (8001fb0 <main+0x3d0>)
 8001ec6:	4688      	mov	r8, r1
 8001ec8:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb4 <main+0x3d4>)
 8001eca:	466b      	mov	r3, sp
 8001ecc:	0018      	movs	r0, r3
 8001ece:	0011      	movs	r1, r2
 8001ed0:	2348      	movs	r3, #72	@ 0x48
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	f001 ff48 	bl	8003d68 <memcpy>
 8001ed8:	0033      	movs	r3, r6
 8001eda:	464a      	mov	r2, r9
 8001edc:	0029      	movs	r1, r5
 8001ede:	4640      	mov	r0, r8
 8001ee0:	f7ff fd20 	bl	8001924 <measure_distance>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	8023      	strh	r3, [r4, #0]

				  if (frontDist <= 5) {
 8001ee8:	1dbb      	adds	r3, r7, #6
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d812      	bhi.n	8001f16 <main+0x336>
					  isCarAligned = true;
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	18bb      	adds	r3, r7, r2
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
					  isCarAlignStarted = false;
 8001ef8:	2311      	movs	r3, #17
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
					  stop();
 8001f00:	f7ff fe2e 	bl	8001b60 <stop>

					  HAL_Delay(1000);
 8001f04:	23fa      	movs	r3, #250	@ 0xfa
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 fb17 	bl	800253c <HAL_Delay>
					  isStartTurningRight = true;
 8001f0e:	2313      	movs	r3, #19
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  if (isStartTurningRight && !isStartTurningRightTimeStarted) {
 8001f16:	2313      	movs	r3, #19
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00c      	beq.n	8001f3a <main+0x35a>
 8001f20:	2414      	movs	r4, #20
 8001f22:	193b      	adds	r3, r7, r4
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4053      	eors	r3, r2
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <main+0x35a>
				  start_timer();
 8001f30:	f7ff fe42 	bl	8001bb8 <start_timer>
				  isStartTurningRightTimeStarted = true;
 8001f34:	193b      	adds	r3, r7, r4
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
			  }
			  if (isStartTurningRight && !isFinishTurningRight) {
 8001f3a:	2613      	movs	r6, #19
 8001f3c:	19bb      	adds	r3, r7, r6
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d100      	bne.n	8001f46 <main+0x366>
 8001f44:	e6b7      	b.n	8001cb6 <main+0xd6>
 8001f46:	2312      	movs	r3, #18
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4053      	eors	r3, r2
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d100      	bne.n	8001f58 <main+0x378>
 8001f56:	e6ae      	b.n	8001cb6 <main+0xd6>
				  turnRight();
 8001f58:	f7ff fdbe 	bl	8001ad8 <turnRight>
				  if (myTime >= carRotateTime * 0.7) {
 8001f5c:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <main+0x3cc>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7ff fc9d 	bl	80018a0 <__aeabi_ui2d>
 8001f66:	0004      	movs	r4, r0
 8001f68:	000d      	movs	r5, r1
 8001f6a:	68b8      	ldr	r0, [r7, #8]
 8001f6c:	f7ff fc98 	bl	80018a0 <__aeabi_ui2d>
 8001f70:	4a11      	ldr	r2, [pc, #68]	@ (8001fb8 <main+0x3d8>)
 8001f72:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <main+0x3dc>)
 8001f74:	f7fe fdf4 	bl	8000b60 <__aeabi_dmul>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	000b      	movs	r3, r1
 8001f7c:	0020      	movs	r0, r4
 8001f7e:	0029      	movs	r1, r5
 8001f80:	f7fe f982 	bl	8000288 <__aeabi_dcmpge>
 8001f84:	1e03      	subs	r3, r0, #0
 8001f86:	d010      	beq.n	8001faa <main+0x3ca>
					  isStartTurningRight = false;
 8001f88:	19bb      	adds	r3, r7, r6
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
					  isFinishTurningRight = true;
 8001f8e:	2312      	movs	r3, #18
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
					  stop();
 8001f96:	f7ff fde3 	bl	8001b60 <stop>
					  stop_timer();
 8001f9a:	f7ff fe17 	bl	8001bcc <stop_timer>
					  reset_time();
 8001f9e:	f7ff fe01 	bl	8001ba4 <reset_time>

					  isParkDone = true;
 8001fa2:	231a      	movs	r3, #26
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
	  if (!isParkDone) {
 8001faa:	e684      	b.n	8001cb6 <main+0xd6>
 8001fac:	200000b8 	.word	0x200000b8
 8001fb0:	48000800 	.word	0x48000800
 8001fb4:	20000028 	.word	0x20000028
 8001fb8:	66666666 	.word	0x66666666
 8001fbc:	3fe66666 	.word	0x3fe66666

08001fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b093      	sub	sp, #76	@ 0x4c
 8001fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc6:	2414      	movs	r4, #20
 8001fc8:	193b      	adds	r3, r7, r4
 8001fca:	0018      	movs	r0, r3
 8001fcc:	2334      	movs	r3, #52	@ 0x34
 8001fce:	001a      	movs	r2, r3
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	f001 fe9d 	bl	8003d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	0018      	movs	r0, r3
 8001fda:	2310      	movs	r3, #16
 8001fdc:	001a      	movs	r2, r3
 8001fde:	2100      	movs	r1, #0
 8001fe0:	f001 fe96 	bl	8003d10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001fe4:	193b      	adds	r3, r7, r4
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001fea:	193b      	adds	r3, r7, r4
 8001fec:	2201      	movs	r2, #1
 8001fee:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ff0:	193b      	adds	r3, r7, r4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff6:	193b      	adds	r3, r7, r4
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f000 fd53 	bl	8002aa4 <HAL_RCC_OscConfig>
 8001ffe:	1e03      	subs	r3, r0, #0
 8002000:	d001      	beq.n	8002006 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002002:	f000 f967 	bl	80022d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2207      	movs	r2, #7
 800200a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	2203      	movs	r2, #3
 8002010:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2101      	movs	r1, #1
 8002022:	0018      	movs	r0, r3
 8002024:	f001 f8c4 	bl	80031b0 <HAL_RCC_ClockConfig>
 8002028:	1e03      	subs	r3, r0, #0
 800202a:	d001      	beq.n	8002030 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800202c:	f000 f952 	bl	80022d4 <Error_Handler>
  }
}
 8002030:	46c0      	nop			@ (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b013      	add	sp, #76	@ 0x4c
 8002036:	bd90      	pop	{r4, r7, pc}

08002038 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203e:	2308      	movs	r3, #8
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	0018      	movs	r0, r3
 8002044:	2310      	movs	r3, #16
 8002046:	001a      	movs	r2, r3
 8002048:	2100      	movs	r1, #0
 800204a:	f001 fe61 	bl	8003d10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204e:	003b      	movs	r3, r7
 8002050:	0018      	movs	r0, r3
 8002052:	2308      	movs	r3, #8
 8002054:	001a      	movs	r2, r3
 8002056:	2100      	movs	r1, #0
 8002058:	f001 fe5a 	bl	8003d10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800205c:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <MX_TIM1_Init+0xa4>)
 800205e:	4a20      	ldr	r2, [pc, #128]	@ (80020e0 <MX_TIM1_Init+0xa8>)
 8002060:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8002062:	4b1e      	ldr	r3, [pc, #120]	@ (80020dc <MX_TIM1_Init+0xa4>)
 8002064:	222f      	movs	r2, #47	@ 0x2f
 8002066:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	4b1c      	ldr	r3, [pc, #112]	@ (80020dc <MX_TIM1_Init+0xa4>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800206e:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <MX_TIM1_Init+0xa4>)
 8002070:	4a1c      	ldr	r2, [pc, #112]	@ (80020e4 <MX_TIM1_Init+0xac>)
 8002072:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <MX_TIM1_Init+0xa4>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800207a:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <MX_TIM1_Init+0xa4>)
 800207c:	2200      	movs	r2, #0
 800207e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <MX_TIM1_Init+0xa4>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <MX_TIM1_Init+0xa4>)
 8002088:	0018      	movs	r0, r3
 800208a:	f001 f9dd 	bl	8003448 <HAL_TIM_Base_Init>
 800208e:	1e03      	subs	r3, r0, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002092:	f000 f91f 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002096:	2108      	movs	r1, #8
 8002098:	187b      	adds	r3, r7, r1
 800209a:	2280      	movs	r2, #128	@ 0x80
 800209c:	0152      	lsls	r2, r2, #5
 800209e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020a0:	187a      	adds	r2, r7, r1
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <MX_TIM1_Init+0xa4>)
 80020a4:	0011      	movs	r1, r2
 80020a6:	0018      	movs	r0, r3
 80020a8:	f001 fba8 	bl	80037fc <HAL_TIM_ConfigClockSource>
 80020ac:	1e03      	subs	r3, r0, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80020b0:	f000 f910 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b4:	003b      	movs	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ba:	003b      	movs	r3, r7
 80020bc:	2200      	movs	r2, #0
 80020be:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020c0:	003a      	movs	r2, r7
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <MX_TIM1_Init+0xa4>)
 80020c4:	0011      	movs	r1, r2
 80020c6:	0018      	movs	r0, r3
 80020c8:	f001 fdb4 	bl	8003c34 <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	1e03      	subs	r3, r0, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80020d0:	f000 f900 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020d4:	46c0      	nop			@ (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b006      	add	sp, #24
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000028 	.word	0x20000028
 80020e0:	40012c00 	.word	0x40012c00
 80020e4:	0000ffff 	.word	0x0000ffff

080020e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	2308      	movs	r3, #8
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	0018      	movs	r0, r3
 80020f4:	2310      	movs	r3, #16
 80020f6:	001a      	movs	r2, r3
 80020f8:	2100      	movs	r1, #0
 80020fa:	f001 fe09 	bl	8003d10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fe:	003b      	movs	r3, r7
 8002100:	0018      	movs	r0, r3
 8002102:	2308      	movs	r3, #8
 8002104:	001a      	movs	r2, r3
 8002106:	2100      	movs	r1, #0
 8002108:	f001 fe02 	bl	8003d10 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800210c:	4b1e      	ldr	r3, [pc, #120]	@ (8002188 <MX_TIM3_Init+0xa0>)
 800210e:	4a1f      	ldr	r2, [pc, #124]	@ (800218c <MX_TIM3_Init+0xa4>)
 8002110:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8002112:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <MX_TIM3_Init+0xa0>)
 8002114:	222f      	movs	r2, #47	@ 0x2f
 8002116:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <MX_TIM3_Init+0xa0>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800211e:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <MX_TIM3_Init+0xa0>)
 8002120:	4a1b      	ldr	r2, [pc, #108]	@ (8002190 <MX_TIM3_Init+0xa8>)
 8002122:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002124:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <MX_TIM3_Init+0xa0>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <MX_TIM3_Init+0xa0>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002130:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <MX_TIM3_Init+0xa0>)
 8002132:	0018      	movs	r0, r3
 8002134:	f001 f988 	bl	8003448 <HAL_TIM_Base_Init>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800213c:	f000 f8ca 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	2108      	movs	r1, #8
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2280      	movs	r2, #128	@ 0x80
 8002146:	0152      	lsls	r2, r2, #5
 8002148:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800214a:	187a      	adds	r2, r7, r1
 800214c:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <MX_TIM3_Init+0xa0>)
 800214e:	0011      	movs	r1, r2
 8002150:	0018      	movs	r0, r3
 8002152:	f001 fb53 	bl	80037fc <HAL_TIM_ConfigClockSource>
 8002156:	1e03      	subs	r3, r0, #0
 8002158:	d001      	beq.n	800215e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800215a:	f000 f8bb 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215e:	003b      	movs	r3, r7
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002164:	003b      	movs	r3, r7
 8002166:	2200      	movs	r2, #0
 8002168:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800216a:	003a      	movs	r2, r7
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <MX_TIM3_Init+0xa0>)
 800216e:	0011      	movs	r1, r2
 8002170:	0018      	movs	r0, r3
 8002172:	f001 fd5f 	bl	8003c34 <HAL_TIMEx_MasterConfigSynchronization>
 8002176:	1e03      	subs	r3, r0, #0
 8002178:	d001      	beq.n	800217e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800217a:	f000 f8ab 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b006      	add	sp, #24
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	20000070 	.word	0x20000070
 800218c:	40000400 	.word	0x40000400
 8002190:	000003e7 	.word	0x000003e7

08002194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b089      	sub	sp, #36	@ 0x24
 8002198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	240c      	movs	r4, #12
 800219c:	193b      	adds	r3, r7, r4
 800219e:	0018      	movs	r0, r3
 80021a0:	2314      	movs	r3, #20
 80021a2:	001a      	movs	r2, r3
 80021a4:	2100      	movs	r1, #0
 80021a6:	f001 fdb3 	bl	8003d10 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	4b39      	ldr	r3, [pc, #228]	@ (8002290 <MX_GPIO_Init+0xfc>)
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	4b38      	ldr	r3, [pc, #224]	@ (8002290 <MX_GPIO_Init+0xfc>)
 80021b0:	2180      	movs	r1, #128	@ 0x80
 80021b2:	0309      	lsls	r1, r1, #12
 80021b4:	430a      	orrs	r2, r1
 80021b6:	615a      	str	r2, [r3, #20]
 80021b8:	4b35      	ldr	r3, [pc, #212]	@ (8002290 <MX_GPIO_Init+0xfc>)
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	031b      	lsls	r3, r3, #12
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021c6:	4b32      	ldr	r3, [pc, #200]	@ (8002290 <MX_GPIO_Init+0xfc>)
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	4b31      	ldr	r3, [pc, #196]	@ (8002290 <MX_GPIO_Init+0xfc>)
 80021cc:	2180      	movs	r1, #128	@ 0x80
 80021ce:	03c9      	lsls	r1, r1, #15
 80021d0:	430a      	orrs	r2, r1
 80021d2:	615a      	str	r2, [r3, #20]
 80021d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <MX_GPIO_Init+0xfc>)
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	03db      	lsls	r3, r3, #15
 80021dc:	4013      	ands	r3, r2
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <MX_GPIO_Init+0xfc>)
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <MX_GPIO_Init+0xfc>)
 80021e8:	2180      	movs	r1, #128	@ 0x80
 80021ea:	0289      	lsls	r1, r1, #10
 80021ec:	430a      	orrs	r2, r1
 80021ee:	615a      	str	r2, [r3, #20]
 80021f0:	4b27      	ldr	r3, [pc, #156]	@ (8002290 <MX_GPIO_Init+0xfc>)
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	029b      	lsls	r3, r3, #10
 80021f8:	4013      	ands	r3, r2
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIDE_TRIG_Pin|RIGHT_MOTOR_POS_Pin|RIGHT_MOTOR_NEG_Pin|LEFT_MOTOR_NEG_Pin
 80021fe:	4925      	ldr	r1, [pc, #148]	@ (8002294 <MX_GPIO_Init+0x100>)
 8002200:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <MX_GPIO_Init+0x104>)
 8002202:	2200      	movs	r2, #0
 8002204:	0018      	movs	r0, r3
 8002206:	f000 fc30 	bl	8002a6a <HAL_GPIO_WritePin>
                          |LEFT_MOTOR_POS_Pin|FRONT_TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800220a:	2390      	movs	r3, #144	@ 0x90
 800220c:	05db      	lsls	r3, r3, #23
 800220e:	2200      	movs	r2, #0
 8002210:	2120      	movs	r1, #32
 8002212:	0018      	movs	r0, r3
 8002214:	f000 fc29 	bl	8002a6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SIDE_TRIG_Pin RIGHT_MOTOR_POS_Pin RIGHT_MOTOR_NEG_Pin LEFT_MOTOR_NEG_Pin
                           LEFT_MOTOR_POS_Pin FRONT_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_TRIG_Pin|RIGHT_MOTOR_POS_Pin|RIGHT_MOTOR_NEG_Pin|LEFT_MOTOR_NEG_Pin
 8002218:	193b      	adds	r3, r7, r4
 800221a:	4a1e      	ldr	r2, [pc, #120]	@ (8002294 <MX_GPIO_Init+0x100>)
 800221c:	601a      	str	r2, [r3, #0]
                          |LEFT_MOTOR_POS_Pin|FRONT_TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	193b      	adds	r3, r7, r4
 8002220:	2201      	movs	r2, #1
 8002222:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	193b      	adds	r3, r7, r4
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	193b      	adds	r3, r7, r4
 800222c:	2200      	movs	r2, #0
 800222e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002230:	193b      	adds	r3, r7, r4
 8002232:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <MX_GPIO_Init+0x104>)
 8002234:	0019      	movs	r1, r3
 8002236:	0010      	movs	r0, r2
 8002238:	f000 fa82 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIDE_ECHO_Pin FRONT_ECHO_Pin */
  GPIO_InitStruct.Pin = SIDE_ECHO_Pin|FRONT_ECHO_Pin;
 800223c:	0021      	movs	r1, r4
 800223e:	187b      	adds	r3, r7, r1
 8002240:	2281      	movs	r2, #129	@ 0x81
 8002242:	00d2      	lsls	r2, r2, #3
 8002244:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002246:	000c      	movs	r4, r1
 8002248:	193b      	adds	r3, r7, r4
 800224a:	2200      	movs	r2, #0
 800224c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	193b      	adds	r3, r7, r4
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002254:	193b      	adds	r3, r7, r4
 8002256:	4a10      	ldr	r2, [pc, #64]	@ (8002298 <MX_GPIO_Init+0x104>)
 8002258:	0019      	movs	r1, r3
 800225a:	0010      	movs	r0, r2
 800225c:	f000 fa70 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002260:	0021      	movs	r1, r4
 8002262:	187b      	adds	r3, r7, r1
 8002264:	2220      	movs	r2, #32
 8002266:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002268:	187b      	adds	r3, r7, r1
 800226a:	2201      	movs	r2, #1
 800226c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	187b      	adds	r3, r7, r1
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	187b      	adds	r3, r7, r1
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800227a:	187a      	adds	r2, r7, r1
 800227c:	2390      	movs	r3, #144	@ 0x90
 800227e:	05db      	lsls	r3, r3, #23
 8002280:	0011      	movs	r1, r2
 8002282:	0018      	movs	r0, r3
 8002284:	f000 fa5c 	bl	8002740 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b009      	add	sp, #36	@ 0x24
 800228e:	bd90      	pop	{r4, r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	00000b64 	.word	0x00000b64
 8002298:	48000800 	.word	0x48000800

0800229c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && isTimerActive) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d108      	bne.n	80022c0 <HAL_TIM_PeriodElapsedCallback+0x24>
 80022ae:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d004      	beq.n	80022c0 <HAL_TIM_PeriodElapsedCallback+0x24>
    	myTime++;
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80022be:	601a      	str	r2, [r3, #0]
    }
}
 80022c0:	46c0      	nop			@ (mov r8, r8)
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40000400 	.word	0x40000400
 80022cc:	200000bc 	.word	0x200000bc
 80022d0:	200000b8 	.word	0x200000b8

080022d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d8:	b672      	cpsid	i
}
 80022da:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	e7fd      	b.n	80022dc <Error_Handler+0x8>

080022e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <HAL_MspInit+0x44>)
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <HAL_MspInit+0x44>)
 80022ec:	2101      	movs	r1, #1
 80022ee:	430a      	orrs	r2, r1
 80022f0:	619a      	str	r2, [r3, #24]
 80022f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <HAL_MspInit+0x44>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2201      	movs	r2, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <HAL_MspInit+0x44>)
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <HAL_MspInit+0x44>)
 8002304:	2180      	movs	r1, #128	@ 0x80
 8002306:	0549      	lsls	r1, r1, #21
 8002308:	430a      	orrs	r2, r1
 800230a:	61da      	str	r2, [r3, #28]
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_MspInit+0x44>)
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	055b      	lsls	r3, r3, #21
 8002314:	4013      	ands	r3, r2
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	40021000 	.word	0x40021000

08002328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1b      	ldr	r2, [pc, #108]	@ (80023a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d116      	bne.n	8002368 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800233a:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <HAL_TIM_Base_MspInit+0x80>)
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_TIM_Base_MspInit+0x80>)
 8002340:	2180      	movs	r1, #128	@ 0x80
 8002342:	0109      	lsls	r1, r1, #4
 8002344:	430a      	orrs	r2, r1
 8002346:	619a      	str	r2, [r3, #24]
 8002348:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <HAL_TIM_Base_MspInit+0x80>)
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	200e      	movs	r0, #14
 800235c:	f000 f9be 	bl	80026dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002360:	200e      	movs	r0, #14
 8002362:	f000 f9d0 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002366:	e018      	b.n	800239a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0f      	ldr	r2, [pc, #60]	@ (80023ac <HAL_TIM_Base_MspInit+0x84>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d113      	bne.n	800239a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_TIM_Base_MspInit+0x80>)
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <HAL_TIM_Base_MspInit+0x80>)
 8002378:	2102      	movs	r1, #2
 800237a:	430a      	orrs	r2, r1
 800237c:	61da      	str	r2, [r3, #28]
 800237e:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <HAL_TIM_Base_MspInit+0x80>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	2202      	movs	r2, #2
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	2010      	movs	r0, #16
 8002390:	f000 f9a4 	bl	80026dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002394:	2010      	movs	r0, #16
 8002396:	f000 f9b6 	bl	8002706 <HAL_NVIC_EnableIRQ>
}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40000400 	.word	0x40000400

080023b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b4:	46c0      	nop			@ (mov r8, r8)
 80023b6:	e7fd      	b.n	80023b4 <NMI_Handler+0x4>

080023b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	e7fd      	b.n	80023bc <HardFault_Handler+0x4>

080023c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023c4:	46c0      	nop			@ (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ce:	46c0      	nop			@ (mov r8, r8)
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d8:	f000 f894 	bl	8002504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023dc:	46c0      	nop			@ (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023e8:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <TIM1_CC_IRQHandler+0x14>)
 80023ea:	0018      	movs	r0, r3
 80023ec:	f001 f918 	bl	8003620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80023f0:	46c0      	nop			@ (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	20000028 	.word	0x20000028

080023fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002400:	4b03      	ldr	r3, [pc, #12]	@ (8002410 <TIM3_IRQHandler+0x14>)
 8002402:	0018      	movs	r0, r3
 8002404:	f001 f90c 	bl	8003620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002408:	46c0      	nop			@ (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	20000070 	.word	0x20000070

08002414 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002418:	46c0      	nop			@ (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002420:	480d      	ldr	r0, [pc, #52]	@ (8002458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002422:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002424:	f7ff fff6 	bl	8002414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002428:	480c      	ldr	r0, [pc, #48]	@ (800245c <LoopForever+0x6>)
  ldr r1, =_edata
 800242a:	490d      	ldr	r1, [pc, #52]	@ (8002460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800242c:	4a0d      	ldr	r2, [pc, #52]	@ (8002464 <LoopForever+0xe>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002430:	e002      	b.n	8002438 <LoopCopyDataInit>

08002432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002436:	3304      	adds	r3, #4

08002438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800243c:	d3f9      	bcc.n	8002432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243e:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002440:	4c0a      	ldr	r4, [pc, #40]	@ (800246c <LoopForever+0x16>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002444:	e001      	b.n	800244a <LoopFillZerobss>

08002446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002448:	3204      	adds	r2, #4

0800244a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800244c:	d3fb      	bcc.n	8002446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800244e:	f001 fc67 	bl	8003d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002452:	f7ff fbc5 	bl	8001be0 <main>

08002456 <LoopForever>:

LoopForever:
    b LoopForever
 8002456:	e7fe      	b.n	8002456 <LoopForever>
  ldr   r0, =_estack
 8002458:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800245c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002460:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002464:	08003e0c 	.word	0x08003e0c
  ldr r2, =_sbss
 8002468:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800246c:	200000c4 	.word	0x200000c4

08002470 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002470:	e7fe      	b.n	8002470 <ADC1_COMP_IRQHandler>
	...

08002474 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002478:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <HAL_Init+0x24>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_Init+0x24>)
 800247e:	2110      	movs	r1, #16
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002484:	2000      	movs	r0, #0
 8002486:	f000 f809 	bl	800249c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800248a:	f7ff ff29 	bl	80022e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			@ (mov r8, r8)
 8002498:	40022000 	.word	0x40022000

0800249c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a4:	4b14      	ldr	r3, [pc, #80]	@ (80024f8 <HAL_InitTick+0x5c>)
 80024a6:	681c      	ldr	r4, [r3, #0]
 80024a8:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <HAL_InitTick+0x60>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	0019      	movs	r1, r3
 80024ae:	23fa      	movs	r3, #250	@ 0xfa
 80024b0:	0098      	lsls	r0, r3, #2
 80024b2:	f7fd fe29 	bl	8000108 <__udivsi3>
 80024b6:	0003      	movs	r3, r0
 80024b8:	0019      	movs	r1, r3
 80024ba:	0020      	movs	r0, r4
 80024bc:	f7fd fe24 	bl	8000108 <__udivsi3>
 80024c0:	0003      	movs	r3, r0
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 f92f 	bl	8002726 <HAL_SYSTICK_Config>
 80024c8:	1e03      	subs	r3, r0, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e00f      	b.n	80024f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d80b      	bhi.n	80024ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	2301      	movs	r3, #1
 80024da:	425b      	negs	r3, r3
 80024dc:	2200      	movs	r2, #0
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 f8fc 	bl	80026dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_InitTick+0x64>)
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b003      	add	sp, #12
 80024f6:	bd90      	pop	{r4, r7, pc}
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000008 	.word	0x20000008
 8002500:	20000004 	.word	0x20000004

08002504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <HAL_IncTick+0x1c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	001a      	movs	r2, r3
 800250e:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <HAL_IncTick+0x20>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	18d2      	adds	r2, r2, r3
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_IncTick+0x20>)
 8002516:	601a      	str	r2, [r3, #0]
}
 8002518:	46c0      	nop			@ (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	20000008 	.word	0x20000008
 8002524:	200000c0 	.word	0x200000c0

08002528 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  return uwTick;
 800252c:	4b02      	ldr	r3, [pc, #8]	@ (8002538 <HAL_GetTick+0x10>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	200000c0 	.word	0x200000c0

0800253c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff fff0 	bl	8002528 <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3301      	adds	r3, #1
 8002554:	d005      	beq.n	8002562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_Delay+0x44>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	001a      	movs	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	189b      	adds	r3, r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	f7ff ffe0 	bl	8002528 <HAL_GetTick>
 8002568:	0002      	movs	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d8f7      	bhi.n	8002564 <HAL_Delay+0x28>
  {
  }
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46c0      	nop			@ (mov r8, r8)
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	20000008 	.word	0x20000008

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	0002      	movs	r2, r0
 800258c:	1dfb      	adds	r3, r7, #7
 800258e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002590:	1dfb      	adds	r3, r7, #7
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b7f      	cmp	r3, #127	@ 0x7f
 8002596:	d809      	bhi.n	80025ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002598:	1dfb      	adds	r3, r7, #7
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	001a      	movs	r2, r3
 800259e:	231f      	movs	r3, #31
 80025a0:	401a      	ands	r2, r3
 80025a2:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <__NVIC_EnableIRQ+0x30>)
 80025a4:	2101      	movs	r1, #1
 80025a6:	4091      	lsls	r1, r2
 80025a8:	000a      	movs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
  }
}
 80025ac:	46c0      	nop			@ (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	0002      	movs	r2, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	1dfb      	adds	r3, r7, #7
 80025c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025c6:	1dfb      	adds	r3, r7, #7
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80025cc:	d828      	bhi.n	8002620 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025ce:	4a2f      	ldr	r2, [pc, #188]	@ (800268c <__NVIC_SetPriority+0xd4>)
 80025d0:	1dfb      	adds	r3, r7, #7
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	b25b      	sxtb	r3, r3
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	33c0      	adds	r3, #192	@ 0xc0
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	589b      	ldr	r3, [r3, r2]
 80025de:	1dfa      	adds	r2, r7, #7
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	0011      	movs	r1, r2
 80025e4:	2203      	movs	r2, #3
 80025e6:	400a      	ands	r2, r1
 80025e8:	00d2      	lsls	r2, r2, #3
 80025ea:	21ff      	movs	r1, #255	@ 0xff
 80025ec:	4091      	lsls	r1, r2
 80025ee:	000a      	movs	r2, r1
 80025f0:	43d2      	mvns	r2, r2
 80025f2:	401a      	ands	r2, r3
 80025f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	019b      	lsls	r3, r3, #6
 80025fa:	22ff      	movs	r2, #255	@ 0xff
 80025fc:	401a      	ands	r2, r3
 80025fe:	1dfb      	adds	r3, r7, #7
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	0018      	movs	r0, r3
 8002604:	2303      	movs	r3, #3
 8002606:	4003      	ands	r3, r0
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800260c:	481f      	ldr	r0, [pc, #124]	@ (800268c <__NVIC_SetPriority+0xd4>)
 800260e:	1dfb      	adds	r3, r7, #7
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b25b      	sxtb	r3, r3
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	430a      	orrs	r2, r1
 8002618:	33c0      	adds	r3, #192	@ 0xc0
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800261e:	e031      	b.n	8002684 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002620:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <__NVIC_SetPriority+0xd8>)
 8002622:	1dfb      	adds	r3, r7, #7
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	0019      	movs	r1, r3
 8002628:	230f      	movs	r3, #15
 800262a:	400b      	ands	r3, r1
 800262c:	3b08      	subs	r3, #8
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3306      	adds	r3, #6
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	18d3      	adds	r3, r2, r3
 8002636:	3304      	adds	r3, #4
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	1dfa      	adds	r2, r7, #7
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	0011      	movs	r1, r2
 8002640:	2203      	movs	r2, #3
 8002642:	400a      	ands	r2, r1
 8002644:	00d2      	lsls	r2, r2, #3
 8002646:	21ff      	movs	r1, #255	@ 0xff
 8002648:	4091      	lsls	r1, r2
 800264a:	000a      	movs	r2, r1
 800264c:	43d2      	mvns	r2, r2
 800264e:	401a      	ands	r2, r3
 8002650:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	019b      	lsls	r3, r3, #6
 8002656:	22ff      	movs	r2, #255	@ 0xff
 8002658:	401a      	ands	r2, r3
 800265a:	1dfb      	adds	r3, r7, #7
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	0018      	movs	r0, r3
 8002660:	2303      	movs	r3, #3
 8002662:	4003      	ands	r3, r0
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002668:	4809      	ldr	r0, [pc, #36]	@ (8002690 <__NVIC_SetPriority+0xd8>)
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	001c      	movs	r4, r3
 8002670:	230f      	movs	r3, #15
 8002672:	4023      	ands	r3, r4
 8002674:	3b08      	subs	r3, #8
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	430a      	orrs	r2, r1
 800267a:	3306      	adds	r3, #6
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	18c3      	adds	r3, r0, r3
 8002680:	3304      	adds	r3, #4
 8002682:	601a      	str	r2, [r3, #0]
}
 8002684:	46c0      	nop			@ (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b003      	add	sp, #12
 800268a:	bd90      	pop	{r4, r7, pc}
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	1e5a      	subs	r2, r3, #1
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	045b      	lsls	r3, r3, #17
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d301      	bcc.n	80026ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a8:	2301      	movs	r3, #1
 80026aa:	e010      	b.n	80026ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ac:	4b0a      	ldr	r3, [pc, #40]	@ (80026d8 <SysTick_Config+0x44>)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	3a01      	subs	r2, #1
 80026b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b4:	2301      	movs	r3, #1
 80026b6:	425b      	negs	r3, r3
 80026b8:	2103      	movs	r1, #3
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7ff ff7c 	bl	80025b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c0:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <SysTick_Config+0x44>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c6:	4b04      	ldr	r3, [pc, #16]	@ (80026d8 <SysTick_Config+0x44>)
 80026c8:	2207      	movs	r2, #7
 80026ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b002      	add	sp, #8
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	e000e010 	.word	0xe000e010

080026dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	210f      	movs	r1, #15
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	1c02      	adds	r2, r0, #0
 80026ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	0011      	movs	r1, r2
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7ff ff5d 	bl	80025b8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	46bd      	mov	sp, r7
 8002702:	b004      	add	sp, #16
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	0002      	movs	r2, r0
 800270e:	1dfb      	adds	r3, r7, #7
 8002710:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002712:	1dfb      	adds	r3, r7, #7
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	b25b      	sxtb	r3, r3
 8002718:	0018      	movs	r0, r3
 800271a:	f7ff ff33 	bl	8002584 <__NVIC_EnableIRQ>
}
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	b002      	add	sp, #8
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	0018      	movs	r0, r3
 8002732:	f7ff ffaf 	bl	8002694 <SysTick_Config>
 8002736:	0003      	movs	r3, r0
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274e:	e155      	b.n	80029fc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4091      	lsls	r1, r2
 800275a:	000a      	movs	r2, r1
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d100      	bne.n	8002768 <HAL_GPIO_Init+0x28>
 8002766:	e146      	b.n	80029f6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2203      	movs	r2, #3
 800276e:	4013      	ands	r3, r2
 8002770:	2b01      	cmp	r3, #1
 8002772:	d005      	beq.n	8002780 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2203      	movs	r2, #3
 800277a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800277c:	2b02      	cmp	r3, #2
 800277e:	d130      	bne.n	80027e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	409a      	lsls	r2, r3
 800278e:	0013      	movs	r3, r2
 8002790:	43da      	mvns	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	409a      	lsls	r2, r3
 80027a2:	0013      	movs	r3, r2
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b6:	2201      	movs	r2, #1
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	43da      	mvns	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	2201      	movs	r2, #1
 80027ce:	401a      	ands	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	409a      	lsls	r2, r3
 80027d4:	0013      	movs	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2203      	movs	r2, #3
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d017      	beq.n	800281e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	409a      	lsls	r2, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	43da      	mvns	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	409a      	lsls	r2, r3
 8002810:	0013      	movs	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2203      	movs	r2, #3
 8002824:	4013      	ands	r3, r2
 8002826:	2b02      	cmp	r3, #2
 8002828:	d123      	bne.n	8002872 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	08da      	lsrs	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3208      	adds	r2, #8
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	58d3      	ldr	r3, [r2, r3]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2207      	movs	r2, #7
 800283c:	4013      	ands	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	409a      	lsls	r2, r3
 8002844:	0013      	movs	r3, r2
 8002846:	43da      	mvns	r2, r3
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2107      	movs	r1, #7
 8002856:	400b      	ands	r3, r1
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	409a      	lsls	r2, r3
 800285c:	0013      	movs	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	6939      	ldr	r1, [r7, #16]
 8002870:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	409a      	lsls	r2, r3
 8002880:	0013      	movs	r3, r2
 8002882:	43da      	mvns	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2203      	movs	r2, #3
 8002890:	401a      	ands	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	409a      	lsls	r2, r3
 8002898:	0013      	movs	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	23c0      	movs	r3, #192	@ 0xc0
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	4013      	ands	r3, r2
 80028b0:	d100      	bne.n	80028b4 <HAL_GPIO_Init+0x174>
 80028b2:	e0a0      	b.n	80029f6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b4:	4b57      	ldr	r3, [pc, #348]	@ (8002a14 <HAL_GPIO_Init+0x2d4>)
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	4b56      	ldr	r3, [pc, #344]	@ (8002a14 <HAL_GPIO_Init+0x2d4>)
 80028ba:	2101      	movs	r1, #1
 80028bc:	430a      	orrs	r2, r1
 80028be:	619a      	str	r2, [r3, #24]
 80028c0:	4b54      	ldr	r3, [pc, #336]	@ (8002a14 <HAL_GPIO_Init+0x2d4>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2201      	movs	r2, #1
 80028c6:	4013      	ands	r3, r2
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028cc:	4a52      	ldr	r2, [pc, #328]	@ (8002a18 <HAL_GPIO_Init+0x2d8>)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	589b      	ldr	r3, [r3, r2]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2203      	movs	r2, #3
 80028de:	4013      	ands	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	220f      	movs	r2, #15
 80028e4:	409a      	lsls	r2, r3
 80028e6:	0013      	movs	r3, r2
 80028e8:	43da      	mvns	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	2390      	movs	r3, #144	@ 0x90
 80028f4:	05db      	lsls	r3, r3, #23
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d019      	beq.n	800292e <HAL_GPIO_Init+0x1ee>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a47      	ldr	r2, [pc, #284]	@ (8002a1c <HAL_GPIO_Init+0x2dc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_GPIO_Init+0x1ea>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a46      	ldr	r2, [pc, #280]	@ (8002a20 <HAL_GPIO_Init+0x2e0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00d      	beq.n	8002926 <HAL_GPIO_Init+0x1e6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a45      	ldr	r2, [pc, #276]	@ (8002a24 <HAL_GPIO_Init+0x2e4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d007      	beq.n	8002922 <HAL_GPIO_Init+0x1e2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a44      	ldr	r2, [pc, #272]	@ (8002a28 <HAL_GPIO_Init+0x2e8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_GPIO_Init+0x1de>
 800291a:	2304      	movs	r3, #4
 800291c:	e008      	b.n	8002930 <HAL_GPIO_Init+0x1f0>
 800291e:	2305      	movs	r3, #5
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x1f0>
 8002922:	2303      	movs	r3, #3
 8002924:	e004      	b.n	8002930 <HAL_GPIO_Init+0x1f0>
 8002926:	2302      	movs	r3, #2
 8002928:	e002      	b.n	8002930 <HAL_GPIO_Init+0x1f0>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_GPIO_Init+0x1f0>
 800292e:	2300      	movs	r3, #0
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	2103      	movs	r1, #3
 8002934:	400a      	ands	r2, r1
 8002936:	0092      	lsls	r2, r2, #2
 8002938:	4093      	lsls	r3, r2
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002940:	4935      	ldr	r1, [pc, #212]	@ (8002a18 <HAL_GPIO_Init+0x2d8>)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800294e:	4b37      	ldr	r3, [pc, #220]	@ (8002a2c <HAL_GPIO_Init+0x2ec>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	43da      	mvns	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	035b      	lsls	r3, r3, #13
 8002966:	4013      	ands	r3, r2
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002972:	4b2e      	ldr	r3, [pc, #184]	@ (8002a2c <HAL_GPIO_Init+0x2ec>)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002978:	4b2c      	ldr	r3, [pc, #176]	@ (8002a2c <HAL_GPIO_Init+0x2ec>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	43da      	mvns	r2, r3
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	039b      	lsls	r3, r3, #14
 8002990:	4013      	ands	r3, r2
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800299c:	4b23      	ldr	r3, [pc, #140]	@ (8002a2c <HAL_GPIO_Init+0x2ec>)
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80029a2:	4b22      	ldr	r3, [pc, #136]	@ (8002a2c <HAL_GPIO_Init+0x2ec>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	43da      	mvns	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4013      	ands	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	2380      	movs	r3, #128	@ 0x80
 80029b8:	029b      	lsls	r3, r3, #10
 80029ba:	4013      	ands	r3, r2
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029c6:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <HAL_GPIO_Init+0x2ec>)
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80029cc:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <HAL_GPIO_Init+0x2ec>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	43da      	mvns	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	025b      	lsls	r3, r3, #9
 80029e4:	4013      	ands	r3, r2
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029f0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <HAL_GPIO_Init+0x2ec>)
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	40da      	lsrs	r2, r3
 8002a04:	1e13      	subs	r3, r2, #0
 8002a06:	d000      	beq.n	8002a0a <HAL_GPIO_Init+0x2ca>
 8002a08:	e6a2      	b.n	8002750 <HAL_GPIO_Init+0x10>
  } 
}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b006      	add	sp, #24
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	48000400 	.word	0x48000400
 8002a20:	48000800 	.word	0x48000800
 8002a24:	48000c00 	.word	0x48000c00
 8002a28:	48001000 	.word	0x48001000
 8002a2c:	40010400 	.word	0x40010400

08002a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	000a      	movs	r2, r1
 8002a3a:	1cbb      	adds	r3, r7, #2
 8002a3c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	1cba      	adds	r2, r7, #2
 8002a44:	8812      	ldrh	r2, [r2, #0]
 8002a46:	4013      	ands	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002a4a:	230f      	movs	r3, #15
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
 8002a52:	e003      	b.n	8002a5c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a54:	230f      	movs	r3, #15
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002a5c:	230f      	movs	r3, #15
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	781b      	ldrb	r3, [r3, #0]
  }
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b004      	add	sp, #16
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	0008      	movs	r0, r1
 8002a74:	0011      	movs	r1, r2
 8002a76:	1cbb      	adds	r3, r7, #2
 8002a78:	1c02      	adds	r2, r0, #0
 8002a7a:	801a      	strh	r2, [r3, #0]
 8002a7c:	1c7b      	adds	r3, r7, #1
 8002a7e:	1c0a      	adds	r2, r1, #0
 8002a80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a82:	1c7b      	adds	r3, r7, #1
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a8a:	1cbb      	adds	r3, r7, #2
 8002a8c:	881a      	ldrh	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a92:	e003      	b.n	8002a9c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a94:	1cbb      	adds	r3, r7, #2
 8002a96:	881a      	ldrh	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a9c:	46c0      	nop			@ (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f000 fb76 	bl	80031a4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2201      	movs	r2, #1
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d100      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x20>
 8002ac2:	e08e      	b.n	8002be2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ac4:	4bc5      	ldr	r3, [pc, #788]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	220c      	movs	r2, #12
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d00e      	beq.n	8002aee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ad0:	4bc2      	ldr	r3, [pc, #776]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	220c      	movs	r2, #12
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d117      	bne.n	8002b0c <HAL_RCC_OscConfig+0x68>
 8002adc:	4bbf      	ldr	r3, [pc, #764]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	23c0      	movs	r3, #192	@ 0xc0
 8002ae2:	025b      	lsls	r3, r3, #9
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	025b      	lsls	r3, r3, #9
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d10e      	bne.n	8002b0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aee:	4bbb      	ldr	r3, [pc, #748]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	4013      	ands	r3, r2
 8002af8:	d100      	bne.n	8002afc <HAL_RCC_OscConfig+0x58>
 8002afa:	e071      	b.n	8002be0 <HAL_RCC_OscConfig+0x13c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d000      	beq.n	8002b06 <HAL_RCC_OscConfig+0x62>
 8002b04:	e06c      	b.n	8002be0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f000 fb4c 	bl	80031a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x80>
 8002b14:	4bb1      	ldr	r3, [pc, #708]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4bb0      	ldr	r3, [pc, #704]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b1a:	2180      	movs	r1, #128	@ 0x80
 8002b1c:	0249      	lsls	r1, r1, #9
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e02f      	b.n	8002b84 <HAL_RCC_OscConfig+0xe0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCC_OscConfig+0xa2>
 8002b2c:	4bab      	ldr	r3, [pc, #684]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4baa      	ldr	r3, [pc, #680]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b32:	49ab      	ldr	r1, [pc, #684]	@ (8002de0 <HAL_RCC_OscConfig+0x33c>)
 8002b34:	400a      	ands	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	4ba8      	ldr	r3, [pc, #672]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4ba7      	ldr	r3, [pc, #668]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b3e:	49a9      	ldr	r1, [pc, #676]	@ (8002de4 <HAL_RCC_OscConfig+0x340>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e01e      	b.n	8002b84 <HAL_RCC_OscConfig+0xe0>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d10e      	bne.n	8002b6c <HAL_RCC_OscConfig+0xc8>
 8002b4e:	4ba3      	ldr	r3, [pc, #652]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4ba2      	ldr	r3, [pc, #648]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b54:	2180      	movs	r1, #128	@ 0x80
 8002b56:	02c9      	lsls	r1, r1, #11
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	4b9f      	ldr	r3, [pc, #636]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b9e      	ldr	r3, [pc, #632]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b62:	2180      	movs	r1, #128	@ 0x80
 8002b64:	0249      	lsls	r1, r1, #9
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xe0>
 8002b6c:	4b9b      	ldr	r3, [pc, #620]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b9a      	ldr	r3, [pc, #616]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b72:	499b      	ldr	r1, [pc, #620]	@ (8002de0 <HAL_RCC_OscConfig+0x33c>)
 8002b74:	400a      	ands	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	4b98      	ldr	r3, [pc, #608]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b97      	ldr	r3, [pc, #604]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002b7e:	4999      	ldr	r1, [pc, #612]	@ (8002de4 <HAL_RCC_OscConfig+0x340>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d014      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff fccc 	bl	8002528 <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b96:	f7ff fcc7 	bl	8002528 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	@ 0x64
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e2fd      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba8:	4b8c      	ldr	r3, [pc, #560]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	029b      	lsls	r3, r3, #10
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0xf2>
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7ff fcb7 	bl	8002528 <HAL_GetTick>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7ff fcb2 	bl	8002528 <HAL_GetTick>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	@ 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e2e8      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	4b82      	ldr	r3, [pc, #520]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	@ 0x80
 8002bd8:	029b      	lsls	r3, r3, #10
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x11c>
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d100      	bne.n	8002bee <HAL_RCC_OscConfig+0x14a>
 8002bec:	e06c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bee:	4b7b      	ldr	r3, [pc, #492]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d00e      	beq.n	8002c16 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bf8:	4b78      	ldr	r3, [pc, #480]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	220c      	movs	r2, #12
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d11f      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1a0>
 8002c04:	4b75      	ldr	r3, [pc, #468]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	23c0      	movs	r3, #192	@ 0xc0
 8002c0a:	025b      	lsls	r3, r3, #9
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	2380      	movs	r3, #128	@ 0x80
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d116      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	4b71      	ldr	r3, [pc, #452]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_OscConfig+0x188>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e2bb      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b6b      	ldr	r3, [pc, #428]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	22f8      	movs	r2, #248	@ 0xf8
 8002c32:	4393      	bics	r3, r2
 8002c34:	0019      	movs	r1, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00da      	lsls	r2, r3, #3
 8002c3c:	4b67      	ldr	r3, [pc, #412]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	e041      	b.n	8002cc8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d024      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4c:	4b63      	ldr	r3, [pc, #396]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b62      	ldr	r3, [pc, #392]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7ff fc66 	bl	8002528 <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c62:	f7ff fc61 	bl	8002528 <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e297      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	4b59      	ldr	r3, [pc, #356]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d0f1      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7e:	4b57      	ldr	r3, [pc, #348]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	22f8      	movs	r2, #248	@ 0xf8
 8002c84:	4393      	bics	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	00da      	lsls	r2, r3, #3
 8002c8e:	4b53      	ldr	r3, [pc, #332]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e018      	b.n	8002cc8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b51      	ldr	r3, [pc, #324]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b50      	ldr	r3, [pc, #320]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	438a      	bics	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7ff fc41 	bl	8002528 <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cac:	f7ff fc3c 	bl	8002528 <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e272      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d1f1      	bne.n	8002cac <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2208      	movs	r2, #8
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d036      	beq.n	8002d40 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d019      	beq.n	8002d0e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cda:	4b40      	ldr	r3, [pc, #256]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cde:	4b3f      	ldr	r3, [pc, #252]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7ff fc1f 	bl	8002528 <HAL_GetTick>
 8002cea:	0003      	movs	r3, r0
 8002cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7ff fc1a 	bl	8002528 <HAL_GetTick>
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e250      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d02:	4b36      	ldr	r3, [pc, #216]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	2202      	movs	r2, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d0f1      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x24c>
 8002d0c:	e018      	b.n	8002d40 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0e:	4b33      	ldr	r3, [pc, #204]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d12:	4b32      	ldr	r3, [pc, #200]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d14:	2101      	movs	r1, #1
 8002d16:	438a      	bics	r2, r1
 8002d18:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7ff fc05 	bl	8002528 <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d24:	f7ff fc00 	bl	8002528 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e236      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d36:	4b29      	ldr	r3, [pc, #164]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d1f1      	bne.n	8002d24 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2204      	movs	r2, #4
 8002d46:	4013      	ands	r3, r2
 8002d48:	d100      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2a8>
 8002d4a:	e0b5      	b.n	8002eb8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4c:	201f      	movs	r0, #31
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d54:	4b21      	ldr	r3, [pc, #132]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d56:	69da      	ldr	r2, [r3, #28]
 8002d58:	2380      	movs	r3, #128	@ 0x80
 8002d5a:	055b      	lsls	r3, r3, #21
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d110      	bne.n	8002d82 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	4b1e      	ldr	r3, [pc, #120]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	4b1d      	ldr	r3, [pc, #116]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d66:	2180      	movs	r1, #128	@ 0x80
 8002d68:	0549      	lsls	r1, r1, #21
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	61da      	str	r2, [r3, #28]
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	2380      	movs	r3, #128	@ 0x80
 8002d74:	055b      	lsls	r3, r3, #21
 8002d76:	4013      	ands	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d7c:	183b      	adds	r3, r7, r0
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <HAL_RCC_OscConfig+0x344>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	@ 0x80
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d11a      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8e:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <HAL_RCC_OscConfig+0x344>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <HAL_RCC_OscConfig+0x344>)
 8002d94:	2180      	movs	r1, #128	@ 0x80
 8002d96:	0049      	lsls	r1, r1, #1
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9c:	f7ff fbc4 	bl	8002528 <HAL_GetTick>
 8002da0:	0003      	movs	r3, r0
 8002da2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da6:	f7ff fbbf 	bl	8002528 <HAL_GetTick>
 8002daa:	0002      	movs	r2, r0
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b64      	cmp	r3, #100	@ 0x64
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e1f5      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <HAL_RCC_OscConfig+0x344>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d10f      	bne.n	8002dec <HAL_RCC_OscConfig+0x348>
 8002dcc:	4b03      	ldr	r3, [pc, #12]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	4b02      	ldr	r3, [pc, #8]	@ (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	621a      	str	r2, [r3, #32]
 8002dd8:	e036      	b.n	8002e48 <HAL_RCC_OscConfig+0x3a4>
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	fffeffff 	.word	0xfffeffff
 8002de4:	fffbffff 	.word	0xfffbffff
 8002de8:	40007000 	.word	0x40007000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10c      	bne.n	8002e0e <HAL_RCC_OscConfig+0x36a>
 8002df4:	4bca      	ldr	r3, [pc, #808]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	4bc9      	ldr	r3, [pc, #804]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	621a      	str	r2, [r3, #32]
 8002e00:	4bc7      	ldr	r3, [pc, #796]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	4bc6      	ldr	r3, [pc, #792]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e06:	2104      	movs	r1, #4
 8002e08:	438a      	bics	r2, r1
 8002e0a:	621a      	str	r2, [r3, #32]
 8002e0c:	e01c      	b.n	8002e48 <HAL_RCC_OscConfig+0x3a4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x38c>
 8002e16:	4bc2      	ldr	r3, [pc, #776]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	4bc1      	ldr	r3, [pc, #772]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	621a      	str	r2, [r3, #32]
 8002e22:	4bbf      	ldr	r3, [pc, #764]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	4bbe      	ldr	r3, [pc, #760]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	621a      	str	r2, [r3, #32]
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCC_OscConfig+0x3a4>
 8002e30:	4bbb      	ldr	r3, [pc, #748]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e32:	6a1a      	ldr	r2, [r3, #32]
 8002e34:	4bba      	ldr	r3, [pc, #744]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	438a      	bics	r2, r1
 8002e3a:	621a      	str	r2, [r3, #32]
 8002e3c:	4bb8      	ldr	r3, [pc, #736]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	4bb7      	ldr	r3, [pc, #732]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e42:	2104      	movs	r1, #4
 8002e44:	438a      	bics	r2, r1
 8002e46:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d014      	beq.n	8002e7a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e50:	f7ff fb6a 	bl	8002528 <HAL_GetTick>
 8002e54:	0003      	movs	r3, r0
 8002e56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e58:	e009      	b.n	8002e6e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7ff fb65 	bl	8002528 <HAL_GetTick>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	4aaf      	ldr	r2, [pc, #700]	@ (8003124 <HAL_RCC_OscConfig+0x680>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e19a      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6e:	4bac      	ldr	r3, [pc, #688]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	2202      	movs	r2, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x3b6>
 8002e78:	e013      	b.n	8002ea2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7a:	f7ff fb55 	bl	8002528 <HAL_GetTick>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e82:	e009      	b.n	8002e98 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7ff fb50 	bl	8002528 <HAL_GetTick>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	4aa5      	ldr	r2, [pc, #660]	@ (8003124 <HAL_RCC_OscConfig+0x680>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e185      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e98:	4ba1      	ldr	r3, [pc, #644]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ea2:	231f      	movs	r3, #31
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eac:	4b9c      	ldr	r3, [pc, #624]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	4b9b      	ldr	r3, [pc, #620]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002eb2:	499d      	ldr	r1, [pc, #628]	@ (8003128 <HAL_RCC_OscConfig+0x684>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d063      	beq.n	8002f8a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d12a      	bne.n	8002f20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002eca:	4b95      	ldr	r3, [pc, #596]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ece:	4b94      	ldr	r3, [pc, #592]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002ed6:	4b92      	ldr	r3, [pc, #584]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eda:	4b91      	ldr	r3, [pc, #580]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002edc:	2101      	movs	r1, #1
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7ff fb21 	bl	8002528 <HAL_GetTick>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002eec:	f7ff fb1c 	bl	8002528 <HAL_GetTick>
 8002ef0:	0002      	movs	r2, r0
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e152      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002efe:	4b88      	ldr	r3, [pc, #544]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f02:	2202      	movs	r2, #2
 8002f04:	4013      	ands	r3, r2
 8002f06:	d0f1      	beq.n	8002eec <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f08:	4b85      	ldr	r3, [pc, #532]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0c:	22f8      	movs	r2, #248	@ 0xf8
 8002f0e:	4393      	bics	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	00da      	lsls	r2, r3, #3
 8002f18:	4b81      	ldr	r3, [pc, #516]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f1e:	e034      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	3305      	adds	r3, #5
 8002f26:	d111      	bne.n	8002f4c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002f28:	4b7d      	ldr	r3, [pc, #500]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f2c:	4b7c      	ldr	r3, [pc, #496]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f2e:	2104      	movs	r1, #4
 8002f30:	438a      	bics	r2, r1
 8002f32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f34:	4b7a      	ldr	r3, [pc, #488]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f38:	22f8      	movs	r2, #248	@ 0xf8
 8002f3a:	4393      	bics	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	00da      	lsls	r2, r3, #3
 8002f44:	4b76      	ldr	r3, [pc, #472]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f46:	430a      	orrs	r2, r1
 8002f48:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f4a:	e01e      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f4c:	4b74      	ldr	r3, [pc, #464]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f50:	4b73      	ldr	r3, [pc, #460]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f52:	2104      	movs	r1, #4
 8002f54:	430a      	orrs	r2, r1
 8002f56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f58:	4b71      	ldr	r3, [pc, #452]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f5c:	4b70      	ldr	r3, [pc, #448]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f5e:	2101      	movs	r1, #1
 8002f60:	438a      	bics	r2, r1
 8002f62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f64:	f7ff fae0 	bl	8002528 <HAL_GetTick>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f6e:	f7ff fadb 	bl	8002528 <HAL_GetTick>
 8002f72:	0002      	movs	r2, r0
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e111      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f80:	4b67      	ldr	r3, [pc, #412]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f84:	2202      	movs	r2, #2
 8002f86:	4013      	ands	r3, r2
 8002f88:	d1f1      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	4013      	ands	r3, r2
 8002f92:	d05c      	beq.n	800304e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f94:	4b62      	ldr	r3, [pc, #392]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	220c      	movs	r2, #12
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b0c      	cmp	r3, #12
 8002f9e:	d00e      	beq.n	8002fbe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002fa0:	4b5f      	ldr	r3, [pc, #380]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	220c      	movs	r2, #12
 8002fa6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d114      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002fac:	4b5c      	ldr	r3, [pc, #368]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	23c0      	movs	r3, #192	@ 0xc0
 8002fb2:	025b      	lsls	r3, r3, #9
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	23c0      	movs	r3, #192	@ 0xc0
 8002fb8:	025b      	lsls	r3, r3, #9
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002fbe:	4b58      	ldr	r3, [pc, #352]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fc2:	2380      	movs	r3, #128	@ 0x80
 8002fc4:	029b      	lsls	r3, r3, #10
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d040      	beq.n	800304c <HAL_RCC_OscConfig+0x5a8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d03c      	beq.n	800304c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0e6      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01b      	beq.n	8003016 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002fde:	4b50      	ldr	r3, [pc, #320]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8002fe4:	2180      	movs	r1, #128	@ 0x80
 8002fe6:	0249      	lsls	r1, r1, #9
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7ff fa9c 	bl	8002528 <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff6:	f7ff fa97 	bl	8002528 <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0cd      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003008:	4b45      	ldr	r3, [pc, #276]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 800300a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800300c:	2380      	movs	r3, #128	@ 0x80
 800300e:	029b      	lsls	r3, r3, #10
 8003010:	4013      	ands	r3, r2
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x552>
 8003014:	e01b      	b.n	800304e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003016:	4b42      	ldr	r3, [pc, #264]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8003018:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800301a:	4b41      	ldr	r3, [pc, #260]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 800301c:	4943      	ldr	r1, [pc, #268]	@ (800312c <HAL_RCC_OscConfig+0x688>)
 800301e:	400a      	ands	r2, r1
 8003020:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7ff fa81 	bl	8002528 <HAL_GetTick>
 8003026:	0003      	movs	r3, r0
 8003028:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800302c:	f7ff fa7c 	bl	8002528 <HAL_GetTick>
 8003030:	0002      	movs	r2, r0
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0b2      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800303e:	4b38      	ldr	r3, [pc, #224]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8003040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003042:	2380      	movs	r3, #128	@ 0x80
 8003044:	029b      	lsls	r3, r3, #10
 8003046:	4013      	ands	r3, r2
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x588>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800304c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	d100      	bne.n	8003058 <HAL_RCC_OscConfig+0x5b4>
 8003056:	e0a4      	b.n	80031a2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003058:	4b31      	ldr	r3, [pc, #196]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	220c      	movs	r2, #12
 800305e:	4013      	ands	r3, r2
 8003060:	2b08      	cmp	r3, #8
 8003062:	d100      	bne.n	8003066 <HAL_RCC_OscConfig+0x5c2>
 8003064:	e078      	b.n	8003158 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	2b02      	cmp	r3, #2
 800306c:	d14c      	bne.n	8003108 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b2c      	ldr	r3, [pc, #176]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4b2b      	ldr	r3, [pc, #172]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8003074:	492e      	ldr	r1, [pc, #184]	@ (8003130 <HAL_RCC_OscConfig+0x68c>)
 8003076:	400a      	ands	r2, r1
 8003078:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7ff fa55 	bl	8002528 <HAL_GetTick>
 800307e:	0003      	movs	r3, r0
 8003080:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003084:	f7ff fa50 	bl	8002528 <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e086      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003096:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	2380      	movs	r3, #128	@ 0x80
 800309c:	049b      	lsls	r3, r3, #18
 800309e:	4013      	ands	r3, r2
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a6:	220f      	movs	r2, #15
 80030a8:	4393      	bics	r3, r2
 80030aa:	0019      	movs	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030b2:	430a      	orrs	r2, r1
 80030b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003134 <HAL_RCC_OscConfig+0x690>)
 80030bc:	4013      	ands	r3, r2
 80030be:	0019      	movs	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	431a      	orrs	r2, r3
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d0:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b12      	ldr	r3, [pc, #72]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030d6:	2180      	movs	r1, #128	@ 0x80
 80030d8:	0449      	lsls	r1, r1, #17
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7ff fa23 	bl	8002528 <HAL_GetTick>
 80030e2:	0003      	movs	r3, r0
 80030e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7ff fa1e 	bl	8002528 <HAL_GetTick>
 80030ec:	0002      	movs	r2, r0
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e054      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030fa:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	2380      	movs	r3, #128	@ 0x80
 8003100:	049b      	lsls	r3, r3, #18
 8003102:	4013      	ands	r3, r2
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x644>
 8003106:	e04c      	b.n	80031a2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b04      	ldr	r3, [pc, #16]	@ (8003120 <HAL_RCC_OscConfig+0x67c>)
 800310e:	4908      	ldr	r1, [pc, #32]	@ (8003130 <HAL_RCC_OscConfig+0x68c>)
 8003110:	400a      	ands	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7ff fa08 	bl	8002528 <HAL_GetTick>
 8003118:	0003      	movs	r3, r0
 800311a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	e015      	b.n	800314a <HAL_RCC_OscConfig+0x6a6>
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	40021000 	.word	0x40021000
 8003124:	00001388 	.word	0x00001388
 8003128:	efffffff 	.word	0xefffffff
 800312c:	fffeffff 	.word	0xfffeffff
 8003130:	feffffff 	.word	0xfeffffff
 8003134:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003138:	f7ff f9f6 	bl	8002528 <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e02c      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314a:	4b18      	ldr	r3, [pc, #96]	@ (80031ac <HAL_RCC_OscConfig+0x708>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	049b      	lsls	r3, r3, #18
 8003152:	4013      	ands	r3, r2
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x694>
 8003156:	e024      	b.n	80031a2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e01f      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003164:	4b11      	ldr	r3, [pc, #68]	@ (80031ac <HAL_RCC_OscConfig+0x708>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <HAL_RCC_OscConfig+0x708>)
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	23c0      	movs	r3, #192	@ 0xc0
 8003174:	025b      	lsls	r3, r3, #9
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317c:	429a      	cmp	r2, r3
 800317e:	d10e      	bne.n	800319e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	220f      	movs	r2, #15
 8003184:	401a      	ands	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d107      	bne.n	800319e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	23f0      	movs	r3, #240	@ 0xf0
 8003192:	039b      	lsls	r3, r3, #14
 8003194:	401a      	ands	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	0018      	movs	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b008      	add	sp, #32
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000

080031b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0bf      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c4:	4b61      	ldr	r3, [pc, #388]	@ (800334c <HAL_RCC_ClockConfig+0x19c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2201      	movs	r2, #1
 80031ca:	4013      	ands	r3, r2
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d911      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b5e      	ldr	r3, [pc, #376]	@ (800334c <HAL_RCC_ClockConfig+0x19c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	4393      	bics	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	4b5b      	ldr	r3, [pc, #364]	@ (800334c <HAL_RCC_ClockConfig+0x19c>)
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e4:	4b59      	ldr	r3, [pc, #356]	@ (800334c <HAL_RCC_ClockConfig+0x19c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2201      	movs	r2, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0a6      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2202      	movs	r2, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d015      	beq.n	800322c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2204      	movs	r2, #4
 8003206:	4013      	ands	r3, r2
 8003208:	d006      	beq.n	8003218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800320a:	4b51      	ldr	r3, [pc, #324]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	4b50      	ldr	r3, [pc, #320]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003210:	21e0      	movs	r1, #224	@ 0xe0
 8003212:	00c9      	lsls	r1, r1, #3
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003218:	4b4d      	ldr	r3, [pc, #308]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	22f0      	movs	r2, #240	@ 0xf0
 800321e:	4393      	bics	r3, r2
 8003220:	0019      	movs	r1, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	4b4a      	ldr	r3, [pc, #296]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	4013      	ands	r3, r2
 8003234:	d04c      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	4b44      	ldr	r3, [pc, #272]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	029b      	lsls	r3, r3, #10
 8003246:	4013      	ands	r3, r2
 8003248:	d120      	bne.n	800328c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e07a      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003256:	4b3e      	ldr	r3, [pc, #248]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	049b      	lsls	r3, r3, #18
 800325e:	4013      	ands	r3, r2
 8003260:	d114      	bne.n	800328c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e06e      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800326e:	4b38      	ldr	r3, [pc, #224]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003272:	2380      	movs	r3, #128	@ 0x80
 8003274:	029b      	lsls	r3, r3, #10
 8003276:	4013      	ands	r3, r2
 8003278:	d108      	bne.n	800328c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e062      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	4b34      	ldr	r3, [pc, #208]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2202      	movs	r2, #2
 8003284:	4013      	ands	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e05b      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328c:	4b30      	ldr	r3, [pc, #192]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	4393      	bics	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	4b2d      	ldr	r3, [pc, #180]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a0:	f7ff f942 	bl	8002528 <HAL_GetTick>
 80032a4:	0003      	movs	r3, r0
 80032a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a8:	e009      	b.n	80032be <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032aa:	f7ff f93d 	bl	8002528 <HAL_GetTick>
 80032ae:	0002      	movs	r2, r0
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	4a27      	ldr	r2, [pc, #156]	@ (8003354 <HAL_RCC_ClockConfig+0x1a4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e042      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	220c      	movs	r2, #12
 80032c4:	401a      	ands	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1ec      	bne.n	80032aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b1e      	ldr	r3, [pc, #120]	@ (800334c <HAL_RCC_ClockConfig+0x19c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2201      	movs	r2, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d211      	bcs.n	8003302 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <HAL_RCC_ClockConfig+0x19c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2201      	movs	r2, #1
 80032e4:	4393      	bics	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	4b18      	ldr	r3, [pc, #96]	@ (800334c <HAL_RCC_ClockConfig+0x19c>)
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f0:	4b16      	ldr	r3, [pc, #88]	@ (800334c <HAL_RCC_ClockConfig+0x19c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2201      	movs	r2, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e020      	b.n	8003344 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2204      	movs	r2, #4
 8003308:	4013      	ands	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800330c:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a11      	ldr	r2, [pc, #68]	@ (8003358 <HAL_RCC_ClockConfig+0x1a8>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003320:	f000 f820 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003324:	0001      	movs	r1, r0
 8003326:	4b0a      	ldr	r3, [pc, #40]	@ (8003350 <HAL_RCC_ClockConfig+0x1a0>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	220f      	movs	r2, #15
 800332e:	4013      	ands	r3, r2
 8003330:	4a0a      	ldr	r2, [pc, #40]	@ (800335c <HAL_RCC_ClockConfig+0x1ac>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	000a      	movs	r2, r1
 8003336:	40da      	lsrs	r2, r3
 8003338:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <HAL_RCC_ClockConfig+0x1b0>)
 800333a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800333c:	2000      	movs	r0, #0
 800333e:	f7ff f8ad 	bl	800249c <HAL_InitTick>
  
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b004      	add	sp, #16
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40022000 	.word	0x40022000
 8003350:	40021000 	.word	0x40021000
 8003354:	00001388 	.word	0x00001388
 8003358:	fffff8ff 	.word	0xfffff8ff
 800335c:	08003dd4 	.word	0x08003dd4
 8003360:	20000000 	.word	0x20000000

08003364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800337e:	4b2d      	ldr	r3, [pc, #180]	@ (8003434 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	220c      	movs	r2, #12
 8003388:	4013      	ands	r3, r2
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d046      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0xb8>
 800338e:	d848      	bhi.n	8003422 <HAL_RCC_GetSysClockFreq+0xbe>
 8003390:	2b04      	cmp	r3, #4
 8003392:	d002      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x36>
 8003394:	2b08      	cmp	r3, #8
 8003396:	d003      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x3c>
 8003398:	e043      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <HAL_RCC_GetSysClockFreq+0xd4>)
 800339c:	613b      	str	r3, [r7, #16]
      break;
 800339e:	e043      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	0c9b      	lsrs	r3, r3, #18
 80033a4:	220f      	movs	r2, #15
 80033a6:	4013      	ands	r3, r2
 80033a8:	4a24      	ldr	r2, [pc, #144]	@ (800343c <HAL_RCC_GetSysClockFreq+0xd8>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80033ae:	4b21      	ldr	r3, [pc, #132]	@ (8003434 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	220f      	movs	r2, #15
 80033b4:	4013      	ands	r3, r2
 80033b6:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <HAL_RCC_GetSysClockFreq+0xdc>)
 80033b8:	5cd3      	ldrb	r3, [r2, r3]
 80033ba:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	23c0      	movs	r3, #192	@ 0xc0
 80033c0:	025b      	lsls	r3, r3, #9
 80033c2:	401a      	ands	r2, r3
 80033c4:	2380      	movs	r3, #128	@ 0x80
 80033c6:	025b      	lsls	r3, r3, #9
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d109      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	481a      	ldr	r0, [pc, #104]	@ (8003438 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033d0:	f7fc fe9a 	bl	8000108 <__udivsi3>
 80033d4:	0003      	movs	r3, r0
 80033d6:	001a      	movs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4353      	muls	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e01a      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	23c0      	movs	r3, #192	@ 0xc0
 80033e4:	025b      	lsls	r3, r3, #9
 80033e6:	401a      	ands	r2, r3
 80033e8:	23c0      	movs	r3, #192	@ 0xc0
 80033ea:	025b      	lsls	r3, r3, #9
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d109      	bne.n	8003404 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	4814      	ldr	r0, [pc, #80]	@ (8003444 <HAL_RCC_GetSysClockFreq+0xe0>)
 80033f4:	f7fc fe88 	bl	8000108 <__udivsi3>
 80033f8:	0003      	movs	r3, r0
 80033fa:	001a      	movs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4353      	muls	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e008      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	480c      	ldr	r0, [pc, #48]	@ (8003438 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003408:	f7fc fe7e 	bl	8000108 <__udivsi3>
 800340c:	0003      	movs	r3, r0
 800340e:	001a      	movs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4353      	muls	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	613b      	str	r3, [r7, #16]
      break;
 800341a:	e005      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800341c:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <HAL_RCC_GetSysClockFreq+0xe0>)
 800341e:	613b      	str	r3, [r7, #16]
      break;
 8003420:	e002      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003422:	4b05      	ldr	r3, [pc, #20]	@ (8003438 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003424:	613b      	str	r3, [r7, #16]
      break;
 8003426:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003428:	693b      	ldr	r3, [r7, #16]
}
 800342a:	0018      	movs	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	b006      	add	sp, #24
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	40021000 	.word	0x40021000
 8003438:	007a1200 	.word	0x007a1200
 800343c:	08003de4 	.word	0x08003de4
 8003440:	08003df4 	.word	0x08003df4
 8003444:	02dc6c00 	.word	0x02dc6c00

08003448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e042      	b.n	80034e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	223d      	movs	r2, #61	@ 0x3d
 800345e:	5c9b      	ldrb	r3, [r3, r2]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d107      	bne.n	8003476 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	223c      	movs	r2, #60	@ 0x3c
 800346a:	2100      	movs	r1, #0
 800346c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0018      	movs	r0, r3
 8003472:	f7fe ff59 	bl	8002328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	223d      	movs	r2, #61	@ 0x3d
 800347a:	2102      	movs	r1, #2
 800347c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	0019      	movs	r1, r3
 8003488:	0010      	movs	r0, r2
 800348a:	f000 faab 	bl	80039e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2246      	movs	r2, #70	@ 0x46
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	223e      	movs	r2, #62	@ 0x3e
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	223f      	movs	r2, #63	@ 0x3f
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2240      	movs	r2, #64	@ 0x40
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2241      	movs	r2, #65	@ 0x41
 80034b2:	2101      	movs	r1, #1
 80034b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2242      	movs	r2, #66	@ 0x42
 80034ba:	2101      	movs	r1, #1
 80034bc:	5499      	strb	r1, [r3, r2]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2243      	movs	r2, #67	@ 0x43
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2244      	movs	r2, #68	@ 0x44
 80034ca:	2101      	movs	r1, #1
 80034cc:	5499      	strb	r1, [r3, r2]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2245      	movs	r2, #69	@ 0x45
 80034d2:	2101      	movs	r1, #1
 80034d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	223d      	movs	r2, #61	@ 0x3d
 80034da:	2101      	movs	r1, #1
 80034dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	0018      	movs	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b002      	add	sp, #8
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	223d      	movs	r2, #61	@ 0x3d
 80034f4:	5c9b      	ldrb	r3, [r3, r2]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e033      	b.n	8003568 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	223d      	movs	r2, #61	@ 0x3d
 8003504:	2102      	movs	r1, #2
 8003506:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a18      	ldr	r2, [pc, #96]	@ (8003570 <HAL_TIM_Base_Start+0x88>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00f      	beq.n	8003532 <HAL_TIM_Base_Start+0x4a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	05db      	lsls	r3, r3, #23
 800351a:	429a      	cmp	r2, r3
 800351c:	d009      	beq.n	8003532 <HAL_TIM_Base_Start+0x4a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a14      	ldr	r2, [pc, #80]	@ (8003574 <HAL_TIM_Base_Start+0x8c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_TIM_Base_Start+0x4a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a12      	ldr	r2, [pc, #72]	@ (8003578 <HAL_TIM_Base_Start+0x90>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d111      	bne.n	8003556 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2207      	movs	r2, #7
 800353a:	4013      	ands	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b06      	cmp	r3, #6
 8003542:	d010      	beq.n	8003566 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003554:	e007      	b.n	8003566 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2101      	movs	r1, #1
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b004      	add	sp, #16
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40000400 	.word	0x40000400
 8003578:	40014000 	.word	0x40014000

0800357c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	223d      	movs	r2, #61	@ 0x3d
 8003588:	5c9b      	ldrb	r3, [r3, r2]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d001      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e03b      	b.n	800360c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	223d      	movs	r2, #61	@ 0x3d
 8003598:	2102      	movs	r1, #2
 800359a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2101      	movs	r1, #1
 80035a8:	430a      	orrs	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a18      	ldr	r2, [pc, #96]	@ (8003614 <HAL_TIM_Base_Start_IT+0x98>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00f      	beq.n	80035d6 <HAL_TIM_Base_Start_IT+0x5a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	2380      	movs	r3, #128	@ 0x80
 80035bc:	05db      	lsls	r3, r3, #23
 80035be:	429a      	cmp	r2, r3
 80035c0:	d009      	beq.n	80035d6 <HAL_TIM_Base_Start_IT+0x5a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a14      	ldr	r2, [pc, #80]	@ (8003618 <HAL_TIM_Base_Start_IT+0x9c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIM_Base_Start_IT+0x5a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a12      	ldr	r2, [pc, #72]	@ (800361c <HAL_TIM_Base_Start_IT+0xa0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d111      	bne.n	80035fa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2207      	movs	r2, #7
 80035de:	4013      	ands	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b06      	cmp	r3, #6
 80035e6:	d010      	beq.n	800360a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	e007      	b.n	800360a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40014000 	.word	0x40014000

08003620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2202      	movs	r2, #2
 800363c:	4013      	ands	r3, r2
 800363e:	d021      	beq.n	8003684 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2202      	movs	r2, #2
 8003644:	4013      	ands	r3, r2
 8003646:	d01d      	beq.n	8003684 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2203      	movs	r2, #3
 800364e:	4252      	negs	r2, r2
 8003650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2203      	movs	r2, #3
 8003660:	4013      	ands	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	0018      	movs	r0, r3
 8003668:	f000 f9a4 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 800366c:	e007      	b.n	800367e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	0018      	movs	r0, r3
 8003672:	f000 f997 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0018      	movs	r0, r3
 800367a:	f000 f9a3 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2204      	movs	r2, #4
 8003688:	4013      	ands	r3, r2
 800368a:	d022      	beq.n	80036d2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2204      	movs	r2, #4
 8003690:	4013      	ands	r3, r2
 8003692:	d01e      	beq.n	80036d2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2205      	movs	r2, #5
 800369a:	4252      	negs	r2, r2
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	23c0      	movs	r3, #192	@ 0xc0
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4013      	ands	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 f97d 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 80036ba:	e007      	b.n	80036cc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 f970 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f97c 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2208      	movs	r2, #8
 80036d6:	4013      	ands	r3, r2
 80036d8:	d021      	beq.n	800371e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2208      	movs	r2, #8
 80036de:	4013      	ands	r3, r2
 80036e0:	d01d      	beq.n	800371e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2209      	movs	r2, #9
 80036e8:	4252      	negs	r2, r2
 80036ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2204      	movs	r2, #4
 80036f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	2203      	movs	r2, #3
 80036fa:	4013      	ands	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	0018      	movs	r0, r3
 8003702:	f000 f957 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 8003706:	e007      	b.n	8003718 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	0018      	movs	r0, r3
 800370c:	f000 f94a 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0018      	movs	r0, r3
 8003714:	f000 f956 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2210      	movs	r2, #16
 8003722:	4013      	ands	r3, r2
 8003724:	d022      	beq.n	800376c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2210      	movs	r2, #16
 800372a:	4013      	ands	r3, r2
 800372c:	d01e      	beq.n	800376c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2211      	movs	r2, #17
 8003734:	4252      	negs	r2, r2
 8003736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2208      	movs	r2, #8
 800373c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	23c0      	movs	r3, #192	@ 0xc0
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4013      	ands	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	0018      	movs	r0, r3
 8003750:	f000 f930 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 8003754:	e007      	b.n	8003766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	0018      	movs	r0, r3
 800375a:	f000 f923 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f000 f92f 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2201      	movs	r2, #1
 8003770:	4013      	ands	r3, r2
 8003772:	d00c      	beq.n	800378e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	4013      	ands	r3, r2
 800377a:	d008      	beq.n	800378e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2202      	movs	r2, #2
 8003782:	4252      	negs	r2, r2
 8003784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f7fe fd87 	bl	800229c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2280      	movs	r2, #128	@ 0x80
 8003792:	4013      	ands	r3, r2
 8003794:	d00c      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2280      	movs	r2, #128	@ 0x80
 800379a:	4013      	ands	r3, r2
 800379c:	d008      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2281      	movs	r2, #129	@ 0x81
 80037a4:	4252      	negs	r2, r2
 80037a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 faa8 	bl	8003d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2240      	movs	r2, #64	@ 0x40
 80037b4:	4013      	ands	r3, r2
 80037b6:	d00c      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2240      	movs	r2, #64	@ 0x40
 80037bc:	4013      	ands	r3, r2
 80037be:	d008      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2241      	movs	r2, #65	@ 0x41
 80037c6:	4252      	negs	r2, r2
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 f901 	bl	80039d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2220      	movs	r2, #32
 80037d6:	4013      	ands	r3, r2
 80037d8:	d00c      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	4013      	ands	r3, r2
 80037e0:	d008      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2221      	movs	r2, #33	@ 0x21
 80037e8:	4252      	negs	r2, r2
 80037ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	0018      	movs	r0, r3
 80037f0:	f000 fa7e 	bl	8003cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b004      	add	sp, #16
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	230f      	movs	r3, #15
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	223c      	movs	r2, #60	@ 0x3c
 8003812:	5c9b      	ldrb	r3, [r3, r2]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_TIM_ConfigClockSource+0x20>
 8003818:	2302      	movs	r3, #2
 800381a:	e0bc      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x19a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	223c      	movs	r2, #60	@ 0x3c
 8003820:	2101      	movs	r1, #1
 8003822:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	223d      	movs	r2, #61	@ 0x3d
 8003828:	2102      	movs	r1, #2
 800382a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2277      	movs	r2, #119	@ 0x77
 8003838:	4393      	bics	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4a58      	ldr	r2, [pc, #352]	@ (80039a0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2280      	movs	r2, #128	@ 0x80
 8003852:	0192      	lsls	r2, r2, #6
 8003854:	4293      	cmp	r3, r2
 8003856:	d040      	beq.n	80038da <HAL_TIM_ConfigClockSource+0xde>
 8003858:	2280      	movs	r2, #128	@ 0x80
 800385a:	0192      	lsls	r2, r2, #6
 800385c:	4293      	cmp	r3, r2
 800385e:	d900      	bls.n	8003862 <HAL_TIM_ConfigClockSource+0x66>
 8003860:	e088      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
 8003862:	2280      	movs	r2, #128	@ 0x80
 8003864:	0152      	lsls	r2, r2, #5
 8003866:	4293      	cmp	r3, r2
 8003868:	d100      	bne.n	800386c <HAL_TIM_ConfigClockSource+0x70>
 800386a:	e088      	b.n	800397e <HAL_TIM_ConfigClockSource+0x182>
 800386c:	2280      	movs	r2, #128	@ 0x80
 800386e:	0152      	lsls	r2, r2, #5
 8003870:	4293      	cmp	r3, r2
 8003872:	d900      	bls.n	8003876 <HAL_TIM_ConfigClockSource+0x7a>
 8003874:	e07e      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
 8003876:	2b70      	cmp	r3, #112	@ 0x70
 8003878:	d018      	beq.n	80038ac <HAL_TIM_ConfigClockSource+0xb0>
 800387a:	d900      	bls.n	800387e <HAL_TIM_ConfigClockSource+0x82>
 800387c:	e07a      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
 800387e:	2b60      	cmp	r3, #96	@ 0x60
 8003880:	d04f      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x126>
 8003882:	d900      	bls.n	8003886 <HAL_TIM_ConfigClockSource+0x8a>
 8003884:	e076      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
 8003886:	2b50      	cmp	r3, #80	@ 0x50
 8003888:	d03b      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x106>
 800388a:	d900      	bls.n	800388e <HAL_TIM_ConfigClockSource+0x92>
 800388c:	e072      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
 800388e:	2b40      	cmp	r3, #64	@ 0x40
 8003890:	d057      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0x146>
 8003892:	d900      	bls.n	8003896 <HAL_TIM_ConfigClockSource+0x9a>
 8003894:	e06e      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
 8003896:	2b30      	cmp	r3, #48	@ 0x30
 8003898:	d063      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x166>
 800389a:	d86b      	bhi.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
 800389c:	2b20      	cmp	r3, #32
 800389e:	d060      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x166>
 80038a0:	d868      	bhi.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d05d      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x166>
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d05b      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x166>
 80038aa:	e063      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038bc:	f000 f99a 	bl	8003bf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2277      	movs	r2, #119	@ 0x77
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	609a      	str	r2, [r3, #8]
      break;
 80038d8:	e052      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ea:	f000 f983 	bl	8003bf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2180      	movs	r1, #128	@ 0x80
 80038fa:	01c9      	lsls	r1, r1, #7
 80038fc:	430a      	orrs	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
      break;
 8003900:	e03e      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	001a      	movs	r2, r3
 8003910:	f000 f8f6 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2150      	movs	r1, #80	@ 0x50
 800391a:	0018      	movs	r0, r3
 800391c:	f000 f950 	bl	8003bc0 <TIM_ITRx_SetConfig>
      break;
 8003920:	e02e      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800392e:	001a      	movs	r2, r3
 8003930:	f000 f914 	bl	8003b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2160      	movs	r1, #96	@ 0x60
 800393a:	0018      	movs	r0, r3
 800393c:	f000 f940 	bl	8003bc0 <TIM_ITRx_SetConfig>
      break;
 8003940:	e01e      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	001a      	movs	r2, r3
 8003950:	f000 f8d6 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2140      	movs	r1, #64	@ 0x40
 800395a:	0018      	movs	r0, r3
 800395c:	f000 f930 	bl	8003bc0 <TIM_ITRx_SetConfig>
      break;
 8003960:	e00e      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	0019      	movs	r1, r3
 800396c:	0010      	movs	r0, r2
 800396e:	f000 f927 	bl	8003bc0 <TIM_ITRx_SetConfig>
      break;
 8003972:	e005      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003974:	230f      	movs	r3, #15
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
      break;
 800397c:	e000      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800397e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	223d      	movs	r2, #61	@ 0x3d
 8003984:	2101      	movs	r1, #1
 8003986:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	223c      	movs	r2, #60	@ 0x3c
 800398c:	2100      	movs	r1, #0
 800398e:	5499      	strb	r1, [r3, r2]

  return status;
 8003990:	230f      	movs	r3, #15
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	781b      	ldrb	r3, [r3, #0]
}
 8003996:	0018      	movs	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	b004      	add	sp, #16
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			@ (mov r8, r8)
 80039a0:	ffff00ff 	.word	0xffff00ff

080039a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ac:	46c0      	nop			@ (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039bc:	46c0      	nop			@ (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b002      	add	sp, #8
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039cc:	46c0      	nop			@ (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b002      	add	sp, #8
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039dc:	46c0      	nop			@ (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	b002      	add	sp, #8
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ae4 <TIM_Base_SetConfig+0x100>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d008      	beq.n	8003a0e <TIM_Base_SetConfig+0x2a>
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	2380      	movs	r3, #128	@ 0x80
 8003a00:	05db      	lsls	r3, r3, #23
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d003      	beq.n	8003a0e <TIM_Base_SetConfig+0x2a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a37      	ldr	r2, [pc, #220]	@ (8003ae8 <TIM_Base_SetConfig+0x104>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d108      	bne.n	8003a20 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2270      	movs	r2, #112	@ 0x70
 8003a12:	4393      	bics	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a30      	ldr	r2, [pc, #192]	@ (8003ae4 <TIM_Base_SetConfig+0x100>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d018      	beq.n	8003a5a <TIM_Base_SetConfig+0x76>
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	2380      	movs	r3, #128	@ 0x80
 8003a2c:	05db      	lsls	r3, r3, #23
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d013      	beq.n	8003a5a <TIM_Base_SetConfig+0x76>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae8 <TIM_Base_SetConfig+0x104>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00f      	beq.n	8003a5a <TIM_Base_SetConfig+0x76>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003aec <TIM_Base_SetConfig+0x108>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <TIM_Base_SetConfig+0x76>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a2a      	ldr	r2, [pc, #168]	@ (8003af0 <TIM_Base_SetConfig+0x10c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <TIM_Base_SetConfig+0x76>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a29      	ldr	r2, [pc, #164]	@ (8003af4 <TIM_Base_SetConfig+0x110>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_Base_SetConfig+0x76>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a28      	ldr	r2, [pc, #160]	@ (8003af8 <TIM_Base_SetConfig+0x114>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a27      	ldr	r2, [pc, #156]	@ (8003afc <TIM_Base_SetConfig+0x118>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2280      	movs	r2, #128	@ 0x80
 8003a70:	4393      	bics	r3, r2
 8003a72:	001a      	movs	r2, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a13      	ldr	r2, [pc, #76]	@ (8003ae4 <TIM_Base_SetConfig+0x100>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00b      	beq.n	8003ab2 <TIM_Base_SetConfig+0xce>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a14      	ldr	r2, [pc, #80]	@ (8003af0 <TIM_Base_SetConfig+0x10c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d007      	beq.n	8003ab2 <TIM_Base_SetConfig+0xce>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a13      	ldr	r2, [pc, #76]	@ (8003af4 <TIM_Base_SetConfig+0x110>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <TIM_Base_SetConfig+0xce>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <TIM_Base_SetConfig+0x114>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d103      	bne.n	8003aba <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d106      	bne.n	8003ada <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4393      	bics	r3, r2
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	611a      	str	r2, [r3, #16]
  }
}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b004      	add	sp, #16
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40002000 	.word	0x40002000
 8003af0:	40014000 	.word	0x40014000
 8003af4:	40014400 	.word	0x40014400
 8003af8:	40014800 	.word	0x40014800
 8003afc:	fffffcff 	.word	0xfffffcff

08003b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	2201      	movs	r2, #1
 8003b18:	4393      	bics	r3, r2
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	22f0      	movs	r2, #240	@ 0xf0
 8003b2a:	4393      	bics	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	220a      	movs	r2, #10
 8003b3c:	4393      	bics	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	46c0      	nop			@ (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b006      	add	sp, #24
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	2210      	movs	r2, #16
 8003b74:	4393      	bics	r3, r2
 8003b76:	001a      	movs	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4a0d      	ldr	r2, [pc, #52]	@ (8003bbc <TIM_TI2_ConfigInputStage+0x60>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	031b      	lsls	r3, r3, #12
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	22a0      	movs	r2, #160	@ 0xa0
 8003b98:	4393      	bics	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b006      	add	sp, #24
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	ffff0fff 	.word	0xffff0fff

08003bc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2270      	movs	r2, #112	@ 0x70
 8003bd4:	4393      	bics	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	2207      	movs	r2, #7
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	609a      	str	r2, [r3, #8]
}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b004      	add	sp, #16
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4a09      	ldr	r2, [pc, #36]	@ (8003c30 <TIM_ETR_SetConfig+0x3c>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	46c0      	nop			@ (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b006      	add	sp, #24
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	ffff00ff 	.word	0xffff00ff

08003c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	223c      	movs	r2, #60	@ 0x3c
 8003c42:	5c9b      	ldrb	r3, [r3, r2]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e047      	b.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	223c      	movs	r2, #60	@ 0x3c
 8003c50:	2101      	movs	r1, #1
 8003c52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	223d      	movs	r2, #61	@ 0x3d
 8003c58:	2102      	movs	r1, #2
 8003c5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2270      	movs	r2, #112	@ 0x70
 8003c70:	4393      	bics	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a16      	ldr	r2, [pc, #88]	@ (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00f      	beq.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	2380      	movs	r3, #128	@ 0x80
 8003c96:	05db      	lsls	r3, r3, #23
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d009      	beq.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a11      	ldr	r2, [pc, #68]	@ (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a10      	ldr	r2, [pc, #64]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10c      	bne.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2280      	movs	r2, #128	@ 0x80
 8003cb4:	4393      	bics	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	223d      	movs	r2, #61	@ 0x3d
 8003cce:	2101      	movs	r1, #1
 8003cd0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	223c      	movs	r2, #60	@ 0x3c
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40014000 	.word	0x40014000

08003cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf8:	46c0      	nop			@ (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d08:	46c0      	nop			@ (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <memset>:
 8003d10:	0003      	movs	r3, r0
 8003d12:	1882      	adds	r2, r0, r2
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d100      	bne.n	8003d1a <memset+0xa>
 8003d18:	4770      	bx	lr
 8003d1a:	7019      	strb	r1, [r3, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	e7f9      	b.n	8003d14 <memset+0x4>

08003d20 <__libc_init_array>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	2600      	movs	r6, #0
 8003d24:	4c0c      	ldr	r4, [pc, #48]	@ (8003d58 <__libc_init_array+0x38>)
 8003d26:	4d0d      	ldr	r5, [pc, #52]	@ (8003d5c <__libc_init_array+0x3c>)
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	42a6      	cmp	r6, r4
 8003d2e:	d109      	bne.n	8003d44 <__libc_init_array+0x24>
 8003d30:	2600      	movs	r6, #0
 8003d32:	f000 f823 	bl	8003d7c <_init>
 8003d36:	4c0a      	ldr	r4, [pc, #40]	@ (8003d60 <__libc_init_array+0x40>)
 8003d38:	4d0a      	ldr	r5, [pc, #40]	@ (8003d64 <__libc_init_array+0x44>)
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	42a6      	cmp	r6, r4
 8003d40:	d105      	bne.n	8003d4e <__libc_init_array+0x2e>
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	00b3      	lsls	r3, r6, #2
 8003d46:	58eb      	ldr	r3, [r5, r3]
 8003d48:	4798      	blx	r3
 8003d4a:	3601      	adds	r6, #1
 8003d4c:	e7ee      	b.n	8003d2c <__libc_init_array+0xc>
 8003d4e:	00b3      	lsls	r3, r6, #2
 8003d50:	58eb      	ldr	r3, [r5, r3]
 8003d52:	4798      	blx	r3
 8003d54:	3601      	adds	r6, #1
 8003d56:	e7f2      	b.n	8003d3e <__libc_init_array+0x1e>
 8003d58:	08003e04 	.word	0x08003e04
 8003d5c:	08003e04 	.word	0x08003e04
 8003d60:	08003e08 	.word	0x08003e08
 8003d64:	08003e04 	.word	0x08003e04

08003d68 <memcpy>:
 8003d68:	2300      	movs	r3, #0
 8003d6a:	b510      	push	{r4, lr}
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d100      	bne.n	8003d72 <memcpy+0xa>
 8003d70:	bd10      	pop	{r4, pc}
 8003d72:	5ccc      	ldrb	r4, [r1, r3]
 8003d74:	54c4      	strb	r4, [r0, r3]
 8003d76:	3301      	adds	r3, #1
 8003d78:	e7f8      	b.n	8003d6c <memcpy+0x4>
	...

08003d7c <_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	46c0      	nop			@ (mov r8, r8)
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr

08003d88 <_fini>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr
