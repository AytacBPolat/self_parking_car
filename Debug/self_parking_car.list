
self_parking_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004448  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004508  08004508  00005508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004580  08004580  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004580  08004580  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004580  08004580  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004580  08004580  00005580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004584  08004584  00005584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004588  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08004594  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08004594  000060fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2d1  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019de  00000000  00000000  00012305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00013ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000918  00000000  00000000  00014868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fb5  00000000  00000000  00015180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db18  00000000  00000000  0002e135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f7a  00000000  00000000  0003bc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0bc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b28  00000000  00000000  000d0c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d3734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080044f0 	.word	0x080044f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080044f0 	.word	0x080044f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 ff61 	bl	80010f0 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fec7 	bl	8000fc8 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fb24 	bl	8000890 <__aeabi_dsub>
 8000248:	f000 febe 	bl	8000fc8 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	46de      	mov	lr, fp
 8000260:	4645      	mov	r5, r8
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	b087      	sub	sp, #28
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	030b      	lsls	r3, r1, #12
 8000270:	0b1b      	lsrs	r3, r3, #12
 8000272:	469b      	mov	fp, r3
 8000274:	0fca      	lsrs	r2, r1, #31
 8000276:	004b      	lsls	r3, r1, #1
 8000278:	0004      	movs	r4, r0
 800027a:	4680      	mov	r8, r0
 800027c:	0d5b      	lsrs	r3, r3, #21
 800027e:	9202      	str	r2, [sp, #8]
 8000280:	d100      	bne.n	8000284 <__aeabi_ddiv+0x28>
 8000282:	e16a      	b.n	800055a <__aeabi_ddiv+0x2fe>
 8000284:	4ad4      	ldr	r2, [pc, #848]	@ (80005d8 <__aeabi_ddiv+0x37c>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d100      	bne.n	800028c <__aeabi_ddiv+0x30>
 800028a:	e18c      	b.n	80005a6 <__aeabi_ddiv+0x34a>
 800028c:	4659      	mov	r1, fp
 800028e:	0f42      	lsrs	r2, r0, #29
 8000290:	00c9      	lsls	r1, r1, #3
 8000292:	430a      	orrs	r2, r1
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	0409      	lsls	r1, r1, #16
 8000298:	4311      	orrs	r1, r2
 800029a:	00c2      	lsls	r2, r0, #3
 800029c:	4690      	mov	r8, r2
 800029e:	4acf      	ldr	r2, [pc, #828]	@ (80005dc <__aeabi_ddiv+0x380>)
 80002a0:	4689      	mov	r9, r1
 80002a2:	4692      	mov	sl, r2
 80002a4:	449a      	add	sl, r3
 80002a6:	2300      	movs	r3, #0
 80002a8:	2400      	movs	r4, #0
 80002aa:	9303      	str	r3, [sp, #12]
 80002ac:	9e00      	ldr	r6, [sp, #0]
 80002ae:	9f01      	ldr	r7, [sp, #4]
 80002b0:	033b      	lsls	r3, r7, #12
 80002b2:	0b1b      	lsrs	r3, r3, #12
 80002b4:	469b      	mov	fp, r3
 80002b6:	007b      	lsls	r3, r7, #1
 80002b8:	0030      	movs	r0, r6
 80002ba:	0d5b      	lsrs	r3, r3, #21
 80002bc:	0ffd      	lsrs	r5, r7, #31
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d100      	bne.n	80002c4 <__aeabi_ddiv+0x68>
 80002c2:	e128      	b.n	8000516 <__aeabi_ddiv+0x2ba>
 80002c4:	4ac4      	ldr	r2, [pc, #784]	@ (80005d8 <__aeabi_ddiv+0x37c>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d100      	bne.n	80002cc <__aeabi_ddiv+0x70>
 80002ca:	e177      	b.n	80005bc <__aeabi_ddiv+0x360>
 80002cc:	4659      	mov	r1, fp
 80002ce:	0f72      	lsrs	r2, r6, #29
 80002d0:	00c9      	lsls	r1, r1, #3
 80002d2:	430a      	orrs	r2, r1
 80002d4:	2180      	movs	r1, #128	@ 0x80
 80002d6:	0409      	lsls	r1, r1, #16
 80002d8:	4311      	orrs	r1, r2
 80002da:	468b      	mov	fp, r1
 80002dc:	49bf      	ldr	r1, [pc, #764]	@ (80005dc <__aeabi_ddiv+0x380>)
 80002de:	00f2      	lsls	r2, r6, #3
 80002e0:	468c      	mov	ip, r1
 80002e2:	4651      	mov	r1, sl
 80002e4:	4463      	add	r3, ip
 80002e6:	1acb      	subs	r3, r1, r3
 80002e8:	469a      	mov	sl, r3
 80002ea:	2300      	movs	r3, #0
 80002ec:	9e02      	ldr	r6, [sp, #8]
 80002ee:	406e      	eors	r6, r5
 80002f0:	2c0f      	cmp	r4, #15
 80002f2:	d827      	bhi.n	8000344 <__aeabi_ddiv+0xe8>
 80002f4:	49ba      	ldr	r1, [pc, #744]	@ (80005e0 <__aeabi_ddiv+0x384>)
 80002f6:	00a4      	lsls	r4, r4, #2
 80002f8:	5909      	ldr	r1, [r1, r4]
 80002fa:	468f      	mov	pc, r1
 80002fc:	46cb      	mov	fp, r9
 80002fe:	4642      	mov	r2, r8
 8000300:	9e02      	ldr	r6, [sp, #8]
 8000302:	9b03      	ldr	r3, [sp, #12]
 8000304:	2b02      	cmp	r3, #2
 8000306:	d016      	beq.n	8000336 <__aeabi_ddiv+0xda>
 8000308:	2b03      	cmp	r3, #3
 800030a:	d100      	bne.n	800030e <__aeabi_ddiv+0xb2>
 800030c:	e2a6      	b.n	800085c <__aeabi_ddiv+0x600>
 800030e:	2b01      	cmp	r3, #1
 8000310:	d000      	beq.n	8000314 <__aeabi_ddiv+0xb8>
 8000312:	e0df      	b.n	80004d4 <__aeabi_ddiv+0x278>
 8000314:	2200      	movs	r2, #0
 8000316:	2300      	movs	r3, #0
 8000318:	2400      	movs	r4, #0
 800031a:	4690      	mov	r8, r2
 800031c:	051b      	lsls	r3, r3, #20
 800031e:	4323      	orrs	r3, r4
 8000320:	07f6      	lsls	r6, r6, #31
 8000322:	4333      	orrs	r3, r6
 8000324:	4640      	mov	r0, r8
 8000326:	0019      	movs	r1, r3
 8000328:	b007      	add	sp, #28
 800032a:	bcf0      	pop	{r4, r5, r6, r7}
 800032c:	46bb      	mov	fp, r7
 800032e:	46b2      	mov	sl, r6
 8000330:	46a9      	mov	r9, r5
 8000332:	46a0      	mov	r8, r4
 8000334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000336:	2200      	movs	r2, #0
 8000338:	2400      	movs	r4, #0
 800033a:	4690      	mov	r8, r2
 800033c:	4ba6      	ldr	r3, [pc, #664]	@ (80005d8 <__aeabi_ddiv+0x37c>)
 800033e:	e7ed      	b.n	800031c <__aeabi_ddiv+0xc0>
 8000340:	002e      	movs	r6, r5
 8000342:	e7df      	b.n	8000304 <__aeabi_ddiv+0xa8>
 8000344:	45cb      	cmp	fp, r9
 8000346:	d200      	bcs.n	800034a <__aeabi_ddiv+0xee>
 8000348:	e1d4      	b.n	80006f4 <__aeabi_ddiv+0x498>
 800034a:	d100      	bne.n	800034e <__aeabi_ddiv+0xf2>
 800034c:	e1cf      	b.n	80006ee <__aeabi_ddiv+0x492>
 800034e:	2301      	movs	r3, #1
 8000350:	425b      	negs	r3, r3
 8000352:	469c      	mov	ip, r3
 8000354:	4644      	mov	r4, r8
 8000356:	4648      	mov	r0, r9
 8000358:	2700      	movs	r7, #0
 800035a:	44e2      	add	sl, ip
 800035c:	465b      	mov	r3, fp
 800035e:	0e15      	lsrs	r5, r2, #24
 8000360:	021b      	lsls	r3, r3, #8
 8000362:	431d      	orrs	r5, r3
 8000364:	0c19      	lsrs	r1, r3, #16
 8000366:	042b      	lsls	r3, r5, #16
 8000368:	0212      	lsls	r2, r2, #8
 800036a:	9500      	str	r5, [sp, #0]
 800036c:	0c1d      	lsrs	r5, r3, #16
 800036e:	4691      	mov	r9, r2
 8000370:	9102      	str	r1, [sp, #8]
 8000372:	9503      	str	r5, [sp, #12]
 8000374:	f7ff ff4e 	bl	8000214 <__aeabi_uidivmod>
 8000378:	0002      	movs	r2, r0
 800037a:	436a      	muls	r2, r5
 800037c:	040b      	lsls	r3, r1, #16
 800037e:	0c21      	lsrs	r1, r4, #16
 8000380:	4680      	mov	r8, r0
 8000382:	4319      	orrs	r1, r3
 8000384:	428a      	cmp	r2, r1
 8000386:	d909      	bls.n	800039c <__aeabi_ddiv+0x140>
 8000388:	9d00      	ldr	r5, [sp, #0]
 800038a:	2301      	movs	r3, #1
 800038c:	46ac      	mov	ip, r5
 800038e:	425b      	negs	r3, r3
 8000390:	4461      	add	r1, ip
 8000392:	469c      	mov	ip, r3
 8000394:	44e0      	add	r8, ip
 8000396:	428d      	cmp	r5, r1
 8000398:	d800      	bhi.n	800039c <__aeabi_ddiv+0x140>
 800039a:	e1fb      	b.n	8000794 <__aeabi_ddiv+0x538>
 800039c:	1a88      	subs	r0, r1, r2
 800039e:	9902      	ldr	r1, [sp, #8]
 80003a0:	f7ff ff38 	bl	8000214 <__aeabi_uidivmod>
 80003a4:	9a03      	ldr	r2, [sp, #12]
 80003a6:	0424      	lsls	r4, r4, #16
 80003a8:	4342      	muls	r2, r0
 80003aa:	0409      	lsls	r1, r1, #16
 80003ac:	0c24      	lsrs	r4, r4, #16
 80003ae:	0003      	movs	r3, r0
 80003b0:	430c      	orrs	r4, r1
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d906      	bls.n	80003c4 <__aeabi_ddiv+0x168>
 80003b6:	9900      	ldr	r1, [sp, #0]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	468c      	mov	ip, r1
 80003bc:	4464      	add	r4, ip
 80003be:	42a1      	cmp	r1, r4
 80003c0:	d800      	bhi.n	80003c4 <__aeabi_ddiv+0x168>
 80003c2:	e1e1      	b.n	8000788 <__aeabi_ddiv+0x52c>
 80003c4:	1aa0      	subs	r0, r4, r2
 80003c6:	4642      	mov	r2, r8
 80003c8:	0412      	lsls	r2, r2, #16
 80003ca:	431a      	orrs	r2, r3
 80003cc:	4693      	mov	fp, r2
 80003ce:	464b      	mov	r3, r9
 80003d0:	4659      	mov	r1, fp
 80003d2:	0c1b      	lsrs	r3, r3, #16
 80003d4:	001d      	movs	r5, r3
 80003d6:	9304      	str	r3, [sp, #16]
 80003d8:	040b      	lsls	r3, r1, #16
 80003da:	4649      	mov	r1, r9
 80003dc:	0409      	lsls	r1, r1, #16
 80003de:	0c09      	lsrs	r1, r1, #16
 80003e0:	000c      	movs	r4, r1
 80003e2:	0c1b      	lsrs	r3, r3, #16
 80003e4:	435c      	muls	r4, r3
 80003e6:	0c12      	lsrs	r2, r2, #16
 80003e8:	436b      	muls	r3, r5
 80003ea:	4688      	mov	r8, r1
 80003ec:	4351      	muls	r1, r2
 80003ee:	436a      	muls	r2, r5
 80003f0:	0c25      	lsrs	r5, r4, #16
 80003f2:	46ac      	mov	ip, r5
 80003f4:	185b      	adds	r3, r3, r1
 80003f6:	4463      	add	r3, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d903      	bls.n	8000404 <__aeabi_ddiv+0x1a8>
 80003fc:	2180      	movs	r1, #128	@ 0x80
 80003fe:	0249      	lsls	r1, r1, #9
 8000400:	468c      	mov	ip, r1
 8000402:	4462      	add	r2, ip
 8000404:	0c19      	lsrs	r1, r3, #16
 8000406:	0424      	lsls	r4, r4, #16
 8000408:	041b      	lsls	r3, r3, #16
 800040a:	0c24      	lsrs	r4, r4, #16
 800040c:	188a      	adds	r2, r1, r2
 800040e:	191c      	adds	r4, r3, r4
 8000410:	4290      	cmp	r0, r2
 8000412:	d302      	bcc.n	800041a <__aeabi_ddiv+0x1be>
 8000414:	d116      	bne.n	8000444 <__aeabi_ddiv+0x1e8>
 8000416:	42a7      	cmp	r7, r4
 8000418:	d214      	bcs.n	8000444 <__aeabi_ddiv+0x1e8>
 800041a:	465b      	mov	r3, fp
 800041c:	9d00      	ldr	r5, [sp, #0]
 800041e:	3b01      	subs	r3, #1
 8000420:	444f      	add	r7, r9
 8000422:	9305      	str	r3, [sp, #20]
 8000424:	454f      	cmp	r7, r9
 8000426:	419b      	sbcs	r3, r3
 8000428:	46ac      	mov	ip, r5
 800042a:	425b      	negs	r3, r3
 800042c:	4463      	add	r3, ip
 800042e:	18c0      	adds	r0, r0, r3
 8000430:	4285      	cmp	r5, r0
 8000432:	d300      	bcc.n	8000436 <__aeabi_ddiv+0x1da>
 8000434:	e1a1      	b.n	800077a <__aeabi_ddiv+0x51e>
 8000436:	4282      	cmp	r2, r0
 8000438:	d900      	bls.n	800043c <__aeabi_ddiv+0x1e0>
 800043a:	e1f6      	b.n	800082a <__aeabi_ddiv+0x5ce>
 800043c:	d100      	bne.n	8000440 <__aeabi_ddiv+0x1e4>
 800043e:	e1f1      	b.n	8000824 <__aeabi_ddiv+0x5c8>
 8000440:	9b05      	ldr	r3, [sp, #20]
 8000442:	469b      	mov	fp, r3
 8000444:	1b3c      	subs	r4, r7, r4
 8000446:	42a7      	cmp	r7, r4
 8000448:	41bf      	sbcs	r7, r7
 800044a:	9d00      	ldr	r5, [sp, #0]
 800044c:	1a80      	subs	r0, r0, r2
 800044e:	427f      	negs	r7, r7
 8000450:	1bc0      	subs	r0, r0, r7
 8000452:	4285      	cmp	r5, r0
 8000454:	d100      	bne.n	8000458 <__aeabi_ddiv+0x1fc>
 8000456:	e1d0      	b.n	80007fa <__aeabi_ddiv+0x59e>
 8000458:	9902      	ldr	r1, [sp, #8]
 800045a:	f7ff fedb 	bl	8000214 <__aeabi_uidivmod>
 800045e:	9a03      	ldr	r2, [sp, #12]
 8000460:	040b      	lsls	r3, r1, #16
 8000462:	4342      	muls	r2, r0
 8000464:	0c21      	lsrs	r1, r4, #16
 8000466:	0007      	movs	r7, r0
 8000468:	4319      	orrs	r1, r3
 800046a:	428a      	cmp	r2, r1
 800046c:	d900      	bls.n	8000470 <__aeabi_ddiv+0x214>
 800046e:	e178      	b.n	8000762 <__aeabi_ddiv+0x506>
 8000470:	1a88      	subs	r0, r1, r2
 8000472:	9902      	ldr	r1, [sp, #8]
 8000474:	f7ff fece 	bl	8000214 <__aeabi_uidivmod>
 8000478:	9a03      	ldr	r2, [sp, #12]
 800047a:	0424      	lsls	r4, r4, #16
 800047c:	4342      	muls	r2, r0
 800047e:	0409      	lsls	r1, r1, #16
 8000480:	0c24      	lsrs	r4, r4, #16
 8000482:	0003      	movs	r3, r0
 8000484:	430c      	orrs	r4, r1
 8000486:	42a2      	cmp	r2, r4
 8000488:	d900      	bls.n	800048c <__aeabi_ddiv+0x230>
 800048a:	e15d      	b.n	8000748 <__aeabi_ddiv+0x4ec>
 800048c:	4641      	mov	r1, r8
 800048e:	1aa4      	subs	r4, r4, r2
 8000490:	043a      	lsls	r2, r7, #16
 8000492:	431a      	orrs	r2, r3
 8000494:	9d04      	ldr	r5, [sp, #16]
 8000496:	0413      	lsls	r3, r2, #16
 8000498:	0c1b      	lsrs	r3, r3, #16
 800049a:	4359      	muls	r1, r3
 800049c:	4647      	mov	r7, r8
 800049e:	436b      	muls	r3, r5
 80004a0:	469c      	mov	ip, r3
 80004a2:	0c10      	lsrs	r0, r2, #16
 80004a4:	4347      	muls	r7, r0
 80004a6:	0c0b      	lsrs	r3, r1, #16
 80004a8:	44bc      	add	ip, r7
 80004aa:	4463      	add	r3, ip
 80004ac:	4368      	muls	r0, r5
 80004ae:	429f      	cmp	r7, r3
 80004b0:	d903      	bls.n	80004ba <__aeabi_ddiv+0x25e>
 80004b2:	2580      	movs	r5, #128	@ 0x80
 80004b4:	026d      	lsls	r5, r5, #9
 80004b6:	46ac      	mov	ip, r5
 80004b8:	4460      	add	r0, ip
 80004ba:	0c1f      	lsrs	r7, r3, #16
 80004bc:	0409      	lsls	r1, r1, #16
 80004be:	041b      	lsls	r3, r3, #16
 80004c0:	0c09      	lsrs	r1, r1, #16
 80004c2:	183f      	adds	r7, r7, r0
 80004c4:	185b      	adds	r3, r3, r1
 80004c6:	42bc      	cmp	r4, r7
 80004c8:	d200      	bcs.n	80004cc <__aeabi_ddiv+0x270>
 80004ca:	e102      	b.n	80006d2 <__aeabi_ddiv+0x476>
 80004cc:	d100      	bne.n	80004d0 <__aeabi_ddiv+0x274>
 80004ce:	e0fd      	b.n	80006cc <__aeabi_ddiv+0x470>
 80004d0:	2301      	movs	r3, #1
 80004d2:	431a      	orrs	r2, r3
 80004d4:	4b43      	ldr	r3, [pc, #268]	@ (80005e4 <__aeabi_ddiv+0x388>)
 80004d6:	4453      	add	r3, sl
 80004d8:	2b00      	cmp	r3, #0
 80004da:	dc00      	bgt.n	80004de <__aeabi_ddiv+0x282>
 80004dc:	e0ae      	b.n	800063c <__aeabi_ddiv+0x3e0>
 80004de:	0751      	lsls	r1, r2, #29
 80004e0:	d000      	beq.n	80004e4 <__aeabi_ddiv+0x288>
 80004e2:	e198      	b.n	8000816 <__aeabi_ddiv+0x5ba>
 80004e4:	4659      	mov	r1, fp
 80004e6:	01c9      	lsls	r1, r1, #7
 80004e8:	d506      	bpl.n	80004f8 <__aeabi_ddiv+0x29c>
 80004ea:	4659      	mov	r1, fp
 80004ec:	4b3e      	ldr	r3, [pc, #248]	@ (80005e8 <__aeabi_ddiv+0x38c>)
 80004ee:	4019      	ands	r1, r3
 80004f0:	2380      	movs	r3, #128	@ 0x80
 80004f2:	468b      	mov	fp, r1
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	4453      	add	r3, sl
 80004f8:	493c      	ldr	r1, [pc, #240]	@ (80005ec <__aeabi_ddiv+0x390>)
 80004fa:	428b      	cmp	r3, r1
 80004fc:	dd00      	ble.n	8000500 <__aeabi_ddiv+0x2a4>
 80004fe:	e71a      	b.n	8000336 <__aeabi_ddiv+0xda>
 8000500:	4659      	mov	r1, fp
 8000502:	08d2      	lsrs	r2, r2, #3
 8000504:	0749      	lsls	r1, r1, #29
 8000506:	4311      	orrs	r1, r2
 8000508:	465a      	mov	r2, fp
 800050a:	055b      	lsls	r3, r3, #21
 800050c:	0254      	lsls	r4, r2, #9
 800050e:	4688      	mov	r8, r1
 8000510:	0b24      	lsrs	r4, r4, #12
 8000512:	0d5b      	lsrs	r3, r3, #21
 8000514:	e702      	b.n	800031c <__aeabi_ddiv+0xc0>
 8000516:	465a      	mov	r2, fp
 8000518:	9b00      	ldr	r3, [sp, #0]
 800051a:	431a      	orrs	r2, r3
 800051c:	d100      	bne.n	8000520 <__aeabi_ddiv+0x2c4>
 800051e:	e07e      	b.n	800061e <__aeabi_ddiv+0x3c2>
 8000520:	465b      	mov	r3, fp
 8000522:	2b00      	cmp	r3, #0
 8000524:	d100      	bne.n	8000528 <__aeabi_ddiv+0x2cc>
 8000526:	e100      	b.n	800072a <__aeabi_ddiv+0x4ce>
 8000528:	4658      	mov	r0, fp
 800052a:	f000 fdeb 	bl	8001104 <__clzsi2>
 800052e:	0002      	movs	r2, r0
 8000530:	0003      	movs	r3, r0
 8000532:	3a0b      	subs	r2, #11
 8000534:	271d      	movs	r7, #29
 8000536:	9e00      	ldr	r6, [sp, #0]
 8000538:	1aba      	subs	r2, r7, r2
 800053a:	0019      	movs	r1, r3
 800053c:	4658      	mov	r0, fp
 800053e:	40d6      	lsrs	r6, r2
 8000540:	3908      	subs	r1, #8
 8000542:	4088      	lsls	r0, r1
 8000544:	0032      	movs	r2, r6
 8000546:	4302      	orrs	r2, r0
 8000548:	4693      	mov	fp, r2
 800054a:	9a00      	ldr	r2, [sp, #0]
 800054c:	408a      	lsls	r2, r1
 800054e:	4928      	ldr	r1, [pc, #160]	@ (80005f0 <__aeabi_ddiv+0x394>)
 8000550:	4453      	add	r3, sl
 8000552:	468a      	mov	sl, r1
 8000554:	449a      	add	sl, r3
 8000556:	2300      	movs	r3, #0
 8000558:	e6c8      	b.n	80002ec <__aeabi_ddiv+0x90>
 800055a:	465b      	mov	r3, fp
 800055c:	4303      	orrs	r3, r0
 800055e:	4699      	mov	r9, r3
 8000560:	d056      	beq.n	8000610 <__aeabi_ddiv+0x3b4>
 8000562:	465b      	mov	r3, fp
 8000564:	2b00      	cmp	r3, #0
 8000566:	d100      	bne.n	800056a <__aeabi_ddiv+0x30e>
 8000568:	e0cd      	b.n	8000706 <__aeabi_ddiv+0x4aa>
 800056a:	4658      	mov	r0, fp
 800056c:	f000 fdca 	bl	8001104 <__clzsi2>
 8000570:	230b      	movs	r3, #11
 8000572:	425b      	negs	r3, r3
 8000574:	469c      	mov	ip, r3
 8000576:	0002      	movs	r2, r0
 8000578:	4484      	add	ip, r0
 800057a:	4666      	mov	r6, ip
 800057c:	231d      	movs	r3, #29
 800057e:	1b9b      	subs	r3, r3, r6
 8000580:	0026      	movs	r6, r4
 8000582:	0011      	movs	r1, r2
 8000584:	4658      	mov	r0, fp
 8000586:	40de      	lsrs	r6, r3
 8000588:	3908      	subs	r1, #8
 800058a:	4088      	lsls	r0, r1
 800058c:	0033      	movs	r3, r6
 800058e:	4303      	orrs	r3, r0
 8000590:	4699      	mov	r9, r3
 8000592:	0023      	movs	r3, r4
 8000594:	408b      	lsls	r3, r1
 8000596:	4698      	mov	r8, r3
 8000598:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <__aeabi_ddiv+0x398>)
 800059a:	2400      	movs	r4, #0
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	469a      	mov	sl, r3
 80005a0:	2300      	movs	r3, #0
 80005a2:	9303      	str	r3, [sp, #12]
 80005a4:	e682      	b.n	80002ac <__aeabi_ddiv+0x50>
 80005a6:	465a      	mov	r2, fp
 80005a8:	4302      	orrs	r2, r0
 80005aa:	4691      	mov	r9, r2
 80005ac:	d12a      	bne.n	8000604 <__aeabi_ddiv+0x3a8>
 80005ae:	2200      	movs	r2, #0
 80005b0:	469a      	mov	sl, r3
 80005b2:	2302      	movs	r3, #2
 80005b4:	4690      	mov	r8, r2
 80005b6:	2408      	movs	r4, #8
 80005b8:	9303      	str	r3, [sp, #12]
 80005ba:	e677      	b.n	80002ac <__aeabi_ddiv+0x50>
 80005bc:	465a      	mov	r2, fp
 80005be:	9b00      	ldr	r3, [sp, #0]
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <__aeabi_ddiv+0x39c>)
 80005c4:	469c      	mov	ip, r3
 80005c6:	44e2      	add	sl, ip
 80005c8:	2a00      	cmp	r2, #0
 80005ca:	d117      	bne.n	80005fc <__aeabi_ddiv+0x3a0>
 80005cc:	2302      	movs	r3, #2
 80005ce:	431c      	orrs	r4, r3
 80005d0:	2300      	movs	r3, #0
 80005d2:	469b      	mov	fp, r3
 80005d4:	3302      	adds	r3, #2
 80005d6:	e689      	b.n	80002ec <__aeabi_ddiv+0x90>
 80005d8:	000007ff 	.word	0x000007ff
 80005dc:	fffffc01 	.word	0xfffffc01
 80005e0:	08004508 	.word	0x08004508
 80005e4:	000003ff 	.word	0x000003ff
 80005e8:	feffffff 	.word	0xfeffffff
 80005ec:	000007fe 	.word	0x000007fe
 80005f0:	000003f3 	.word	0x000003f3
 80005f4:	fffffc0d 	.word	0xfffffc0d
 80005f8:	fffff801 	.word	0xfffff801
 80005fc:	2303      	movs	r3, #3
 80005fe:	0032      	movs	r2, r6
 8000600:	431c      	orrs	r4, r3
 8000602:	e673      	b.n	80002ec <__aeabi_ddiv+0x90>
 8000604:	469a      	mov	sl, r3
 8000606:	2303      	movs	r3, #3
 8000608:	46d9      	mov	r9, fp
 800060a:	240c      	movs	r4, #12
 800060c:	9303      	str	r3, [sp, #12]
 800060e:	e64d      	b.n	80002ac <__aeabi_ddiv+0x50>
 8000610:	2300      	movs	r3, #0
 8000612:	4698      	mov	r8, r3
 8000614:	469a      	mov	sl, r3
 8000616:	3301      	adds	r3, #1
 8000618:	2404      	movs	r4, #4
 800061a:	9303      	str	r3, [sp, #12]
 800061c:	e646      	b.n	80002ac <__aeabi_ddiv+0x50>
 800061e:	2301      	movs	r3, #1
 8000620:	431c      	orrs	r4, r3
 8000622:	2300      	movs	r3, #0
 8000624:	469b      	mov	fp, r3
 8000626:	3301      	adds	r3, #1
 8000628:	e660      	b.n	80002ec <__aeabi_ddiv+0x90>
 800062a:	2300      	movs	r3, #0
 800062c:	2480      	movs	r4, #128	@ 0x80
 800062e:	4698      	mov	r8, r3
 8000630:	2600      	movs	r6, #0
 8000632:	4b92      	ldr	r3, [pc, #584]	@ (800087c <__aeabi_ddiv+0x620>)
 8000634:	0324      	lsls	r4, r4, #12
 8000636:	e671      	b.n	800031c <__aeabi_ddiv+0xc0>
 8000638:	2201      	movs	r2, #1
 800063a:	4252      	negs	r2, r2
 800063c:	2101      	movs	r1, #1
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	2938      	cmp	r1, #56	@ 0x38
 8000642:	dd00      	ble.n	8000646 <__aeabi_ddiv+0x3ea>
 8000644:	e666      	b.n	8000314 <__aeabi_ddiv+0xb8>
 8000646:	291f      	cmp	r1, #31
 8000648:	dc00      	bgt.n	800064c <__aeabi_ddiv+0x3f0>
 800064a:	e0ab      	b.n	80007a4 <__aeabi_ddiv+0x548>
 800064c:	201f      	movs	r0, #31
 800064e:	4240      	negs	r0, r0
 8000650:	1ac3      	subs	r3, r0, r3
 8000652:	4658      	mov	r0, fp
 8000654:	40d8      	lsrs	r0, r3
 8000656:	0003      	movs	r3, r0
 8000658:	2920      	cmp	r1, #32
 800065a:	d004      	beq.n	8000666 <__aeabi_ddiv+0x40a>
 800065c:	4658      	mov	r0, fp
 800065e:	4988      	ldr	r1, [pc, #544]	@ (8000880 <__aeabi_ddiv+0x624>)
 8000660:	4451      	add	r1, sl
 8000662:	4088      	lsls	r0, r1
 8000664:	4302      	orrs	r2, r0
 8000666:	1e51      	subs	r1, r2, #1
 8000668:	418a      	sbcs	r2, r1
 800066a:	431a      	orrs	r2, r3
 800066c:	2307      	movs	r3, #7
 800066e:	0019      	movs	r1, r3
 8000670:	2400      	movs	r4, #0
 8000672:	4011      	ands	r1, r2
 8000674:	4213      	tst	r3, r2
 8000676:	d00c      	beq.n	8000692 <__aeabi_ddiv+0x436>
 8000678:	230f      	movs	r3, #15
 800067a:	4013      	ands	r3, r2
 800067c:	2b04      	cmp	r3, #4
 800067e:	d100      	bne.n	8000682 <__aeabi_ddiv+0x426>
 8000680:	e0f9      	b.n	8000876 <__aeabi_ddiv+0x61a>
 8000682:	1d11      	adds	r1, r2, #4
 8000684:	4291      	cmp	r1, r2
 8000686:	419b      	sbcs	r3, r3
 8000688:	000a      	movs	r2, r1
 800068a:	425b      	negs	r3, r3
 800068c:	0759      	lsls	r1, r3, #29
 800068e:	025b      	lsls	r3, r3, #9
 8000690:	0b1c      	lsrs	r4, r3, #12
 8000692:	08d2      	lsrs	r2, r2, #3
 8000694:	430a      	orrs	r2, r1
 8000696:	4690      	mov	r8, r2
 8000698:	2300      	movs	r3, #0
 800069a:	e63f      	b.n	800031c <__aeabi_ddiv+0xc0>
 800069c:	2480      	movs	r4, #128	@ 0x80
 800069e:	464b      	mov	r3, r9
 80006a0:	0324      	lsls	r4, r4, #12
 80006a2:	4223      	tst	r3, r4
 80006a4:	d009      	beq.n	80006ba <__aeabi_ddiv+0x45e>
 80006a6:	465b      	mov	r3, fp
 80006a8:	4223      	tst	r3, r4
 80006aa:	d106      	bne.n	80006ba <__aeabi_ddiv+0x45e>
 80006ac:	431c      	orrs	r4, r3
 80006ae:	0324      	lsls	r4, r4, #12
 80006b0:	002e      	movs	r6, r5
 80006b2:	4690      	mov	r8, r2
 80006b4:	4b71      	ldr	r3, [pc, #452]	@ (800087c <__aeabi_ddiv+0x620>)
 80006b6:	0b24      	lsrs	r4, r4, #12
 80006b8:	e630      	b.n	800031c <__aeabi_ddiv+0xc0>
 80006ba:	2480      	movs	r4, #128	@ 0x80
 80006bc:	464b      	mov	r3, r9
 80006be:	0324      	lsls	r4, r4, #12
 80006c0:	431c      	orrs	r4, r3
 80006c2:	0324      	lsls	r4, r4, #12
 80006c4:	9e02      	ldr	r6, [sp, #8]
 80006c6:	4b6d      	ldr	r3, [pc, #436]	@ (800087c <__aeabi_ddiv+0x620>)
 80006c8:	0b24      	lsrs	r4, r4, #12
 80006ca:	e627      	b.n	800031c <__aeabi_ddiv+0xc0>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_ddiv+0x476>
 80006d0:	e700      	b.n	80004d4 <__aeabi_ddiv+0x278>
 80006d2:	9800      	ldr	r0, [sp, #0]
 80006d4:	1e51      	subs	r1, r2, #1
 80006d6:	4684      	mov	ip, r0
 80006d8:	4464      	add	r4, ip
 80006da:	4284      	cmp	r4, r0
 80006dc:	d200      	bcs.n	80006e0 <__aeabi_ddiv+0x484>
 80006de:	e084      	b.n	80007ea <__aeabi_ddiv+0x58e>
 80006e0:	42bc      	cmp	r4, r7
 80006e2:	d200      	bcs.n	80006e6 <__aeabi_ddiv+0x48a>
 80006e4:	e0ae      	b.n	8000844 <__aeabi_ddiv+0x5e8>
 80006e6:	d100      	bne.n	80006ea <__aeabi_ddiv+0x48e>
 80006e8:	e0c1      	b.n	800086e <__aeabi_ddiv+0x612>
 80006ea:	000a      	movs	r2, r1
 80006ec:	e6f0      	b.n	80004d0 <__aeabi_ddiv+0x274>
 80006ee:	4542      	cmp	r2, r8
 80006f0:	d900      	bls.n	80006f4 <__aeabi_ddiv+0x498>
 80006f2:	e62c      	b.n	800034e <__aeabi_ddiv+0xf2>
 80006f4:	464b      	mov	r3, r9
 80006f6:	07dc      	lsls	r4, r3, #31
 80006f8:	0858      	lsrs	r0, r3, #1
 80006fa:	4643      	mov	r3, r8
 80006fc:	085b      	lsrs	r3, r3, #1
 80006fe:	431c      	orrs	r4, r3
 8000700:	4643      	mov	r3, r8
 8000702:	07df      	lsls	r7, r3, #31
 8000704:	e62a      	b.n	800035c <__aeabi_ddiv+0x100>
 8000706:	f000 fcfd 	bl	8001104 <__clzsi2>
 800070a:	2315      	movs	r3, #21
 800070c:	469c      	mov	ip, r3
 800070e:	4484      	add	ip, r0
 8000710:	0002      	movs	r2, r0
 8000712:	4663      	mov	r3, ip
 8000714:	3220      	adds	r2, #32
 8000716:	2b1c      	cmp	r3, #28
 8000718:	dc00      	bgt.n	800071c <__aeabi_ddiv+0x4c0>
 800071a:	e72e      	b.n	800057a <__aeabi_ddiv+0x31e>
 800071c:	0023      	movs	r3, r4
 800071e:	3808      	subs	r0, #8
 8000720:	4083      	lsls	r3, r0
 8000722:	4699      	mov	r9, r3
 8000724:	2300      	movs	r3, #0
 8000726:	4698      	mov	r8, r3
 8000728:	e736      	b.n	8000598 <__aeabi_ddiv+0x33c>
 800072a:	f000 fceb 	bl	8001104 <__clzsi2>
 800072e:	0002      	movs	r2, r0
 8000730:	0003      	movs	r3, r0
 8000732:	3215      	adds	r2, #21
 8000734:	3320      	adds	r3, #32
 8000736:	2a1c      	cmp	r2, #28
 8000738:	dc00      	bgt.n	800073c <__aeabi_ddiv+0x4e0>
 800073a:	e6fb      	b.n	8000534 <__aeabi_ddiv+0x2d8>
 800073c:	9900      	ldr	r1, [sp, #0]
 800073e:	3808      	subs	r0, #8
 8000740:	4081      	lsls	r1, r0
 8000742:	2200      	movs	r2, #0
 8000744:	468b      	mov	fp, r1
 8000746:	e702      	b.n	800054e <__aeabi_ddiv+0x2f2>
 8000748:	9900      	ldr	r1, [sp, #0]
 800074a:	3b01      	subs	r3, #1
 800074c:	468c      	mov	ip, r1
 800074e:	4464      	add	r4, ip
 8000750:	42a1      	cmp	r1, r4
 8000752:	d900      	bls.n	8000756 <__aeabi_ddiv+0x4fa>
 8000754:	e69a      	b.n	800048c <__aeabi_ddiv+0x230>
 8000756:	42a2      	cmp	r2, r4
 8000758:	d800      	bhi.n	800075c <__aeabi_ddiv+0x500>
 800075a:	e697      	b.n	800048c <__aeabi_ddiv+0x230>
 800075c:	1e83      	subs	r3, r0, #2
 800075e:	4464      	add	r4, ip
 8000760:	e694      	b.n	800048c <__aeabi_ddiv+0x230>
 8000762:	46ac      	mov	ip, r5
 8000764:	4461      	add	r1, ip
 8000766:	3f01      	subs	r7, #1
 8000768:	428d      	cmp	r5, r1
 800076a:	d900      	bls.n	800076e <__aeabi_ddiv+0x512>
 800076c:	e680      	b.n	8000470 <__aeabi_ddiv+0x214>
 800076e:	428a      	cmp	r2, r1
 8000770:	d800      	bhi.n	8000774 <__aeabi_ddiv+0x518>
 8000772:	e67d      	b.n	8000470 <__aeabi_ddiv+0x214>
 8000774:	1e87      	subs	r7, r0, #2
 8000776:	4461      	add	r1, ip
 8000778:	e67a      	b.n	8000470 <__aeabi_ddiv+0x214>
 800077a:	4285      	cmp	r5, r0
 800077c:	d000      	beq.n	8000780 <__aeabi_ddiv+0x524>
 800077e:	e65f      	b.n	8000440 <__aeabi_ddiv+0x1e4>
 8000780:	45b9      	cmp	r9, r7
 8000782:	d900      	bls.n	8000786 <__aeabi_ddiv+0x52a>
 8000784:	e65c      	b.n	8000440 <__aeabi_ddiv+0x1e4>
 8000786:	e656      	b.n	8000436 <__aeabi_ddiv+0x1da>
 8000788:	42a2      	cmp	r2, r4
 800078a:	d800      	bhi.n	800078e <__aeabi_ddiv+0x532>
 800078c:	e61a      	b.n	80003c4 <__aeabi_ddiv+0x168>
 800078e:	1e83      	subs	r3, r0, #2
 8000790:	4464      	add	r4, ip
 8000792:	e617      	b.n	80003c4 <__aeabi_ddiv+0x168>
 8000794:	428a      	cmp	r2, r1
 8000796:	d800      	bhi.n	800079a <__aeabi_ddiv+0x53e>
 8000798:	e600      	b.n	800039c <__aeabi_ddiv+0x140>
 800079a:	46ac      	mov	ip, r5
 800079c:	1e83      	subs	r3, r0, #2
 800079e:	4698      	mov	r8, r3
 80007a0:	4461      	add	r1, ip
 80007a2:	e5fb      	b.n	800039c <__aeabi_ddiv+0x140>
 80007a4:	4837      	ldr	r0, [pc, #220]	@ (8000884 <__aeabi_ddiv+0x628>)
 80007a6:	0014      	movs	r4, r2
 80007a8:	4450      	add	r0, sl
 80007aa:	4082      	lsls	r2, r0
 80007ac:	465b      	mov	r3, fp
 80007ae:	0017      	movs	r7, r2
 80007b0:	4083      	lsls	r3, r0
 80007b2:	40cc      	lsrs	r4, r1
 80007b4:	1e7a      	subs	r2, r7, #1
 80007b6:	4197      	sbcs	r7, r2
 80007b8:	4323      	orrs	r3, r4
 80007ba:	433b      	orrs	r3, r7
 80007bc:	001a      	movs	r2, r3
 80007be:	465b      	mov	r3, fp
 80007c0:	40cb      	lsrs	r3, r1
 80007c2:	0751      	lsls	r1, r2, #29
 80007c4:	d009      	beq.n	80007da <__aeabi_ddiv+0x57e>
 80007c6:	210f      	movs	r1, #15
 80007c8:	4011      	ands	r1, r2
 80007ca:	2904      	cmp	r1, #4
 80007cc:	d005      	beq.n	80007da <__aeabi_ddiv+0x57e>
 80007ce:	1d11      	adds	r1, r2, #4
 80007d0:	4291      	cmp	r1, r2
 80007d2:	4192      	sbcs	r2, r2
 80007d4:	4252      	negs	r2, r2
 80007d6:	189b      	adds	r3, r3, r2
 80007d8:	000a      	movs	r2, r1
 80007da:	0219      	lsls	r1, r3, #8
 80007dc:	d400      	bmi.n	80007e0 <__aeabi_ddiv+0x584>
 80007de:	e755      	b.n	800068c <__aeabi_ddiv+0x430>
 80007e0:	2200      	movs	r2, #0
 80007e2:	2301      	movs	r3, #1
 80007e4:	2400      	movs	r4, #0
 80007e6:	4690      	mov	r8, r2
 80007e8:	e598      	b.n	800031c <__aeabi_ddiv+0xc0>
 80007ea:	000a      	movs	r2, r1
 80007ec:	42bc      	cmp	r4, r7
 80007ee:	d000      	beq.n	80007f2 <__aeabi_ddiv+0x596>
 80007f0:	e66e      	b.n	80004d0 <__aeabi_ddiv+0x274>
 80007f2:	454b      	cmp	r3, r9
 80007f4:	d000      	beq.n	80007f8 <__aeabi_ddiv+0x59c>
 80007f6:	e66b      	b.n	80004d0 <__aeabi_ddiv+0x274>
 80007f8:	e66c      	b.n	80004d4 <__aeabi_ddiv+0x278>
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <__aeabi_ddiv+0x62c>)
 80007fc:	4a23      	ldr	r2, [pc, #140]	@ (800088c <__aeabi_ddiv+0x630>)
 80007fe:	4453      	add	r3, sl
 8000800:	4592      	cmp	sl, r2
 8000802:	da00      	bge.n	8000806 <__aeabi_ddiv+0x5aa>
 8000804:	e718      	b.n	8000638 <__aeabi_ddiv+0x3dc>
 8000806:	2101      	movs	r1, #1
 8000808:	4249      	negs	r1, r1
 800080a:	1d0a      	adds	r2, r1, #4
 800080c:	428a      	cmp	r2, r1
 800080e:	4189      	sbcs	r1, r1
 8000810:	4249      	negs	r1, r1
 8000812:	448b      	add	fp, r1
 8000814:	e666      	b.n	80004e4 <__aeabi_ddiv+0x288>
 8000816:	210f      	movs	r1, #15
 8000818:	4011      	ands	r1, r2
 800081a:	2904      	cmp	r1, #4
 800081c:	d100      	bne.n	8000820 <__aeabi_ddiv+0x5c4>
 800081e:	e661      	b.n	80004e4 <__aeabi_ddiv+0x288>
 8000820:	0011      	movs	r1, r2
 8000822:	e7f2      	b.n	800080a <__aeabi_ddiv+0x5ae>
 8000824:	42bc      	cmp	r4, r7
 8000826:	d800      	bhi.n	800082a <__aeabi_ddiv+0x5ce>
 8000828:	e60a      	b.n	8000440 <__aeabi_ddiv+0x1e4>
 800082a:	2302      	movs	r3, #2
 800082c:	425b      	negs	r3, r3
 800082e:	469c      	mov	ip, r3
 8000830:	9900      	ldr	r1, [sp, #0]
 8000832:	444f      	add	r7, r9
 8000834:	454f      	cmp	r7, r9
 8000836:	419b      	sbcs	r3, r3
 8000838:	44e3      	add	fp, ip
 800083a:	468c      	mov	ip, r1
 800083c:	425b      	negs	r3, r3
 800083e:	4463      	add	r3, ip
 8000840:	18c0      	adds	r0, r0, r3
 8000842:	e5ff      	b.n	8000444 <__aeabi_ddiv+0x1e8>
 8000844:	4649      	mov	r1, r9
 8000846:	9d00      	ldr	r5, [sp, #0]
 8000848:	0048      	lsls	r0, r1, #1
 800084a:	4548      	cmp	r0, r9
 800084c:	4189      	sbcs	r1, r1
 800084e:	46ac      	mov	ip, r5
 8000850:	4249      	negs	r1, r1
 8000852:	4461      	add	r1, ip
 8000854:	4681      	mov	r9, r0
 8000856:	3a02      	subs	r2, #2
 8000858:	1864      	adds	r4, r4, r1
 800085a:	e7c7      	b.n	80007ec <__aeabi_ddiv+0x590>
 800085c:	2480      	movs	r4, #128	@ 0x80
 800085e:	465b      	mov	r3, fp
 8000860:	0324      	lsls	r4, r4, #12
 8000862:	431c      	orrs	r4, r3
 8000864:	0324      	lsls	r4, r4, #12
 8000866:	4690      	mov	r8, r2
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <__aeabi_ddiv+0x620>)
 800086a:	0b24      	lsrs	r4, r4, #12
 800086c:	e556      	b.n	800031c <__aeabi_ddiv+0xc0>
 800086e:	4599      	cmp	r9, r3
 8000870:	d3e8      	bcc.n	8000844 <__aeabi_ddiv+0x5e8>
 8000872:	000a      	movs	r2, r1
 8000874:	e7bd      	b.n	80007f2 <__aeabi_ddiv+0x596>
 8000876:	2300      	movs	r3, #0
 8000878:	e708      	b.n	800068c <__aeabi_ddiv+0x430>
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	000007ff 	.word	0x000007ff
 8000880:	0000043e 	.word	0x0000043e
 8000884:	0000041e 	.word	0x0000041e
 8000888:	000003ff 	.word	0x000003ff
 800088c:	fffffc02 	.word	0xfffffc02

08000890 <__aeabi_dsub>:
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	464e      	mov	r6, r9
 8000894:	4645      	mov	r5, r8
 8000896:	46de      	mov	lr, fp
 8000898:	4657      	mov	r7, sl
 800089a:	b5e0      	push	{r5, r6, r7, lr}
 800089c:	b085      	sub	sp, #20
 800089e:	9000      	str	r0, [sp, #0]
 80008a0:	9101      	str	r1, [sp, #4]
 80008a2:	030c      	lsls	r4, r1, #12
 80008a4:	004f      	lsls	r7, r1, #1
 80008a6:	0fce      	lsrs	r6, r1, #31
 80008a8:	0a61      	lsrs	r1, r4, #9
 80008aa:	9c00      	ldr	r4, [sp, #0]
 80008ac:	46b0      	mov	r8, r6
 80008ae:	0f64      	lsrs	r4, r4, #29
 80008b0:	430c      	orrs	r4, r1
 80008b2:	9900      	ldr	r1, [sp, #0]
 80008b4:	0d7f      	lsrs	r7, r7, #21
 80008b6:	00c8      	lsls	r0, r1, #3
 80008b8:	0011      	movs	r1, r2
 80008ba:	001a      	movs	r2, r3
 80008bc:	031b      	lsls	r3, r3, #12
 80008be:	469c      	mov	ip, r3
 80008c0:	9100      	str	r1, [sp, #0]
 80008c2:	9201      	str	r2, [sp, #4]
 80008c4:	0051      	lsls	r1, r2, #1
 80008c6:	0d4b      	lsrs	r3, r1, #21
 80008c8:	4699      	mov	r9, r3
 80008ca:	9b01      	ldr	r3, [sp, #4]
 80008cc:	9d00      	ldr	r5, [sp, #0]
 80008ce:	0fd9      	lsrs	r1, r3, #31
 80008d0:	4663      	mov	r3, ip
 80008d2:	0f6a      	lsrs	r2, r5, #29
 80008d4:	0a5b      	lsrs	r3, r3, #9
 80008d6:	4313      	orrs	r3, r2
 80008d8:	00ea      	lsls	r2, r5, #3
 80008da:	4694      	mov	ip, r2
 80008dc:	4693      	mov	fp, r2
 80008de:	4ac1      	ldr	r2, [pc, #772]	@ (8000be4 <__aeabi_dsub+0x354>)
 80008e0:	9003      	str	r0, [sp, #12]
 80008e2:	9302      	str	r3, [sp, #8]
 80008e4:	4591      	cmp	r9, r2
 80008e6:	d100      	bne.n	80008ea <__aeabi_dsub+0x5a>
 80008e8:	e0cd      	b.n	8000a86 <__aeabi_dsub+0x1f6>
 80008ea:	2501      	movs	r5, #1
 80008ec:	4069      	eors	r1, r5
 80008ee:	464d      	mov	r5, r9
 80008f0:	1b7d      	subs	r5, r7, r5
 80008f2:	46aa      	mov	sl, r5
 80008f4:	428e      	cmp	r6, r1
 80008f6:	d100      	bne.n	80008fa <__aeabi_dsub+0x6a>
 80008f8:	e080      	b.n	80009fc <__aeabi_dsub+0x16c>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	dc00      	bgt.n	8000900 <__aeabi_dsub+0x70>
 80008fe:	e335      	b.n	8000f6c <__aeabi_dsub+0x6dc>
 8000900:	4649      	mov	r1, r9
 8000902:	2900      	cmp	r1, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_dsub+0x78>
 8000906:	e0df      	b.n	8000ac8 <__aeabi_dsub+0x238>
 8000908:	4297      	cmp	r7, r2
 800090a:	d100      	bne.n	800090e <__aeabi_dsub+0x7e>
 800090c:	e194      	b.n	8000c38 <__aeabi_dsub+0x3a8>
 800090e:	4652      	mov	r2, sl
 8000910:	2501      	movs	r5, #1
 8000912:	2a38      	cmp	r2, #56	@ 0x38
 8000914:	dc19      	bgt.n	800094a <__aeabi_dsub+0xba>
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	9b02      	ldr	r3, [sp, #8]
 800091a:	0412      	lsls	r2, r2, #16
 800091c:	4313      	orrs	r3, r2
 800091e:	9302      	str	r3, [sp, #8]
 8000920:	4652      	mov	r2, sl
 8000922:	2a1f      	cmp	r2, #31
 8000924:	dd00      	ble.n	8000928 <__aeabi_dsub+0x98>
 8000926:	e1e3      	b.n	8000cf0 <__aeabi_dsub+0x460>
 8000928:	4653      	mov	r3, sl
 800092a:	2220      	movs	r2, #32
 800092c:	4661      	mov	r1, ip
 800092e:	9d02      	ldr	r5, [sp, #8]
 8000930:	1ad2      	subs	r2, r2, r3
 8000932:	4095      	lsls	r5, r2
 8000934:	40d9      	lsrs	r1, r3
 8000936:	430d      	orrs	r5, r1
 8000938:	4661      	mov	r1, ip
 800093a:	4091      	lsls	r1, r2
 800093c:	000a      	movs	r2, r1
 800093e:	1e51      	subs	r1, r2, #1
 8000940:	418a      	sbcs	r2, r1
 8000942:	4315      	orrs	r5, r2
 8000944:	9a02      	ldr	r2, [sp, #8]
 8000946:	40da      	lsrs	r2, r3
 8000948:	1aa4      	subs	r4, r4, r2
 800094a:	1b45      	subs	r5, r0, r5
 800094c:	42a8      	cmp	r0, r5
 800094e:	4180      	sbcs	r0, r0
 8000950:	4240      	negs	r0, r0
 8000952:	1a24      	subs	r4, r4, r0
 8000954:	0223      	lsls	r3, r4, #8
 8000956:	d400      	bmi.n	800095a <__aeabi_dsub+0xca>
 8000958:	e13d      	b.n	8000bd6 <__aeabi_dsub+0x346>
 800095a:	0264      	lsls	r4, r4, #9
 800095c:	0a64      	lsrs	r4, r4, #9
 800095e:	2c00      	cmp	r4, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_dsub+0xd4>
 8000962:	e147      	b.n	8000bf4 <__aeabi_dsub+0x364>
 8000964:	0020      	movs	r0, r4
 8000966:	f000 fbcd 	bl	8001104 <__clzsi2>
 800096a:	0003      	movs	r3, r0
 800096c:	3b08      	subs	r3, #8
 800096e:	2120      	movs	r1, #32
 8000970:	0028      	movs	r0, r5
 8000972:	1aca      	subs	r2, r1, r3
 8000974:	40d0      	lsrs	r0, r2
 8000976:	409c      	lsls	r4, r3
 8000978:	0002      	movs	r2, r0
 800097a:	409d      	lsls	r5, r3
 800097c:	4322      	orrs	r2, r4
 800097e:	429f      	cmp	r7, r3
 8000980:	dd00      	ble.n	8000984 <__aeabi_dsub+0xf4>
 8000982:	e177      	b.n	8000c74 <__aeabi_dsub+0x3e4>
 8000984:	1bd8      	subs	r0, r3, r7
 8000986:	3001      	adds	r0, #1
 8000988:	1a09      	subs	r1, r1, r0
 800098a:	002c      	movs	r4, r5
 800098c:	408d      	lsls	r5, r1
 800098e:	40c4      	lsrs	r4, r0
 8000990:	1e6b      	subs	r3, r5, #1
 8000992:	419d      	sbcs	r5, r3
 8000994:	0013      	movs	r3, r2
 8000996:	40c2      	lsrs	r2, r0
 8000998:	408b      	lsls	r3, r1
 800099a:	4325      	orrs	r5, r4
 800099c:	2700      	movs	r7, #0
 800099e:	0014      	movs	r4, r2
 80009a0:	431d      	orrs	r5, r3
 80009a2:	076b      	lsls	r3, r5, #29
 80009a4:	d009      	beq.n	80009ba <__aeabi_dsub+0x12a>
 80009a6:	230f      	movs	r3, #15
 80009a8:	402b      	ands	r3, r5
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d005      	beq.n	80009ba <__aeabi_dsub+0x12a>
 80009ae:	1d2b      	adds	r3, r5, #4
 80009b0:	42ab      	cmp	r3, r5
 80009b2:	41ad      	sbcs	r5, r5
 80009b4:	426d      	negs	r5, r5
 80009b6:	1964      	adds	r4, r4, r5
 80009b8:	001d      	movs	r5, r3
 80009ba:	0223      	lsls	r3, r4, #8
 80009bc:	d400      	bmi.n	80009c0 <__aeabi_dsub+0x130>
 80009be:	e140      	b.n	8000c42 <__aeabi_dsub+0x3b2>
 80009c0:	4a88      	ldr	r2, [pc, #544]	@ (8000be4 <__aeabi_dsub+0x354>)
 80009c2:	3701      	adds	r7, #1
 80009c4:	4297      	cmp	r7, r2
 80009c6:	d100      	bne.n	80009ca <__aeabi_dsub+0x13a>
 80009c8:	e101      	b.n	8000bce <__aeabi_dsub+0x33e>
 80009ca:	2601      	movs	r6, #1
 80009cc:	4643      	mov	r3, r8
 80009ce:	4986      	ldr	r1, [pc, #536]	@ (8000be8 <__aeabi_dsub+0x358>)
 80009d0:	08ed      	lsrs	r5, r5, #3
 80009d2:	4021      	ands	r1, r4
 80009d4:	074a      	lsls	r2, r1, #29
 80009d6:	432a      	orrs	r2, r5
 80009d8:	057c      	lsls	r4, r7, #21
 80009da:	024d      	lsls	r5, r1, #9
 80009dc:	0b2d      	lsrs	r5, r5, #12
 80009de:	0d64      	lsrs	r4, r4, #21
 80009e0:	401e      	ands	r6, r3
 80009e2:	0524      	lsls	r4, r4, #20
 80009e4:	432c      	orrs	r4, r5
 80009e6:	07f6      	lsls	r6, r6, #31
 80009e8:	4334      	orrs	r4, r6
 80009ea:	0010      	movs	r0, r2
 80009ec:	0021      	movs	r1, r4
 80009ee:	b005      	add	sp, #20
 80009f0:	bcf0      	pop	{r4, r5, r6, r7}
 80009f2:	46bb      	mov	fp, r7
 80009f4:	46b2      	mov	sl, r6
 80009f6:	46a9      	mov	r9, r5
 80009f8:	46a0      	mov	r8, r4
 80009fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fc:	2d00      	cmp	r5, #0
 80009fe:	dc00      	bgt.n	8000a02 <__aeabi_dsub+0x172>
 8000a00:	e2d0      	b.n	8000fa4 <__aeabi_dsub+0x714>
 8000a02:	4649      	mov	r1, r9
 8000a04:	2900      	cmp	r1, #0
 8000a06:	d000      	beq.n	8000a0a <__aeabi_dsub+0x17a>
 8000a08:	e0d4      	b.n	8000bb4 <__aeabi_dsub+0x324>
 8000a0a:	4661      	mov	r1, ip
 8000a0c:	9b02      	ldr	r3, [sp, #8]
 8000a0e:	4319      	orrs	r1, r3
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dsub+0x184>
 8000a12:	e12b      	b.n	8000c6c <__aeabi_dsub+0x3dc>
 8000a14:	1e69      	subs	r1, r5, #1
 8000a16:	2d01      	cmp	r5, #1
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dsub+0x18c>
 8000a1a:	e1d9      	b.n	8000dd0 <__aeabi_dsub+0x540>
 8000a1c:	4295      	cmp	r5, r2
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_dsub+0x192>
 8000a20:	e10a      	b.n	8000c38 <__aeabi_dsub+0x3a8>
 8000a22:	2501      	movs	r5, #1
 8000a24:	2938      	cmp	r1, #56	@ 0x38
 8000a26:	dc17      	bgt.n	8000a58 <__aeabi_dsub+0x1c8>
 8000a28:	468a      	mov	sl, r1
 8000a2a:	4653      	mov	r3, sl
 8000a2c:	2b1f      	cmp	r3, #31
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_dsub+0x1a2>
 8000a30:	e1e7      	b.n	8000e02 <__aeabi_dsub+0x572>
 8000a32:	2220      	movs	r2, #32
 8000a34:	1ad2      	subs	r2, r2, r3
 8000a36:	9b02      	ldr	r3, [sp, #8]
 8000a38:	4661      	mov	r1, ip
 8000a3a:	4093      	lsls	r3, r2
 8000a3c:	001d      	movs	r5, r3
 8000a3e:	4653      	mov	r3, sl
 8000a40:	40d9      	lsrs	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	4093      	lsls	r3, r2
 8000a46:	001a      	movs	r2, r3
 8000a48:	430d      	orrs	r5, r1
 8000a4a:	1e51      	subs	r1, r2, #1
 8000a4c:	418a      	sbcs	r2, r1
 8000a4e:	4653      	mov	r3, sl
 8000a50:	4315      	orrs	r5, r2
 8000a52:	9a02      	ldr	r2, [sp, #8]
 8000a54:	40da      	lsrs	r2, r3
 8000a56:	18a4      	adds	r4, r4, r2
 8000a58:	182d      	adds	r5, r5, r0
 8000a5a:	4285      	cmp	r5, r0
 8000a5c:	4180      	sbcs	r0, r0
 8000a5e:	4240      	negs	r0, r0
 8000a60:	1824      	adds	r4, r4, r0
 8000a62:	0223      	lsls	r3, r4, #8
 8000a64:	d400      	bmi.n	8000a68 <__aeabi_dsub+0x1d8>
 8000a66:	e0b6      	b.n	8000bd6 <__aeabi_dsub+0x346>
 8000a68:	4b5e      	ldr	r3, [pc, #376]	@ (8000be4 <__aeabi_dsub+0x354>)
 8000a6a:	3701      	adds	r7, #1
 8000a6c:	429f      	cmp	r7, r3
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dsub+0x1e2>
 8000a70:	e0ad      	b.n	8000bce <__aeabi_dsub+0x33e>
 8000a72:	2101      	movs	r1, #1
 8000a74:	4b5c      	ldr	r3, [pc, #368]	@ (8000be8 <__aeabi_dsub+0x358>)
 8000a76:	086a      	lsrs	r2, r5, #1
 8000a78:	401c      	ands	r4, r3
 8000a7a:	4029      	ands	r1, r5
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	07e5      	lsls	r5, r4, #31
 8000a80:	4315      	orrs	r5, r2
 8000a82:	0864      	lsrs	r4, r4, #1
 8000a84:	e78d      	b.n	80009a2 <__aeabi_dsub+0x112>
 8000a86:	4a59      	ldr	r2, [pc, #356]	@ (8000bec <__aeabi_dsub+0x35c>)
 8000a88:	9b02      	ldr	r3, [sp, #8]
 8000a8a:	4692      	mov	sl, r2
 8000a8c:	4662      	mov	r2, ip
 8000a8e:	44ba      	add	sl, r7
 8000a90:	431a      	orrs	r2, r3
 8000a92:	d02c      	beq.n	8000aee <__aeabi_dsub+0x25e>
 8000a94:	428e      	cmp	r6, r1
 8000a96:	d02e      	beq.n	8000af6 <__aeabi_dsub+0x266>
 8000a98:	4652      	mov	r2, sl
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d060      	beq.n	8000b60 <__aeabi_dsub+0x2d0>
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dsub+0x214>
 8000aa2:	e0db      	b.n	8000c5c <__aeabi_dsub+0x3cc>
 8000aa4:	4663      	mov	r3, ip
 8000aa6:	000e      	movs	r6, r1
 8000aa8:	9c02      	ldr	r4, [sp, #8]
 8000aaa:	08d8      	lsrs	r0, r3, #3
 8000aac:	0762      	lsls	r2, r4, #29
 8000aae:	4302      	orrs	r2, r0
 8000ab0:	08e4      	lsrs	r4, r4, #3
 8000ab2:	0013      	movs	r3, r2
 8000ab4:	4323      	orrs	r3, r4
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dsub+0x22a>
 8000ab8:	e254      	b.n	8000f64 <__aeabi_dsub+0x6d4>
 8000aba:	2580      	movs	r5, #128	@ 0x80
 8000abc:	032d      	lsls	r5, r5, #12
 8000abe:	4325      	orrs	r5, r4
 8000ac0:	032d      	lsls	r5, r5, #12
 8000ac2:	4c48      	ldr	r4, [pc, #288]	@ (8000be4 <__aeabi_dsub+0x354>)
 8000ac4:	0b2d      	lsrs	r5, r5, #12
 8000ac6:	e78c      	b.n	80009e2 <__aeabi_dsub+0x152>
 8000ac8:	4661      	mov	r1, ip
 8000aca:	9b02      	ldr	r3, [sp, #8]
 8000acc:	4319      	orrs	r1, r3
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dsub+0x242>
 8000ad0:	e0cc      	b.n	8000c6c <__aeabi_dsub+0x3dc>
 8000ad2:	0029      	movs	r1, r5
 8000ad4:	3901      	subs	r1, #1
 8000ad6:	2d01      	cmp	r5, #1
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dsub+0x24c>
 8000ada:	e188      	b.n	8000dee <__aeabi_dsub+0x55e>
 8000adc:	4295      	cmp	r5, r2
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dsub+0x252>
 8000ae0:	e0aa      	b.n	8000c38 <__aeabi_dsub+0x3a8>
 8000ae2:	2501      	movs	r5, #1
 8000ae4:	2938      	cmp	r1, #56	@ 0x38
 8000ae6:	dd00      	ble.n	8000aea <__aeabi_dsub+0x25a>
 8000ae8:	e72f      	b.n	800094a <__aeabi_dsub+0xba>
 8000aea:	468a      	mov	sl, r1
 8000aec:	e718      	b.n	8000920 <__aeabi_dsub+0x90>
 8000aee:	2201      	movs	r2, #1
 8000af0:	4051      	eors	r1, r2
 8000af2:	428e      	cmp	r6, r1
 8000af4:	d1d0      	bne.n	8000a98 <__aeabi_dsub+0x208>
 8000af6:	4653      	mov	r3, sl
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d100      	bne.n	8000afe <__aeabi_dsub+0x26e>
 8000afc:	e0be      	b.n	8000c7c <__aeabi_dsub+0x3ec>
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d000      	beq.n	8000b04 <__aeabi_dsub+0x274>
 8000b02:	e138      	b.n	8000d76 <__aeabi_dsub+0x4e6>
 8000b04:	46ca      	mov	sl, r9
 8000b06:	0022      	movs	r2, r4
 8000b08:	4302      	orrs	r2, r0
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dsub+0x27e>
 8000b0c:	e1e2      	b.n	8000ed4 <__aeabi_dsub+0x644>
 8000b0e:	4653      	mov	r3, sl
 8000b10:	1e59      	subs	r1, r3, #1
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dsub+0x288>
 8000b16:	e20d      	b.n	8000f34 <__aeabi_dsub+0x6a4>
 8000b18:	4a32      	ldr	r2, [pc, #200]	@ (8000be4 <__aeabi_dsub+0x354>)
 8000b1a:	4592      	cmp	sl, r2
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dsub+0x290>
 8000b1e:	e1d2      	b.n	8000ec6 <__aeabi_dsub+0x636>
 8000b20:	2701      	movs	r7, #1
 8000b22:	2938      	cmp	r1, #56	@ 0x38
 8000b24:	dc13      	bgt.n	8000b4e <__aeabi_dsub+0x2be>
 8000b26:	291f      	cmp	r1, #31
 8000b28:	dd00      	ble.n	8000b2c <__aeabi_dsub+0x29c>
 8000b2a:	e1ee      	b.n	8000f0a <__aeabi_dsub+0x67a>
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	9b02      	ldr	r3, [sp, #8]
 8000b30:	1a52      	subs	r2, r2, r1
 8000b32:	0025      	movs	r5, r4
 8000b34:	0007      	movs	r7, r0
 8000b36:	469a      	mov	sl, r3
 8000b38:	40cc      	lsrs	r4, r1
 8000b3a:	4090      	lsls	r0, r2
 8000b3c:	4095      	lsls	r5, r2
 8000b3e:	40cf      	lsrs	r7, r1
 8000b40:	44a2      	add	sl, r4
 8000b42:	1e42      	subs	r2, r0, #1
 8000b44:	4190      	sbcs	r0, r2
 8000b46:	4653      	mov	r3, sl
 8000b48:	432f      	orrs	r7, r5
 8000b4a:	4307      	orrs	r7, r0
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	003d      	movs	r5, r7
 8000b50:	4465      	add	r5, ip
 8000b52:	4565      	cmp	r5, ip
 8000b54:	4192      	sbcs	r2, r2
 8000b56:	9b02      	ldr	r3, [sp, #8]
 8000b58:	4252      	negs	r2, r2
 8000b5a:	464f      	mov	r7, r9
 8000b5c:	18d4      	adds	r4, r2, r3
 8000b5e:	e780      	b.n	8000a62 <__aeabi_dsub+0x1d2>
 8000b60:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <__aeabi_dsub+0x360>)
 8000b62:	1c7d      	adds	r5, r7, #1
 8000b64:	4215      	tst	r5, r2
 8000b66:	d000      	beq.n	8000b6a <__aeabi_dsub+0x2da>
 8000b68:	e0aa      	b.n	8000cc0 <__aeabi_dsub+0x430>
 8000b6a:	4662      	mov	r2, ip
 8000b6c:	0025      	movs	r5, r4
 8000b6e:	9b02      	ldr	r3, [sp, #8]
 8000b70:	4305      	orrs	r5, r0
 8000b72:	431a      	orrs	r2, r3
 8000b74:	2f00      	cmp	r7, #0
 8000b76:	d000      	beq.n	8000b7a <__aeabi_dsub+0x2ea>
 8000b78:	e0f5      	b.n	8000d66 <__aeabi_dsub+0x4d6>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dsub+0x2f0>
 8000b7e:	e16b      	b.n	8000e58 <__aeabi_dsub+0x5c8>
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dsub+0x2f6>
 8000b84:	e152      	b.n	8000e2c <__aeabi_dsub+0x59c>
 8000b86:	4663      	mov	r3, ip
 8000b88:	1ac5      	subs	r5, r0, r3
 8000b8a:	9b02      	ldr	r3, [sp, #8]
 8000b8c:	1ae2      	subs	r2, r4, r3
 8000b8e:	42a8      	cmp	r0, r5
 8000b90:	419b      	sbcs	r3, r3
 8000b92:	425b      	negs	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	021a      	lsls	r2, r3, #8
 8000b98:	d400      	bmi.n	8000b9c <__aeabi_dsub+0x30c>
 8000b9a:	e1d5      	b.n	8000f48 <__aeabi_dsub+0x6b8>
 8000b9c:	4663      	mov	r3, ip
 8000b9e:	1a1d      	subs	r5, r3, r0
 8000ba0:	45ac      	cmp	ip, r5
 8000ba2:	4192      	sbcs	r2, r2
 8000ba4:	2601      	movs	r6, #1
 8000ba6:	9b02      	ldr	r3, [sp, #8]
 8000ba8:	4252      	negs	r2, r2
 8000baa:	1b1c      	subs	r4, r3, r4
 8000bac:	4688      	mov	r8, r1
 8000bae:	1aa4      	subs	r4, r4, r2
 8000bb0:	400e      	ands	r6, r1
 8000bb2:	e6f6      	b.n	80009a2 <__aeabi_dsub+0x112>
 8000bb4:	4297      	cmp	r7, r2
 8000bb6:	d03f      	beq.n	8000c38 <__aeabi_dsub+0x3a8>
 8000bb8:	4652      	mov	r2, sl
 8000bba:	2501      	movs	r5, #1
 8000bbc:	2a38      	cmp	r2, #56	@ 0x38
 8000bbe:	dd00      	ble.n	8000bc2 <__aeabi_dsub+0x332>
 8000bc0:	e74a      	b.n	8000a58 <__aeabi_dsub+0x1c8>
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	9b02      	ldr	r3, [sp, #8]
 8000bc6:	0412      	lsls	r2, r2, #16
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	9302      	str	r3, [sp, #8]
 8000bcc:	e72d      	b.n	8000a2a <__aeabi_dsub+0x19a>
 8000bce:	003c      	movs	r4, r7
 8000bd0:	2500      	movs	r5, #0
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	e705      	b.n	80009e2 <__aeabi_dsub+0x152>
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	402b      	ands	r3, r5
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d000      	beq.n	8000be0 <__aeabi_dsub+0x350>
 8000bde:	e6e2      	b.n	80009a6 <__aeabi_dsub+0x116>
 8000be0:	e06b      	b.n	8000cba <__aeabi_dsub+0x42a>
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	000007ff 	.word	0x000007ff
 8000be8:	ff7fffff 	.word	0xff7fffff
 8000bec:	fffff801 	.word	0xfffff801
 8000bf0:	000007fe 	.word	0x000007fe
 8000bf4:	0028      	movs	r0, r5
 8000bf6:	f000 fa85 	bl	8001104 <__clzsi2>
 8000bfa:	0003      	movs	r3, r0
 8000bfc:	3318      	adds	r3, #24
 8000bfe:	2b1f      	cmp	r3, #31
 8000c00:	dc00      	bgt.n	8000c04 <__aeabi_dsub+0x374>
 8000c02:	e6b4      	b.n	800096e <__aeabi_dsub+0xde>
 8000c04:	002a      	movs	r2, r5
 8000c06:	3808      	subs	r0, #8
 8000c08:	4082      	lsls	r2, r0
 8000c0a:	429f      	cmp	r7, r3
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_dsub+0x380>
 8000c0e:	e0b9      	b.n	8000d84 <__aeabi_dsub+0x4f4>
 8000c10:	1bdb      	subs	r3, r3, r7
 8000c12:	1c58      	adds	r0, r3, #1
 8000c14:	281f      	cmp	r0, #31
 8000c16:	dc00      	bgt.n	8000c1a <__aeabi_dsub+0x38a>
 8000c18:	e1a0      	b.n	8000f5c <__aeabi_dsub+0x6cc>
 8000c1a:	0015      	movs	r5, r2
 8000c1c:	3b1f      	subs	r3, #31
 8000c1e:	40dd      	lsrs	r5, r3
 8000c20:	2820      	cmp	r0, #32
 8000c22:	d005      	beq.n	8000c30 <__aeabi_dsub+0x3a0>
 8000c24:	2340      	movs	r3, #64	@ 0x40
 8000c26:	1a1b      	subs	r3, r3, r0
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	1e53      	subs	r3, r2, #1
 8000c2c:	419a      	sbcs	r2, r3
 8000c2e:	4315      	orrs	r5, r2
 8000c30:	2307      	movs	r3, #7
 8000c32:	2700      	movs	r7, #0
 8000c34:	402b      	ands	r3, r5
 8000c36:	e7d0      	b.n	8000bda <__aeabi_dsub+0x34a>
 8000c38:	08c0      	lsrs	r0, r0, #3
 8000c3a:	0762      	lsls	r2, r4, #29
 8000c3c:	4302      	orrs	r2, r0
 8000c3e:	08e4      	lsrs	r4, r4, #3
 8000c40:	e737      	b.n	8000ab2 <__aeabi_dsub+0x222>
 8000c42:	08ea      	lsrs	r2, r5, #3
 8000c44:	0763      	lsls	r3, r4, #29
 8000c46:	431a      	orrs	r2, r3
 8000c48:	4bd3      	ldr	r3, [pc, #844]	@ (8000f98 <__aeabi_dsub+0x708>)
 8000c4a:	08e4      	lsrs	r4, r4, #3
 8000c4c:	429f      	cmp	r7, r3
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dsub+0x3c2>
 8000c50:	e72f      	b.n	8000ab2 <__aeabi_dsub+0x222>
 8000c52:	0324      	lsls	r4, r4, #12
 8000c54:	0b25      	lsrs	r5, r4, #12
 8000c56:	057c      	lsls	r4, r7, #21
 8000c58:	0d64      	lsrs	r4, r4, #21
 8000c5a:	e6c2      	b.n	80009e2 <__aeabi_dsub+0x152>
 8000c5c:	46ca      	mov	sl, r9
 8000c5e:	0022      	movs	r2, r4
 8000c60:	4302      	orrs	r2, r0
 8000c62:	d158      	bne.n	8000d16 <__aeabi_dsub+0x486>
 8000c64:	4663      	mov	r3, ip
 8000c66:	000e      	movs	r6, r1
 8000c68:	9c02      	ldr	r4, [sp, #8]
 8000c6a:	9303      	str	r3, [sp, #12]
 8000c6c:	9b03      	ldr	r3, [sp, #12]
 8000c6e:	4657      	mov	r7, sl
 8000c70:	08da      	lsrs	r2, r3, #3
 8000c72:	e7e7      	b.n	8000c44 <__aeabi_dsub+0x3b4>
 8000c74:	4cc9      	ldr	r4, [pc, #804]	@ (8000f9c <__aeabi_dsub+0x70c>)
 8000c76:	1aff      	subs	r7, r7, r3
 8000c78:	4014      	ands	r4, r2
 8000c7a:	e692      	b.n	80009a2 <__aeabi_dsub+0x112>
 8000c7c:	4dc8      	ldr	r5, [pc, #800]	@ (8000fa0 <__aeabi_dsub+0x710>)
 8000c7e:	1c7a      	adds	r2, r7, #1
 8000c80:	422a      	tst	r2, r5
 8000c82:	d000      	beq.n	8000c86 <__aeabi_dsub+0x3f6>
 8000c84:	e084      	b.n	8000d90 <__aeabi_dsub+0x500>
 8000c86:	0022      	movs	r2, r4
 8000c88:	4302      	orrs	r2, r0
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_dsub+0x400>
 8000c8e:	e0ef      	b.n	8000e70 <__aeabi_dsub+0x5e0>
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dsub+0x406>
 8000c94:	e0e5      	b.n	8000e62 <__aeabi_dsub+0x5d2>
 8000c96:	4662      	mov	r2, ip
 8000c98:	9902      	ldr	r1, [sp, #8]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dsub+0x410>
 8000c9e:	e0c5      	b.n	8000e2c <__aeabi_dsub+0x59c>
 8000ca0:	4663      	mov	r3, ip
 8000ca2:	18c5      	adds	r5, r0, r3
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	4285      	cmp	r5, r0
 8000ca8:	4180      	sbcs	r0, r0
 8000caa:	4464      	add	r4, ip
 8000cac:	4240      	negs	r0, r0
 8000cae:	1824      	adds	r4, r4, r0
 8000cb0:	0223      	lsls	r3, r4, #8
 8000cb2:	d502      	bpl.n	8000cba <__aeabi_dsub+0x42a>
 8000cb4:	4bb9      	ldr	r3, [pc, #740]	@ (8000f9c <__aeabi_dsub+0x70c>)
 8000cb6:	3701      	adds	r7, #1
 8000cb8:	401c      	ands	r4, r3
 8000cba:	46ba      	mov	sl, r7
 8000cbc:	9503      	str	r5, [sp, #12]
 8000cbe:	e7d5      	b.n	8000c6c <__aeabi_dsub+0x3dc>
 8000cc0:	4662      	mov	r2, ip
 8000cc2:	1a85      	subs	r5, r0, r2
 8000cc4:	42a8      	cmp	r0, r5
 8000cc6:	4192      	sbcs	r2, r2
 8000cc8:	4252      	negs	r2, r2
 8000cca:	4691      	mov	r9, r2
 8000ccc:	9b02      	ldr	r3, [sp, #8]
 8000cce:	1ae3      	subs	r3, r4, r3
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	464b      	mov	r3, r9
 8000cd4:	1ad2      	subs	r2, r2, r3
 8000cd6:	0013      	movs	r3, r2
 8000cd8:	4691      	mov	r9, r2
 8000cda:	021a      	lsls	r2, r3, #8
 8000cdc:	d46c      	bmi.n	8000db8 <__aeabi_dsub+0x528>
 8000cde:	464a      	mov	r2, r9
 8000ce0:	464c      	mov	r4, r9
 8000ce2:	432a      	orrs	r2, r5
 8000ce4:	d000      	beq.n	8000ce8 <__aeabi_dsub+0x458>
 8000ce6:	e63a      	b.n	800095e <__aeabi_dsub+0xce>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	2400      	movs	r4, #0
 8000cec:	2500      	movs	r5, #0
 8000cee:	e678      	b.n	80009e2 <__aeabi_dsub+0x152>
 8000cf0:	9902      	ldr	r1, [sp, #8]
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	000d      	movs	r5, r1
 8000cf6:	3a20      	subs	r2, #32
 8000cf8:	40d5      	lsrs	r5, r2
 8000cfa:	2b20      	cmp	r3, #32
 8000cfc:	d006      	beq.n	8000d0c <__aeabi_dsub+0x47c>
 8000cfe:	2240      	movs	r2, #64	@ 0x40
 8000d00:	1ad2      	subs	r2, r2, r3
 8000d02:	000b      	movs	r3, r1
 8000d04:	4093      	lsls	r3, r2
 8000d06:	4662      	mov	r2, ip
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	4693      	mov	fp, r2
 8000d0c:	465b      	mov	r3, fp
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	4193      	sbcs	r3, r2
 8000d12:	431d      	orrs	r5, r3
 8000d14:	e619      	b.n	800094a <__aeabi_dsub+0xba>
 8000d16:	4653      	mov	r3, sl
 8000d18:	1e5a      	subs	r2, r3, #1
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dsub+0x490>
 8000d1e:	e0c6      	b.n	8000eae <__aeabi_dsub+0x61e>
 8000d20:	4e9d      	ldr	r6, [pc, #628]	@ (8000f98 <__aeabi_dsub+0x708>)
 8000d22:	45b2      	cmp	sl, r6
 8000d24:	d100      	bne.n	8000d28 <__aeabi_dsub+0x498>
 8000d26:	e6bd      	b.n	8000aa4 <__aeabi_dsub+0x214>
 8000d28:	4688      	mov	r8, r1
 8000d2a:	000e      	movs	r6, r1
 8000d2c:	2501      	movs	r5, #1
 8000d2e:	2a38      	cmp	r2, #56	@ 0x38
 8000d30:	dc10      	bgt.n	8000d54 <__aeabi_dsub+0x4c4>
 8000d32:	2a1f      	cmp	r2, #31
 8000d34:	dc7f      	bgt.n	8000e36 <__aeabi_dsub+0x5a6>
 8000d36:	2120      	movs	r1, #32
 8000d38:	0025      	movs	r5, r4
 8000d3a:	1a89      	subs	r1, r1, r2
 8000d3c:	0007      	movs	r7, r0
 8000d3e:	4088      	lsls	r0, r1
 8000d40:	408d      	lsls	r5, r1
 8000d42:	40d7      	lsrs	r7, r2
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	1e41      	subs	r1, r0, #1
 8000d48:	4188      	sbcs	r0, r1
 8000d4a:	9b02      	ldr	r3, [sp, #8]
 8000d4c:	433d      	orrs	r5, r7
 8000d4e:	1b1b      	subs	r3, r3, r4
 8000d50:	4305      	orrs	r5, r0
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	4662      	mov	r2, ip
 8000d56:	1b55      	subs	r5, r2, r5
 8000d58:	45ac      	cmp	ip, r5
 8000d5a:	4192      	sbcs	r2, r2
 8000d5c:	9b02      	ldr	r3, [sp, #8]
 8000d5e:	4252      	negs	r2, r2
 8000d60:	464f      	mov	r7, r9
 8000d62:	1a9c      	subs	r4, r3, r2
 8000d64:	e5f6      	b.n	8000954 <__aeabi_dsub+0xc4>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_dsub+0x4dc>
 8000d6a:	e0b7      	b.n	8000edc <__aeabi_dsub+0x64c>
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dsub+0x4e2>
 8000d70:	e0f0      	b.n	8000f54 <__aeabi_dsub+0x6c4>
 8000d72:	2601      	movs	r6, #1
 8000d74:	400e      	ands	r6, r1
 8000d76:	4663      	mov	r3, ip
 8000d78:	9802      	ldr	r0, [sp, #8]
 8000d7a:	08d9      	lsrs	r1, r3, #3
 8000d7c:	0742      	lsls	r2, r0, #29
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	08c4      	lsrs	r4, r0, #3
 8000d82:	e696      	b.n	8000ab2 <__aeabi_dsub+0x222>
 8000d84:	4c85      	ldr	r4, [pc, #532]	@ (8000f9c <__aeabi_dsub+0x70c>)
 8000d86:	1aff      	subs	r7, r7, r3
 8000d88:	4014      	ands	r4, r2
 8000d8a:	0762      	lsls	r2, r4, #29
 8000d8c:	08e4      	lsrs	r4, r4, #3
 8000d8e:	e760      	b.n	8000c52 <__aeabi_dsub+0x3c2>
 8000d90:	4981      	ldr	r1, [pc, #516]	@ (8000f98 <__aeabi_dsub+0x708>)
 8000d92:	428a      	cmp	r2, r1
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dsub+0x508>
 8000d96:	e0c9      	b.n	8000f2c <__aeabi_dsub+0x69c>
 8000d98:	4663      	mov	r3, ip
 8000d9a:	18c1      	adds	r1, r0, r3
 8000d9c:	4281      	cmp	r1, r0
 8000d9e:	4180      	sbcs	r0, r0
 8000da0:	9b02      	ldr	r3, [sp, #8]
 8000da2:	4240      	negs	r0, r0
 8000da4:	18e3      	adds	r3, r4, r3
 8000da6:	181b      	adds	r3, r3, r0
 8000da8:	07dd      	lsls	r5, r3, #31
 8000daa:	085c      	lsrs	r4, r3, #1
 8000dac:	2307      	movs	r3, #7
 8000dae:	0849      	lsrs	r1, r1, #1
 8000db0:	430d      	orrs	r5, r1
 8000db2:	0017      	movs	r7, r2
 8000db4:	402b      	ands	r3, r5
 8000db6:	e710      	b.n	8000bda <__aeabi_dsub+0x34a>
 8000db8:	4663      	mov	r3, ip
 8000dba:	1a1d      	subs	r5, r3, r0
 8000dbc:	45ac      	cmp	ip, r5
 8000dbe:	4192      	sbcs	r2, r2
 8000dc0:	2601      	movs	r6, #1
 8000dc2:	9b02      	ldr	r3, [sp, #8]
 8000dc4:	4252      	negs	r2, r2
 8000dc6:	1b1c      	subs	r4, r3, r4
 8000dc8:	4688      	mov	r8, r1
 8000dca:	1aa4      	subs	r4, r4, r2
 8000dcc:	400e      	ands	r6, r1
 8000dce:	e5c6      	b.n	800095e <__aeabi_dsub+0xce>
 8000dd0:	4663      	mov	r3, ip
 8000dd2:	18c5      	adds	r5, r0, r3
 8000dd4:	9b02      	ldr	r3, [sp, #8]
 8000dd6:	4285      	cmp	r5, r0
 8000dd8:	4180      	sbcs	r0, r0
 8000dda:	469c      	mov	ip, r3
 8000ddc:	4240      	negs	r0, r0
 8000dde:	4464      	add	r4, ip
 8000de0:	1824      	adds	r4, r4, r0
 8000de2:	2701      	movs	r7, #1
 8000de4:	0223      	lsls	r3, r4, #8
 8000de6:	d400      	bmi.n	8000dea <__aeabi_dsub+0x55a>
 8000de8:	e6f5      	b.n	8000bd6 <__aeabi_dsub+0x346>
 8000dea:	2702      	movs	r7, #2
 8000dec:	e641      	b.n	8000a72 <__aeabi_dsub+0x1e2>
 8000dee:	4663      	mov	r3, ip
 8000df0:	1ac5      	subs	r5, r0, r3
 8000df2:	42a8      	cmp	r0, r5
 8000df4:	4180      	sbcs	r0, r0
 8000df6:	9b02      	ldr	r3, [sp, #8]
 8000df8:	4240      	negs	r0, r0
 8000dfa:	1ae4      	subs	r4, r4, r3
 8000dfc:	2701      	movs	r7, #1
 8000dfe:	1a24      	subs	r4, r4, r0
 8000e00:	e5a8      	b.n	8000954 <__aeabi_dsub+0xc4>
 8000e02:	9d02      	ldr	r5, [sp, #8]
 8000e04:	4652      	mov	r2, sl
 8000e06:	002b      	movs	r3, r5
 8000e08:	3a20      	subs	r2, #32
 8000e0a:	40d3      	lsrs	r3, r2
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	4653      	mov	r3, sl
 8000e10:	2b20      	cmp	r3, #32
 8000e12:	d006      	beq.n	8000e22 <__aeabi_dsub+0x592>
 8000e14:	2240      	movs	r2, #64	@ 0x40
 8000e16:	1ad2      	subs	r2, r2, r3
 8000e18:	002b      	movs	r3, r5
 8000e1a:	4093      	lsls	r3, r2
 8000e1c:	4662      	mov	r2, ip
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	4693      	mov	fp, r2
 8000e22:	465d      	mov	r5, fp
 8000e24:	1e6b      	subs	r3, r5, #1
 8000e26:	419d      	sbcs	r5, r3
 8000e28:	430d      	orrs	r5, r1
 8000e2a:	e615      	b.n	8000a58 <__aeabi_dsub+0x1c8>
 8000e2c:	0762      	lsls	r2, r4, #29
 8000e2e:	08c0      	lsrs	r0, r0, #3
 8000e30:	4302      	orrs	r2, r0
 8000e32:	08e4      	lsrs	r4, r4, #3
 8000e34:	e70d      	b.n	8000c52 <__aeabi_dsub+0x3c2>
 8000e36:	0011      	movs	r1, r2
 8000e38:	0027      	movs	r7, r4
 8000e3a:	3920      	subs	r1, #32
 8000e3c:	40cf      	lsrs	r7, r1
 8000e3e:	2a20      	cmp	r2, #32
 8000e40:	d005      	beq.n	8000e4e <__aeabi_dsub+0x5be>
 8000e42:	2140      	movs	r1, #64	@ 0x40
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	4094      	lsls	r4, r2
 8000e48:	0025      	movs	r5, r4
 8000e4a:	4305      	orrs	r5, r0
 8000e4c:	9503      	str	r5, [sp, #12]
 8000e4e:	9d03      	ldr	r5, [sp, #12]
 8000e50:	1e6a      	subs	r2, r5, #1
 8000e52:	4195      	sbcs	r5, r2
 8000e54:	433d      	orrs	r5, r7
 8000e56:	e77d      	b.n	8000d54 <__aeabi_dsub+0x4c4>
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_dsub+0x5ce>
 8000e5c:	e744      	b.n	8000ce8 <__aeabi_dsub+0x458>
 8000e5e:	2601      	movs	r6, #1
 8000e60:	400e      	ands	r6, r1
 8000e62:	4663      	mov	r3, ip
 8000e64:	08d9      	lsrs	r1, r3, #3
 8000e66:	9b02      	ldr	r3, [sp, #8]
 8000e68:	075a      	lsls	r2, r3, #29
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	08dc      	lsrs	r4, r3, #3
 8000e6e:	e6f0      	b.n	8000c52 <__aeabi_dsub+0x3c2>
 8000e70:	2a00      	cmp	r2, #0
 8000e72:	d028      	beq.n	8000ec6 <__aeabi_dsub+0x636>
 8000e74:	4662      	mov	r2, ip
 8000e76:	9f02      	ldr	r7, [sp, #8]
 8000e78:	08c0      	lsrs	r0, r0, #3
 8000e7a:	433a      	orrs	r2, r7
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dsub+0x5f0>
 8000e7e:	e6dc      	b.n	8000c3a <__aeabi_dsub+0x3aa>
 8000e80:	0762      	lsls	r2, r4, #29
 8000e82:	4310      	orrs	r0, r2
 8000e84:	2280      	movs	r2, #128	@ 0x80
 8000e86:	08e4      	lsrs	r4, r4, #3
 8000e88:	0312      	lsls	r2, r2, #12
 8000e8a:	4214      	tst	r4, r2
 8000e8c:	d009      	beq.n	8000ea2 <__aeabi_dsub+0x612>
 8000e8e:	08fd      	lsrs	r5, r7, #3
 8000e90:	4215      	tst	r5, r2
 8000e92:	d106      	bne.n	8000ea2 <__aeabi_dsub+0x612>
 8000e94:	4663      	mov	r3, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	002c      	movs	r4, r5
 8000e9a:	08d8      	lsrs	r0, r3, #3
 8000e9c:	077b      	lsls	r3, r7, #29
 8000e9e:	4318      	orrs	r0, r3
 8000ea0:	400e      	ands	r6, r1
 8000ea2:	0f42      	lsrs	r2, r0, #29
 8000ea4:	00c0      	lsls	r0, r0, #3
 8000ea6:	08c0      	lsrs	r0, r0, #3
 8000ea8:	0752      	lsls	r2, r2, #29
 8000eaa:	4302      	orrs	r2, r0
 8000eac:	e601      	b.n	8000ab2 <__aeabi_dsub+0x222>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	1a1d      	subs	r5, r3, r0
 8000eb2:	45ac      	cmp	ip, r5
 8000eb4:	4192      	sbcs	r2, r2
 8000eb6:	9b02      	ldr	r3, [sp, #8]
 8000eb8:	4252      	negs	r2, r2
 8000eba:	1b1c      	subs	r4, r3, r4
 8000ebc:	000e      	movs	r6, r1
 8000ebe:	4688      	mov	r8, r1
 8000ec0:	2701      	movs	r7, #1
 8000ec2:	1aa4      	subs	r4, r4, r2
 8000ec4:	e546      	b.n	8000954 <__aeabi_dsub+0xc4>
 8000ec6:	4663      	mov	r3, ip
 8000ec8:	08d9      	lsrs	r1, r3, #3
 8000eca:	9b02      	ldr	r3, [sp, #8]
 8000ecc:	075a      	lsls	r2, r3, #29
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	08dc      	lsrs	r4, r3, #3
 8000ed2:	e5ee      	b.n	8000ab2 <__aeabi_dsub+0x222>
 8000ed4:	4663      	mov	r3, ip
 8000ed6:	9c02      	ldr	r4, [sp, #8]
 8000ed8:	9303      	str	r3, [sp, #12]
 8000eda:	e6c7      	b.n	8000c6c <__aeabi_dsub+0x3dc>
 8000edc:	08c0      	lsrs	r0, r0, #3
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dsub+0x654>
 8000ee2:	e6aa      	b.n	8000c3a <__aeabi_dsub+0x3aa>
 8000ee4:	0762      	lsls	r2, r4, #29
 8000ee6:	4310      	orrs	r0, r2
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	08e4      	lsrs	r4, r4, #3
 8000eec:	0312      	lsls	r2, r2, #12
 8000eee:	4214      	tst	r4, r2
 8000ef0:	d0d7      	beq.n	8000ea2 <__aeabi_dsub+0x612>
 8000ef2:	9f02      	ldr	r7, [sp, #8]
 8000ef4:	08fd      	lsrs	r5, r7, #3
 8000ef6:	4215      	tst	r5, r2
 8000ef8:	d1d3      	bne.n	8000ea2 <__aeabi_dsub+0x612>
 8000efa:	4663      	mov	r3, ip
 8000efc:	2601      	movs	r6, #1
 8000efe:	08d8      	lsrs	r0, r3, #3
 8000f00:	077b      	lsls	r3, r7, #29
 8000f02:	002c      	movs	r4, r5
 8000f04:	4318      	orrs	r0, r3
 8000f06:	400e      	ands	r6, r1
 8000f08:	e7cb      	b.n	8000ea2 <__aeabi_dsub+0x612>
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	0027      	movs	r7, r4
 8000f0e:	3a20      	subs	r2, #32
 8000f10:	40d7      	lsrs	r7, r2
 8000f12:	2920      	cmp	r1, #32
 8000f14:	d005      	beq.n	8000f22 <__aeabi_dsub+0x692>
 8000f16:	2240      	movs	r2, #64	@ 0x40
 8000f18:	1a52      	subs	r2, r2, r1
 8000f1a:	4094      	lsls	r4, r2
 8000f1c:	0025      	movs	r5, r4
 8000f1e:	4305      	orrs	r5, r0
 8000f20:	9503      	str	r5, [sp, #12]
 8000f22:	9d03      	ldr	r5, [sp, #12]
 8000f24:	1e6a      	subs	r2, r5, #1
 8000f26:	4195      	sbcs	r5, r2
 8000f28:	432f      	orrs	r7, r5
 8000f2a:	e610      	b.n	8000b4e <__aeabi_dsub+0x2be>
 8000f2c:	0014      	movs	r4, r2
 8000f2e:	2500      	movs	r5, #0
 8000f30:	2200      	movs	r2, #0
 8000f32:	e556      	b.n	80009e2 <__aeabi_dsub+0x152>
 8000f34:	9b02      	ldr	r3, [sp, #8]
 8000f36:	4460      	add	r0, ip
 8000f38:	4699      	mov	r9, r3
 8000f3a:	4560      	cmp	r0, ip
 8000f3c:	4192      	sbcs	r2, r2
 8000f3e:	444c      	add	r4, r9
 8000f40:	4252      	negs	r2, r2
 8000f42:	0005      	movs	r5, r0
 8000f44:	18a4      	adds	r4, r4, r2
 8000f46:	e74c      	b.n	8000de2 <__aeabi_dsub+0x552>
 8000f48:	001a      	movs	r2, r3
 8000f4a:	001c      	movs	r4, r3
 8000f4c:	432a      	orrs	r2, r5
 8000f4e:	d000      	beq.n	8000f52 <__aeabi_dsub+0x6c2>
 8000f50:	e6b3      	b.n	8000cba <__aeabi_dsub+0x42a>
 8000f52:	e6c9      	b.n	8000ce8 <__aeabi_dsub+0x458>
 8000f54:	2480      	movs	r4, #128	@ 0x80
 8000f56:	2600      	movs	r6, #0
 8000f58:	0324      	lsls	r4, r4, #12
 8000f5a:	e5ae      	b.n	8000aba <__aeabi_dsub+0x22a>
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	2500      	movs	r5, #0
 8000f60:	1a09      	subs	r1, r1, r0
 8000f62:	e517      	b.n	8000994 <__aeabi_dsub+0x104>
 8000f64:	2200      	movs	r2, #0
 8000f66:	2500      	movs	r5, #0
 8000f68:	4c0b      	ldr	r4, [pc, #44]	@ (8000f98 <__aeabi_dsub+0x708>)
 8000f6a:	e53a      	b.n	80009e2 <__aeabi_dsub+0x152>
 8000f6c:	2d00      	cmp	r5, #0
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_dsub+0x6e2>
 8000f70:	e5f6      	b.n	8000b60 <__aeabi_dsub+0x2d0>
 8000f72:	464b      	mov	r3, r9
 8000f74:	1bda      	subs	r2, r3, r7
 8000f76:	4692      	mov	sl, r2
 8000f78:	2f00      	cmp	r7, #0
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_dsub+0x6ee>
 8000f7c:	e66f      	b.n	8000c5e <__aeabi_dsub+0x3ce>
 8000f7e:	2a38      	cmp	r2, #56	@ 0x38
 8000f80:	dc05      	bgt.n	8000f8e <__aeabi_dsub+0x6fe>
 8000f82:	2680      	movs	r6, #128	@ 0x80
 8000f84:	0436      	lsls	r6, r6, #16
 8000f86:	4334      	orrs	r4, r6
 8000f88:	4688      	mov	r8, r1
 8000f8a:	000e      	movs	r6, r1
 8000f8c:	e6d1      	b.n	8000d32 <__aeabi_dsub+0x4a2>
 8000f8e:	4688      	mov	r8, r1
 8000f90:	000e      	movs	r6, r1
 8000f92:	2501      	movs	r5, #1
 8000f94:	e6de      	b.n	8000d54 <__aeabi_dsub+0x4c4>
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	000007ff 	.word	0x000007ff
 8000f9c:	ff7fffff 	.word	0xff7fffff
 8000fa0:	000007fe 	.word	0x000007fe
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_dsub+0x71a>
 8000fa8:	e668      	b.n	8000c7c <__aeabi_dsub+0x3ec>
 8000faa:	464b      	mov	r3, r9
 8000fac:	1bd9      	subs	r1, r3, r7
 8000fae:	2f00      	cmp	r7, #0
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_dsub+0x726>
 8000fb2:	468a      	mov	sl, r1
 8000fb4:	e5a7      	b.n	8000b06 <__aeabi_dsub+0x276>
 8000fb6:	2701      	movs	r7, #1
 8000fb8:	2938      	cmp	r1, #56	@ 0x38
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_dsub+0x72e>
 8000fbc:	e5c7      	b.n	8000b4e <__aeabi_dsub+0x2be>
 8000fbe:	2280      	movs	r2, #128	@ 0x80
 8000fc0:	0412      	lsls	r2, r2, #16
 8000fc2:	4314      	orrs	r4, r2
 8000fc4:	e5af      	b.n	8000b26 <__aeabi_dsub+0x296>
 8000fc6:	46c0      	nop			@ (mov r8, r8)

08000fc8 <__aeabi_d2iz>:
 8000fc8:	000b      	movs	r3, r1
 8000fca:	0002      	movs	r2, r0
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	4d16      	ldr	r5, [pc, #88]	@ (8001028 <__aeabi_d2iz+0x60>)
 8000fd0:	030c      	lsls	r4, r1, #12
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	0049      	lsls	r1, r1, #1
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	9200      	str	r2, [sp, #0]
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	0d49      	lsrs	r1, r1, #21
 8000fe0:	0fde      	lsrs	r6, r3, #31
 8000fe2:	42a9      	cmp	r1, r5
 8000fe4:	dd04      	ble.n	8000ff0 <__aeabi_d2iz+0x28>
 8000fe6:	4811      	ldr	r0, [pc, #68]	@ (800102c <__aeabi_d2iz+0x64>)
 8000fe8:	4281      	cmp	r1, r0
 8000fea:	dd03      	ble.n	8000ff4 <__aeabi_d2iz+0x2c>
 8000fec:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <__aeabi_d2iz+0x68>)
 8000fee:	18f0      	adds	r0, r6, r3
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	2080      	movs	r0, #128	@ 0x80
 8000ff6:	0340      	lsls	r0, r0, #13
 8000ff8:	4320      	orrs	r0, r4
 8000ffa:	4c0e      	ldr	r4, [pc, #56]	@ (8001034 <__aeabi_d2iz+0x6c>)
 8000ffc:	1a64      	subs	r4, r4, r1
 8000ffe:	2c1f      	cmp	r4, #31
 8001000:	dd08      	ble.n	8001014 <__aeabi_d2iz+0x4c>
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <__aeabi_d2iz+0x70>)
 8001004:	1a5b      	subs	r3, r3, r1
 8001006:	40d8      	lsrs	r0, r3
 8001008:	0003      	movs	r3, r0
 800100a:	4258      	negs	r0, r3
 800100c:	2e00      	cmp	r6, #0
 800100e:	d1ef      	bne.n	8000ff0 <__aeabi_d2iz+0x28>
 8001010:	0018      	movs	r0, r3
 8001012:	e7ed      	b.n	8000ff0 <__aeabi_d2iz+0x28>
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <__aeabi_d2iz+0x74>)
 8001016:	9a00      	ldr	r2, [sp, #0]
 8001018:	469c      	mov	ip, r3
 800101a:	0003      	movs	r3, r0
 800101c:	4461      	add	r1, ip
 800101e:	408b      	lsls	r3, r1
 8001020:	40e2      	lsrs	r2, r4
 8001022:	4313      	orrs	r3, r2
 8001024:	e7f1      	b.n	800100a <__aeabi_d2iz+0x42>
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	000003fe 	.word	0x000003fe
 800102c:	0000041d 	.word	0x0000041d
 8001030:	7fffffff 	.word	0x7fffffff
 8001034:	00000433 	.word	0x00000433
 8001038:	00000413 	.word	0x00000413
 800103c:	fffffbed 	.word	0xfffffbed

08001040 <__aeabi_ui2d>:
 8001040:	b510      	push	{r4, lr}
 8001042:	1e04      	subs	r4, r0, #0
 8001044:	d010      	beq.n	8001068 <__aeabi_ui2d+0x28>
 8001046:	f000 f85d 	bl	8001104 <__clzsi2>
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <__aeabi_ui2d+0x44>)
 800104c:	1a1b      	subs	r3, r3, r0
 800104e:	055b      	lsls	r3, r3, #21
 8001050:	0d5b      	lsrs	r3, r3, #21
 8001052:	280a      	cmp	r0, #10
 8001054:	dc0f      	bgt.n	8001076 <__aeabi_ui2d+0x36>
 8001056:	220b      	movs	r2, #11
 8001058:	0021      	movs	r1, r4
 800105a:	1a12      	subs	r2, r2, r0
 800105c:	40d1      	lsrs	r1, r2
 800105e:	3015      	adds	r0, #21
 8001060:	030a      	lsls	r2, r1, #12
 8001062:	4084      	lsls	r4, r0
 8001064:	0b12      	lsrs	r2, r2, #12
 8001066:	e001      	b.n	800106c <__aeabi_ui2d+0x2c>
 8001068:	2300      	movs	r3, #0
 800106a:	2200      	movs	r2, #0
 800106c:	051b      	lsls	r3, r3, #20
 800106e:	4313      	orrs	r3, r2
 8001070:	0020      	movs	r0, r4
 8001072:	0019      	movs	r1, r3
 8001074:	bd10      	pop	{r4, pc}
 8001076:	0022      	movs	r2, r4
 8001078:	380b      	subs	r0, #11
 800107a:	4082      	lsls	r2, r0
 800107c:	0312      	lsls	r2, r2, #12
 800107e:	2400      	movs	r4, #0
 8001080:	0b12      	lsrs	r2, r2, #12
 8001082:	e7f3      	b.n	800106c <__aeabi_ui2d+0x2c>
 8001084:	0000041e 	.word	0x0000041e

08001088 <__aeabi_cdrcmple>:
 8001088:	4684      	mov	ip, r0
 800108a:	0010      	movs	r0, r2
 800108c:	4662      	mov	r2, ip
 800108e:	468c      	mov	ip, r1
 8001090:	0019      	movs	r1, r3
 8001092:	4663      	mov	r3, ip
 8001094:	e000      	b.n	8001098 <__aeabi_cdcmpeq>
 8001096:	46c0      	nop			@ (mov r8, r8)

08001098 <__aeabi_cdcmpeq>:
 8001098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800109a:	f000 f909 	bl	80012b0 <__ledf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	d401      	bmi.n	80010a6 <__aeabi_cdcmpeq+0xe>
 80010a2:	2100      	movs	r1, #0
 80010a4:	42c8      	cmn	r0, r1
 80010a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080010a8 <__aeabi_dcmpeq>:
 80010a8:	b510      	push	{r4, lr}
 80010aa:	f000 f849 	bl	8001140 <__eqdf2>
 80010ae:	4240      	negs	r0, r0
 80010b0:	3001      	adds	r0, #1
 80010b2:	bd10      	pop	{r4, pc}

080010b4 <__aeabi_dcmplt>:
 80010b4:	b510      	push	{r4, lr}
 80010b6:	f000 f8fb 	bl	80012b0 <__ledf2>
 80010ba:	2800      	cmp	r0, #0
 80010bc:	db01      	blt.n	80010c2 <__aeabi_dcmplt+0xe>
 80010be:	2000      	movs	r0, #0
 80010c0:	bd10      	pop	{r4, pc}
 80010c2:	2001      	movs	r0, #1
 80010c4:	bd10      	pop	{r4, pc}
 80010c6:	46c0      	nop			@ (mov r8, r8)

080010c8 <__aeabi_dcmple>:
 80010c8:	b510      	push	{r4, lr}
 80010ca:	f000 f8f1 	bl	80012b0 <__ledf2>
 80010ce:	2800      	cmp	r0, #0
 80010d0:	dd01      	ble.n	80010d6 <__aeabi_dcmple+0xe>
 80010d2:	2000      	movs	r0, #0
 80010d4:	bd10      	pop	{r4, pc}
 80010d6:	2001      	movs	r0, #1
 80010d8:	bd10      	pop	{r4, pc}
 80010da:	46c0      	nop			@ (mov r8, r8)

080010dc <__aeabi_dcmpgt>:
 80010dc:	b510      	push	{r4, lr}
 80010de:	f000 f873 	bl	80011c8 <__gedf2>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	dc01      	bgt.n	80010ea <__aeabi_dcmpgt+0xe>
 80010e6:	2000      	movs	r0, #0
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	2001      	movs	r0, #1
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	46c0      	nop			@ (mov r8, r8)

080010f0 <__aeabi_dcmpge>:
 80010f0:	b510      	push	{r4, lr}
 80010f2:	f000 f869 	bl	80011c8 <__gedf2>
 80010f6:	2800      	cmp	r0, #0
 80010f8:	da01      	bge.n	80010fe <__aeabi_dcmpge+0xe>
 80010fa:	2000      	movs	r0, #0
 80010fc:	bd10      	pop	{r4, pc}
 80010fe:	2001      	movs	r0, #1
 8001100:	bd10      	pop	{r4, pc}
 8001102:	46c0      	nop			@ (mov r8, r8)

08001104 <__clzsi2>:
 8001104:	211c      	movs	r1, #28
 8001106:	2301      	movs	r3, #1
 8001108:	041b      	lsls	r3, r3, #16
 800110a:	4298      	cmp	r0, r3
 800110c:	d301      	bcc.n	8001112 <__clzsi2+0xe>
 800110e:	0c00      	lsrs	r0, r0, #16
 8001110:	3910      	subs	r1, #16
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	4298      	cmp	r0, r3
 8001116:	d301      	bcc.n	800111c <__clzsi2+0x18>
 8001118:	0a00      	lsrs	r0, r0, #8
 800111a:	3908      	subs	r1, #8
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	4298      	cmp	r0, r3
 8001120:	d301      	bcc.n	8001126 <__clzsi2+0x22>
 8001122:	0900      	lsrs	r0, r0, #4
 8001124:	3904      	subs	r1, #4
 8001126:	a202      	add	r2, pc, #8	@ (adr r2, 8001130 <__clzsi2+0x2c>)
 8001128:	5c10      	ldrb	r0, [r2, r0]
 800112a:	1840      	adds	r0, r0, r1
 800112c:	4770      	bx	lr
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	02020304 	.word	0x02020304
 8001134:	01010101 	.word	0x01010101
	...

08001140 <__eqdf2>:
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	4657      	mov	r7, sl
 8001144:	46de      	mov	lr, fp
 8001146:	464e      	mov	r6, r9
 8001148:	4645      	mov	r5, r8
 800114a:	b5e0      	push	{r5, r6, r7, lr}
 800114c:	000d      	movs	r5, r1
 800114e:	0004      	movs	r4, r0
 8001150:	0fe8      	lsrs	r0, r5, #31
 8001152:	4683      	mov	fp, r0
 8001154:	0309      	lsls	r1, r1, #12
 8001156:	0fd8      	lsrs	r0, r3, #31
 8001158:	0b09      	lsrs	r1, r1, #12
 800115a:	4682      	mov	sl, r0
 800115c:	4819      	ldr	r0, [pc, #100]	@ (80011c4 <__eqdf2+0x84>)
 800115e:	468c      	mov	ip, r1
 8001160:	031f      	lsls	r7, r3, #12
 8001162:	0069      	lsls	r1, r5, #1
 8001164:	005e      	lsls	r6, r3, #1
 8001166:	0d49      	lsrs	r1, r1, #21
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d76      	lsrs	r6, r6, #21
 800116c:	4281      	cmp	r1, r0
 800116e:	d018      	beq.n	80011a2 <__eqdf2+0x62>
 8001170:	4286      	cmp	r6, r0
 8001172:	d00f      	beq.n	8001194 <__eqdf2+0x54>
 8001174:	2001      	movs	r0, #1
 8001176:	42b1      	cmp	r1, r6
 8001178:	d10d      	bne.n	8001196 <__eqdf2+0x56>
 800117a:	45bc      	cmp	ip, r7
 800117c:	d10b      	bne.n	8001196 <__eqdf2+0x56>
 800117e:	4294      	cmp	r4, r2
 8001180:	d109      	bne.n	8001196 <__eqdf2+0x56>
 8001182:	45d3      	cmp	fp, sl
 8001184:	d01c      	beq.n	80011c0 <__eqdf2+0x80>
 8001186:	2900      	cmp	r1, #0
 8001188:	d105      	bne.n	8001196 <__eqdf2+0x56>
 800118a:	4660      	mov	r0, ip
 800118c:	4320      	orrs	r0, r4
 800118e:	1e43      	subs	r3, r0, #1
 8001190:	4198      	sbcs	r0, r3
 8001192:	e000      	b.n	8001196 <__eqdf2+0x56>
 8001194:	2001      	movs	r0, #1
 8001196:	bcf0      	pop	{r4, r5, r6, r7}
 8001198:	46bb      	mov	fp, r7
 800119a:	46b2      	mov	sl, r6
 800119c:	46a9      	mov	r9, r5
 800119e:	46a0      	mov	r8, r4
 80011a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a2:	2001      	movs	r0, #1
 80011a4:	428e      	cmp	r6, r1
 80011a6:	d1f6      	bne.n	8001196 <__eqdf2+0x56>
 80011a8:	4661      	mov	r1, ip
 80011aa:	4339      	orrs	r1, r7
 80011ac:	000f      	movs	r7, r1
 80011ae:	4317      	orrs	r7, r2
 80011b0:	4327      	orrs	r7, r4
 80011b2:	d1f0      	bne.n	8001196 <__eqdf2+0x56>
 80011b4:	465b      	mov	r3, fp
 80011b6:	4652      	mov	r2, sl
 80011b8:	1a98      	subs	r0, r3, r2
 80011ba:	1e43      	subs	r3, r0, #1
 80011bc:	4198      	sbcs	r0, r3
 80011be:	e7ea      	b.n	8001196 <__eqdf2+0x56>
 80011c0:	2000      	movs	r0, #0
 80011c2:	e7e8      	b.n	8001196 <__eqdf2+0x56>
 80011c4:	000007ff 	.word	0x000007ff

080011c8 <__gedf2>:
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	4657      	mov	r7, sl
 80011cc:	464e      	mov	r6, r9
 80011ce:	4645      	mov	r5, r8
 80011d0:	46de      	mov	lr, fp
 80011d2:	b5e0      	push	{r5, r6, r7, lr}
 80011d4:	000d      	movs	r5, r1
 80011d6:	030f      	lsls	r7, r1, #12
 80011d8:	0b39      	lsrs	r1, r7, #12
 80011da:	b083      	sub	sp, #12
 80011dc:	0004      	movs	r4, r0
 80011de:	4680      	mov	r8, r0
 80011e0:	9101      	str	r1, [sp, #4]
 80011e2:	0058      	lsls	r0, r3, #1
 80011e4:	0fe9      	lsrs	r1, r5, #31
 80011e6:	4f31      	ldr	r7, [pc, #196]	@ (80012ac <__gedf2+0xe4>)
 80011e8:	0d40      	lsrs	r0, r0, #21
 80011ea:	468c      	mov	ip, r1
 80011ec:	006e      	lsls	r6, r5, #1
 80011ee:	0319      	lsls	r1, r3, #12
 80011f0:	4682      	mov	sl, r0
 80011f2:	4691      	mov	r9, r2
 80011f4:	0d76      	lsrs	r6, r6, #21
 80011f6:	0b09      	lsrs	r1, r1, #12
 80011f8:	0fd8      	lsrs	r0, r3, #31
 80011fa:	42be      	cmp	r6, r7
 80011fc:	d01f      	beq.n	800123e <__gedf2+0x76>
 80011fe:	45ba      	cmp	sl, r7
 8001200:	d00f      	beq.n	8001222 <__gedf2+0x5a>
 8001202:	2e00      	cmp	r6, #0
 8001204:	d12f      	bne.n	8001266 <__gedf2+0x9e>
 8001206:	4655      	mov	r5, sl
 8001208:	9e01      	ldr	r6, [sp, #4]
 800120a:	4334      	orrs	r4, r6
 800120c:	2d00      	cmp	r5, #0
 800120e:	d127      	bne.n	8001260 <__gedf2+0x98>
 8001210:	430a      	orrs	r2, r1
 8001212:	d03a      	beq.n	800128a <__gedf2+0xc2>
 8001214:	2c00      	cmp	r4, #0
 8001216:	d145      	bne.n	80012a4 <__gedf2+0xdc>
 8001218:	2800      	cmp	r0, #0
 800121a:	d11a      	bne.n	8001252 <__gedf2+0x8a>
 800121c:	2001      	movs	r0, #1
 800121e:	4240      	negs	r0, r0
 8001220:	e017      	b.n	8001252 <__gedf2+0x8a>
 8001222:	4311      	orrs	r1, r2
 8001224:	d13b      	bne.n	800129e <__gedf2+0xd6>
 8001226:	2e00      	cmp	r6, #0
 8001228:	d102      	bne.n	8001230 <__gedf2+0x68>
 800122a:	9f01      	ldr	r7, [sp, #4]
 800122c:	4327      	orrs	r7, r4
 800122e:	d0f3      	beq.n	8001218 <__gedf2+0x50>
 8001230:	4584      	cmp	ip, r0
 8001232:	d109      	bne.n	8001248 <__gedf2+0x80>
 8001234:	4663      	mov	r3, ip
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <__gedf2+0x54>
 800123a:	4660      	mov	r0, ip
 800123c:	e009      	b.n	8001252 <__gedf2+0x8a>
 800123e:	9f01      	ldr	r7, [sp, #4]
 8001240:	4327      	orrs	r7, r4
 8001242:	d12c      	bne.n	800129e <__gedf2+0xd6>
 8001244:	45b2      	cmp	sl, r6
 8001246:	d024      	beq.n	8001292 <__gedf2+0xca>
 8001248:	4663      	mov	r3, ip
 800124a:	2002      	movs	r0, #2
 800124c:	3b01      	subs	r3, #1
 800124e:	4018      	ands	r0, r3
 8001250:	3801      	subs	r0, #1
 8001252:	b003      	add	sp, #12
 8001254:	bcf0      	pop	{r4, r5, r6, r7}
 8001256:	46bb      	mov	fp, r7
 8001258:	46b2      	mov	sl, r6
 800125a:	46a9      	mov	r9, r5
 800125c:	46a0      	mov	r8, r4
 800125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001260:	2c00      	cmp	r4, #0
 8001262:	d0d9      	beq.n	8001218 <__gedf2+0x50>
 8001264:	e7e4      	b.n	8001230 <__gedf2+0x68>
 8001266:	4654      	mov	r4, sl
 8001268:	2c00      	cmp	r4, #0
 800126a:	d0ed      	beq.n	8001248 <__gedf2+0x80>
 800126c:	4584      	cmp	ip, r0
 800126e:	d1eb      	bne.n	8001248 <__gedf2+0x80>
 8001270:	4556      	cmp	r6, sl
 8001272:	dce9      	bgt.n	8001248 <__gedf2+0x80>
 8001274:	dbde      	blt.n	8001234 <__gedf2+0x6c>
 8001276:	9b01      	ldr	r3, [sp, #4]
 8001278:	428b      	cmp	r3, r1
 800127a:	d8e5      	bhi.n	8001248 <__gedf2+0x80>
 800127c:	d1da      	bne.n	8001234 <__gedf2+0x6c>
 800127e:	45c8      	cmp	r8, r9
 8001280:	d8e2      	bhi.n	8001248 <__gedf2+0x80>
 8001282:	2000      	movs	r0, #0
 8001284:	45c8      	cmp	r8, r9
 8001286:	d2e4      	bcs.n	8001252 <__gedf2+0x8a>
 8001288:	e7d4      	b.n	8001234 <__gedf2+0x6c>
 800128a:	2000      	movs	r0, #0
 800128c:	2c00      	cmp	r4, #0
 800128e:	d0e0      	beq.n	8001252 <__gedf2+0x8a>
 8001290:	e7da      	b.n	8001248 <__gedf2+0x80>
 8001292:	4311      	orrs	r1, r2
 8001294:	d103      	bne.n	800129e <__gedf2+0xd6>
 8001296:	4584      	cmp	ip, r0
 8001298:	d1d6      	bne.n	8001248 <__gedf2+0x80>
 800129a:	2000      	movs	r0, #0
 800129c:	e7d9      	b.n	8001252 <__gedf2+0x8a>
 800129e:	2002      	movs	r0, #2
 80012a0:	4240      	negs	r0, r0
 80012a2:	e7d6      	b.n	8001252 <__gedf2+0x8a>
 80012a4:	4584      	cmp	ip, r0
 80012a6:	d0e6      	beq.n	8001276 <__gedf2+0xae>
 80012a8:	e7ce      	b.n	8001248 <__gedf2+0x80>
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	000007ff 	.word	0x000007ff

080012b0 <__ledf2>:
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	4657      	mov	r7, sl
 80012b4:	464e      	mov	r6, r9
 80012b6:	4645      	mov	r5, r8
 80012b8:	46de      	mov	lr, fp
 80012ba:	b5e0      	push	{r5, r6, r7, lr}
 80012bc:	000d      	movs	r5, r1
 80012be:	030f      	lsls	r7, r1, #12
 80012c0:	0004      	movs	r4, r0
 80012c2:	4680      	mov	r8, r0
 80012c4:	0fe8      	lsrs	r0, r5, #31
 80012c6:	0b39      	lsrs	r1, r7, #12
 80012c8:	4684      	mov	ip, r0
 80012ca:	b083      	sub	sp, #12
 80012cc:	0058      	lsls	r0, r3, #1
 80012ce:	4f30      	ldr	r7, [pc, #192]	@ (8001390 <__ledf2+0xe0>)
 80012d0:	0d40      	lsrs	r0, r0, #21
 80012d2:	9101      	str	r1, [sp, #4]
 80012d4:	031e      	lsls	r6, r3, #12
 80012d6:	0069      	lsls	r1, r5, #1
 80012d8:	4682      	mov	sl, r0
 80012da:	4691      	mov	r9, r2
 80012dc:	0d49      	lsrs	r1, r1, #21
 80012de:	0b36      	lsrs	r6, r6, #12
 80012e0:	0fd8      	lsrs	r0, r3, #31
 80012e2:	42b9      	cmp	r1, r7
 80012e4:	d020      	beq.n	8001328 <__ledf2+0x78>
 80012e6:	45ba      	cmp	sl, r7
 80012e8:	d00f      	beq.n	800130a <__ledf2+0x5a>
 80012ea:	2900      	cmp	r1, #0
 80012ec:	d12b      	bne.n	8001346 <__ledf2+0x96>
 80012ee:	9901      	ldr	r1, [sp, #4]
 80012f0:	430c      	orrs	r4, r1
 80012f2:	4651      	mov	r1, sl
 80012f4:	2900      	cmp	r1, #0
 80012f6:	d137      	bne.n	8001368 <__ledf2+0xb8>
 80012f8:	4332      	orrs	r2, r6
 80012fa:	d038      	beq.n	800136e <__ledf2+0xbe>
 80012fc:	2c00      	cmp	r4, #0
 80012fe:	d144      	bne.n	800138a <__ledf2+0xda>
 8001300:	2800      	cmp	r0, #0
 8001302:	d119      	bne.n	8001338 <__ledf2+0x88>
 8001304:	2001      	movs	r0, #1
 8001306:	4240      	negs	r0, r0
 8001308:	e016      	b.n	8001338 <__ledf2+0x88>
 800130a:	4316      	orrs	r6, r2
 800130c:	d113      	bne.n	8001336 <__ledf2+0x86>
 800130e:	2900      	cmp	r1, #0
 8001310:	d102      	bne.n	8001318 <__ledf2+0x68>
 8001312:	9f01      	ldr	r7, [sp, #4]
 8001314:	4327      	orrs	r7, r4
 8001316:	d0f3      	beq.n	8001300 <__ledf2+0x50>
 8001318:	4584      	cmp	ip, r0
 800131a:	d020      	beq.n	800135e <__ledf2+0xae>
 800131c:	4663      	mov	r3, ip
 800131e:	2002      	movs	r0, #2
 8001320:	3b01      	subs	r3, #1
 8001322:	4018      	ands	r0, r3
 8001324:	3801      	subs	r0, #1
 8001326:	e007      	b.n	8001338 <__ledf2+0x88>
 8001328:	9f01      	ldr	r7, [sp, #4]
 800132a:	4327      	orrs	r7, r4
 800132c:	d103      	bne.n	8001336 <__ledf2+0x86>
 800132e:	458a      	cmp	sl, r1
 8001330:	d1f4      	bne.n	800131c <__ledf2+0x6c>
 8001332:	4316      	orrs	r6, r2
 8001334:	d01f      	beq.n	8001376 <__ledf2+0xc6>
 8001336:	2002      	movs	r0, #2
 8001338:	b003      	add	sp, #12
 800133a:	bcf0      	pop	{r4, r5, r6, r7}
 800133c:	46bb      	mov	fp, r7
 800133e:	46b2      	mov	sl, r6
 8001340:	46a9      	mov	r9, r5
 8001342:	46a0      	mov	r8, r4
 8001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001346:	4654      	mov	r4, sl
 8001348:	2c00      	cmp	r4, #0
 800134a:	d0e7      	beq.n	800131c <__ledf2+0x6c>
 800134c:	4584      	cmp	ip, r0
 800134e:	d1e5      	bne.n	800131c <__ledf2+0x6c>
 8001350:	4551      	cmp	r1, sl
 8001352:	dce3      	bgt.n	800131c <__ledf2+0x6c>
 8001354:	db03      	blt.n	800135e <__ledf2+0xae>
 8001356:	9b01      	ldr	r3, [sp, #4]
 8001358:	42b3      	cmp	r3, r6
 800135a:	d8df      	bhi.n	800131c <__ledf2+0x6c>
 800135c:	d00f      	beq.n	800137e <__ledf2+0xce>
 800135e:	4663      	mov	r3, ip
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0cf      	beq.n	8001304 <__ledf2+0x54>
 8001364:	4660      	mov	r0, ip
 8001366:	e7e7      	b.n	8001338 <__ledf2+0x88>
 8001368:	2c00      	cmp	r4, #0
 800136a:	d0c9      	beq.n	8001300 <__ledf2+0x50>
 800136c:	e7d4      	b.n	8001318 <__ledf2+0x68>
 800136e:	2000      	movs	r0, #0
 8001370:	2c00      	cmp	r4, #0
 8001372:	d0e1      	beq.n	8001338 <__ledf2+0x88>
 8001374:	e7d2      	b.n	800131c <__ledf2+0x6c>
 8001376:	4584      	cmp	ip, r0
 8001378:	d1d0      	bne.n	800131c <__ledf2+0x6c>
 800137a:	2000      	movs	r0, #0
 800137c:	e7dc      	b.n	8001338 <__ledf2+0x88>
 800137e:	45c8      	cmp	r8, r9
 8001380:	d8cc      	bhi.n	800131c <__ledf2+0x6c>
 8001382:	2000      	movs	r0, #0
 8001384:	45c8      	cmp	r8, r9
 8001386:	d2d7      	bcs.n	8001338 <__ledf2+0x88>
 8001388:	e7e9      	b.n	800135e <__ledf2+0xae>
 800138a:	4584      	cmp	ip, r0
 800138c:	d0e3      	beq.n	8001356 <__ledf2+0xa6>
 800138e:	e7c5      	b.n	800131c <__ledf2+0x6c>
 8001390:	000007ff 	.word	0x000007ff

08001394 <measure_distance>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t measure_distance(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
    // 1. Trigger the ultrasonic sensor
    HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_SET);
 800139a:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <measure_distance+0x90>)
 800139c:	2201      	movs	r2, #1
 800139e:	2120      	movs	r1, #32
 80013a0:	0018      	movs	r0, r3
 80013a2:	f000 fe2a 	bl	8001ffa <HAL_GPIO_WritePin>
    HAL_Delay(0.01); // 10 µs pulse
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 fb90 	bl	8001acc <HAL_Delay>
    HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <measure_distance+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	2120      	movs	r1, #32
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 fe21 	bl	8001ffa <HAL_GPIO_WritePin>

    // 2. Wait for ECHO pin to go high
    while (HAL_GPIO_ReadPin(FRONT_ECHO_GPIO_Port, FRONT_ECHO_Pin) == GPIO_PIN_RESET);
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <measure_distance+0x90>)
 80013bc:	2140      	movs	r1, #64	@ 0x40
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 fdfe 	bl	8001fc0 <HAL_GPIO_ReadPin>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d0f8      	beq.n	80013ba <measure_distance+0x26>

    // 3. Start the timer
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset counter
 80013c8:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <measure_distance+0x94>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim2);
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <measure_distance+0x94>)
 80013d2:	0018      	movs	r0, r3
 80013d4:	f001 fc6e 	bl	8002cb4 <HAL_TIM_Base_Start>

    // 4. Wait for ECHO pin to go low
    while (HAL_GPIO_ReadPin(FRONT_ECHO_GPIO_Port, FRONT_ECHO_Pin) == GPIO_PIN_SET);
 80013d8:	46c0      	nop			@ (mov r8, r8)
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <measure_distance+0x90>)
 80013dc:	2140      	movs	r1, #64	@ 0x40
 80013de:	0018      	movs	r0, r3
 80013e0:	f000 fdee 	bl	8001fc0 <HAL_GPIO_ReadPin>
 80013e4:	0003      	movs	r3, r0
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d0f7      	beq.n	80013da <measure_distance+0x46>

    // 5. Stop the timer
    HAL_TIM_Base_Stop(&htim2);
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <measure_distance+0x94>)
 80013ec:	0018      	movs	r0, r3
 80013ee:	f001 fcab 	bl	8002d48 <HAL_TIM_Base_Stop>
    uint32_t timeElapsed = __HAL_TIM_GET_COUNTER(&htim2);
 80013f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <measure_distance+0x94>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f8:	607b      	str	r3, [r7, #4]

    // 6. Calculate distance (in cm)
    uint32_t distance = timeElapsed / 29.1;
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fe20 	bl	8001040 <__aeabi_ui2d>
 8001400:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <measure_distance+0x98>)
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <measure_distance+0x9c>)
 8001404:	f7fe ff2a 	bl	800025c <__aeabi_ddiv>
 8001408:	0002      	movs	r2, r0
 800140a:	000b      	movs	r3, r1
 800140c:	0010      	movs	r0, r2
 800140e:	0019      	movs	r1, r3
 8001410:	f7fe ff06 	bl	8000220 <__aeabi_d2uiz>
 8001414:	0003      	movs	r3, r0
 8001416:	603b      	str	r3, [r7, #0]

    return distance;
 8001418:	683b      	ldr	r3, [r7, #0]
}
 800141a:	0018      	movs	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	48000800 	.word	0x48000800
 8001428:	20000028 	.word	0x20000028
 800142c:	9999999a 	.word	0x9999999a
 8001430:	403d1999 	.word	0x403d1999

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143a:	f000 fae3 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143e:	f000 f81b 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001442:	f000 f91d 	bl	8001680 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001446:	f000 f8eb 	bl	8001620 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800144a:	f000 f869 	bl	8001520 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <main+0x40>)
 8001450:	2104      	movs	r1, #4
 8001452:	0018      	movs	r0, r3
 8001454:	f001 fcf6 	bl	8002e44 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <main+0x40>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	22fa      	movs	r2, #250	@ 0xfa
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	639a      	str	r2, [r3, #56]	@ 0x38
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t distance = measure_distance();
 8001462:	f7ff ff97 	bl	8001394 <measure_distance>
 8001466:	0003      	movs	r3, r0
 8001468:	607b      	str	r3, [r7, #4]
	  HAL_Delay(100);
 800146a:	2064      	movs	r0, #100	@ 0x64
 800146c:	f000 fb2e 	bl	8001acc <HAL_Delay>
  {
 8001470:	46c0      	nop			@ (mov r8, r8)
 8001472:	e7f6      	b.n	8001462 <main+0x2e>
 8001474:	20000028 	.word	0x20000028

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b099      	sub	sp, #100	@ 0x64
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	242c      	movs	r4, #44	@ 0x2c
 8001480:	193b      	adds	r3, r7, r4
 8001482:	0018      	movs	r0, r3
 8001484:	2334      	movs	r3, #52	@ 0x34
 8001486:	001a      	movs	r2, r3
 8001488:	2100      	movs	r1, #0
 800148a:	f003 f805 	bl	8004498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148e:	231c      	movs	r3, #28
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	0018      	movs	r0, r3
 8001494:	2310      	movs	r3, #16
 8001496:	001a      	movs	r2, r3
 8001498:	2100      	movs	r1, #0
 800149a:	f002 fffd 	bl	8004498 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800149e:	003b      	movs	r3, r7
 80014a0:	0018      	movs	r0, r3
 80014a2:	231c      	movs	r3, #28
 80014a4:	001a      	movs	r2, r3
 80014a6:	2100      	movs	r1, #0
 80014a8:	f002 fff6 	bl	8004498 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	2220      	movs	r2, #32
 80014b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014b2:	193b      	adds	r3, r7, r4
 80014b4:	2201      	movs	r2, #1
 80014b6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b8:	193b      	adds	r3, r7, r4
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	0018      	movs	r0, r3
 80014c2:	f000 fdb7 	bl	8002034 <HAL_RCC_OscConfig>
 80014c6:	1e03      	subs	r3, r0, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x56>
  {
    Error_Handler();
 80014ca:	f000 f96d 	bl	80017a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ce:	211c      	movs	r1, #28
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2207      	movs	r2, #7
 80014d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	2203      	movs	r2, #3
 80014da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e2:	187b      	adds	r3, r7, r1
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	2101      	movs	r1, #1
 80014ec:	0018      	movs	r0, r3
 80014ee:	f001 f927 	bl	8002740 <HAL_RCC_ClockConfig>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014f6:	f000 f957 	bl	80017a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014fa:	003b      	movs	r3, r7
 80014fc:	2202      	movs	r2, #2
 80014fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001500:	003b      	movs	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001506:	003b      	movs	r3, r7
 8001508:	0018      	movs	r0, r3
 800150a:	f001 fa85 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	1e03      	subs	r3, r0, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001512:	f000 f949 	bl	80017a8 <Error_Handler>
  }
}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b019      	add	sp, #100	@ 0x64
 800151c:	bd90      	pop	{r4, r7, pc}
	...

08001520 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	@ 0x38
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001526:	2328      	movs	r3, #40	@ 0x28
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	0018      	movs	r0, r3
 800152c:	2310      	movs	r3, #16
 800152e:	001a      	movs	r2, r3
 8001530:	2100      	movs	r1, #0
 8001532:	f002 ffb1 	bl	8004498 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001536:	2320      	movs	r3, #32
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	0018      	movs	r0, r3
 800153c:	2308      	movs	r3, #8
 800153e:	001a      	movs	r2, r3
 8001540:	2100      	movs	r1, #0
 8001542:	f002 ffa9 	bl	8004498 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	0018      	movs	r0, r3
 800154a:	231c      	movs	r3, #28
 800154c:	001a      	movs	r2, r3
 800154e:	2100      	movs	r1, #0
 8001550:	f002 ffa2 	bl	8004498 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001554:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <MX_TIM2_Init+0xf8>)
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	05d2      	lsls	r2, r2, #23
 800155a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800155c:	4b2e      	ldr	r3, [pc, #184]	@ (8001618 <MX_TIM2_Init+0xf8>)
 800155e:	2253      	movs	r2, #83	@ 0x53
 8001560:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <MX_TIM2_Init+0xf8>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001568:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <MX_TIM2_Init+0xf8>)
 800156a:	4a2c      	ldr	r2, [pc, #176]	@ (800161c <MX_TIM2_Init+0xfc>)
 800156c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <MX_TIM2_Init+0xf8>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <MX_TIM2_Init+0xf8>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800157a:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <MX_TIM2_Init+0xf8>)
 800157c:	0018      	movs	r0, r3
 800157e:	f001 fb49 	bl	8002c14 <HAL_TIM_Base_Init>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d001      	beq.n	800158a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001586:	f000 f90f 	bl	80017a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158a:	2128      	movs	r1, #40	@ 0x28
 800158c:	187b      	adds	r3, r7, r1
 800158e:	2280      	movs	r2, #128	@ 0x80
 8001590:	0152      	lsls	r2, r2, #5
 8001592:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001594:	187a      	adds	r2, r7, r1
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <MX_TIM2_Init+0xf8>)
 8001598:	0011      	movs	r1, r2
 800159a:	0018      	movs	r0, r3
 800159c:	f001 febe 	bl	800331c <HAL_TIM_ConfigClockSource>
 80015a0:	1e03      	subs	r3, r0, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80015a4:	f000 f900 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_TIM2_Init+0xf8>)
 80015aa:	0018      	movs	r0, r3
 80015ac:	f001 fbf2 	bl	8002d94 <HAL_TIM_PWM_Init>
 80015b0:	1e03      	subs	r3, r0, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80015b4:	f000 f8f8 	bl	80017a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2120      	movs	r1, #32
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c6:	187a      	adds	r2, r7, r1
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <MX_TIM2_Init+0xf8>)
 80015ca:	0011      	movs	r1, r2
 80015cc:	0018      	movs	r0, r3
 80015ce:	f002 fae9 	bl	8003ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	1e03      	subs	r3, r0, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80015d6:	f000 f8e7 	bl	80017a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2260      	movs	r2, #96	@ 0x60
 80015de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015f2:	1d39      	adds	r1, r7, #4
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <MX_TIM2_Init+0xf8>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	0018      	movs	r0, r3
 80015fa:	f001 fdc9 	bl	8003190 <HAL_TIM_PWM_ConfigChannel>
 80015fe:	1e03      	subs	r3, r0, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001602:	f000 f8d1 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <MX_TIM2_Init+0xf8>)
 8001608:	0018      	movs	r0, r3
 800160a:	f000 f91b 	bl	8001844 <HAL_TIM_MspPostInit>

}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b00e      	add	sp, #56	@ 0x38
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	20000028 	.word	0x20000028
 800161c:	000003e7 	.word	0x000003e7

08001620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001626:	4a15      	ldr	r2, [pc, #84]	@ (800167c <MX_USART2_UART_Init+0x5c>)
 8001628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800162a:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 800162c:	2296      	movs	r2, #150	@ 0x96
 800162e:	0212      	lsls	r2, r2, #8
 8001630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001656:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001662:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <MX_USART2_UART_Init+0x58>)
 8001664:	0018      	movs	r0, r3
 8001666:	f002 fb0b 	bl	8003c80 <HAL_UART_Init>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d001      	beq.n	8001672 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800166e:	f000 f89b 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001672:	46c0      	nop			@ (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000070 	.word	0x20000070
 800167c:	40004400 	.word	0x40004400

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b089      	sub	sp, #36	@ 0x24
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	240c      	movs	r4, #12
 8001688:	193b      	adds	r3, r7, r4
 800168a:	0018      	movs	r0, r3
 800168c:	2314      	movs	r3, #20
 800168e:	001a      	movs	r2, r3
 8001690:	2100      	movs	r1, #0
 8001692:	f002 ff01 	bl	8004498 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	4b42      	ldr	r3, [pc, #264]	@ (80017a0 <MX_GPIO_Init+0x120>)
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	4b41      	ldr	r3, [pc, #260]	@ (80017a0 <MX_GPIO_Init+0x120>)
 800169c:	2180      	movs	r1, #128	@ 0x80
 800169e:	0309      	lsls	r1, r1, #12
 80016a0:	430a      	orrs	r2, r1
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	4b3e      	ldr	r3, [pc, #248]	@ (80017a0 <MX_GPIO_Init+0x120>)
 80016a6:	695a      	ldr	r2, [r3, #20]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	031b      	lsls	r3, r3, #12
 80016ac:	4013      	ands	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b2:	4b3b      	ldr	r3, [pc, #236]	@ (80017a0 <MX_GPIO_Init+0x120>)
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <MX_GPIO_Init+0x120>)
 80016b8:	2180      	movs	r1, #128	@ 0x80
 80016ba:	03c9      	lsls	r1, r1, #15
 80016bc:	430a      	orrs	r2, r1
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <MX_GPIO_Init+0x120>)
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	4013      	ands	r3, r2
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b34      	ldr	r3, [pc, #208]	@ (80017a0 <MX_GPIO_Init+0x120>)
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <MX_GPIO_Init+0x120>)
 80016d4:	2180      	movs	r1, #128	@ 0x80
 80016d6:	0289      	lsls	r1, r1, #10
 80016d8:	430a      	orrs	r2, r1
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	4b30      	ldr	r3, [pc, #192]	@ (80017a0 <MX_GPIO_Init+0x120>)
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	2380      	movs	r3, #128	@ 0x80
 80016e2:	029b      	lsls	r3, r3, #10
 80016e4:	4013      	ands	r3, r2
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ea:	2390      	movs	r3, #144	@ 0x90
 80016ec:	05db      	lsls	r3, r3, #23
 80016ee:	2200      	movs	r2, #0
 80016f0:	2120      	movs	r1, #32
 80016f2:	0018      	movs	r0, r3
 80016f4:	f000 fc81 	bl	8001ffa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FRONT_TRIG_Pin|LEFT_MOTOR_POS_Pin|LEFT_MOTOR_NEG_Pin|RIGHT_MOTOR_POS_Pin
 80016f8:	23f2      	movs	r3, #242	@ 0xf2
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4829      	ldr	r0, [pc, #164]	@ (80017a4 <MX_GPIO_Init+0x124>)
 80016fe:	2200      	movs	r2, #0
 8001700:	0019      	movs	r1, r3
 8001702:	f000 fc7a 	bl	8001ffa <HAL_GPIO_WritePin>
                          |RIGHT_MOTOR_NEG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2280      	movs	r2, #128	@ 0x80
 800170a:	0192      	lsls	r2, r2, #6
 800170c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800170e:	193b      	adds	r3, r7, r4
 8001710:	2284      	movs	r2, #132	@ 0x84
 8001712:	0392      	lsls	r2, r2, #14
 8001714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	193b      	adds	r3, r7, r4
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800171c:	193b      	adds	r3, r7, r4
 800171e:	4a21      	ldr	r2, [pc, #132]	@ (80017a4 <MX_GPIO_Init+0x124>)
 8001720:	0019      	movs	r1, r3
 8001722:	0010      	movs	r0, r2
 8001724:	f000 fad4 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001728:	193b      	adds	r3, r7, r4
 800172a:	2220      	movs	r2, #32
 800172c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	193b      	adds	r3, r7, r4
 8001730:	2201      	movs	r2, #1
 8001732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	193b      	adds	r3, r7, r4
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	193b      	adds	r3, r7, r4
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001740:	193a      	adds	r2, r7, r4
 8001742:	2390      	movs	r3, #144	@ 0x90
 8001744:	05db      	lsls	r3, r3, #23
 8001746:	0011      	movs	r1, r2
 8001748:	0018      	movs	r0, r3
 800174a:	f000 fac1 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FRONT_TRIG_Pin LEFT_MOTOR_POS_Pin LEFT_MOTOR_NEG_Pin RIGHT_MOTOR_POS_Pin
                           RIGHT_MOTOR_NEG_Pin */
  GPIO_InitStruct.Pin = FRONT_TRIG_Pin|LEFT_MOTOR_POS_Pin|LEFT_MOTOR_NEG_Pin|RIGHT_MOTOR_POS_Pin
 800174e:	0021      	movs	r1, r4
 8001750:	187b      	adds	r3, r7, r1
 8001752:	22f2      	movs	r2, #242	@ 0xf2
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	601a      	str	r2, [r3, #0]
                          |RIGHT_MOTOR_NEG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	000c      	movs	r4, r1
 800175a:	193b      	adds	r3, r7, r4
 800175c:	2201      	movs	r2, #1
 800175e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	193b      	adds	r3, r7, r4
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	193b      	adds	r3, r7, r4
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	193b      	adds	r3, r7, r4
 800176e:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <MX_GPIO_Init+0x124>)
 8001770:	0019      	movs	r1, r3
 8001772:	0010      	movs	r0, r2
 8001774:	f000 faac 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_ECHO_Pin */
  GPIO_InitStruct.Pin = FRONT_ECHO_Pin;
 8001778:	0021      	movs	r1, r4
 800177a:	187b      	adds	r3, r7, r1
 800177c:	2240      	movs	r2, #64	@ 0x40
 800177e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	187b      	adds	r3, r7, r1
 8001782:	2200      	movs	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	187b      	adds	r3, r7, r1
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FRONT_ECHO_GPIO_Port, &GPIO_InitStruct);
 800178c:	187b      	adds	r3, r7, r1
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <MX_GPIO_Init+0x124>)
 8001790:	0019      	movs	r1, r3
 8001792:	0010      	movs	r0, r2
 8001794:	f000 fa9c 	bl	8001cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001798:	46c0      	nop			@ (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b009      	add	sp, #36	@ 0x24
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	48000800 	.word	0x48000800

080017a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b0:	46c0      	nop			@ (mov r8, r8)
 80017b2:	e7fd      	b.n	80017b0 <Error_Handler+0x8>

080017b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <HAL_MspInit+0x44>)
 80017bc:	699a      	ldr	r2, [r3, #24]
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <HAL_MspInit+0x44>)
 80017c0:	2101      	movs	r1, #1
 80017c2:	430a      	orrs	r2, r1
 80017c4:	619a      	str	r2, [r3, #24]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <HAL_MspInit+0x44>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4013      	ands	r3, r2
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_MspInit+0x44>)
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <HAL_MspInit+0x44>)
 80017d8:	2180      	movs	r1, #128	@ 0x80
 80017da:	0549      	lsls	r1, r1, #21
 80017dc:	430a      	orrs	r2, r1
 80017de:	61da      	str	r2, [r3, #28]
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <HAL_MspInit+0x44>)
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	055b      	lsls	r3, r3, #21
 80017e8:	4013      	ands	r3, r2
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	05db      	lsls	r3, r3, #23
 800180c:	429a      	cmp	r2, r3
 800180e:	d113      	bne.n	8001838 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <HAL_TIM_Base_MspInit+0x44>)
 8001812:	69da      	ldr	r2, [r3, #28]
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_TIM_Base_MspInit+0x44>)
 8001816:	2101      	movs	r1, #1
 8001818:	430a      	orrs	r2, r1
 800181a:	61da      	str	r2, [r3, #28]
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <HAL_TIM_Base_MspInit+0x44>)
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2201      	movs	r2, #1
 8001822:	4013      	ands	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	200f      	movs	r0, #15
 800182e:	f000 fa1d 	bl	8001c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001832:	200f      	movs	r0, #15
 8001834:	f000 fa2f 	bl	8001c96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001838:	46c0      	nop			@ (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b004      	add	sp, #16
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	240c      	movs	r4, #12
 800184e:	193b      	adds	r3, r7, r4
 8001850:	0018      	movs	r0, r3
 8001852:	2314      	movs	r3, #20
 8001854:	001a      	movs	r2, r3
 8001856:	2100      	movs	r1, #0
 8001858:	f002 fe1e 	bl	8004498 <memset>
  if(htim->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	@ 0x80
 8001862:	05db      	lsls	r3, r3, #23
 8001864:	429a      	cmp	r2, r3
 8001866:	d124      	bne.n	80018b2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <HAL_TIM_MspPostInit+0x78>)
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <HAL_TIM_MspPostInit+0x78>)
 800186e:	2180      	movs	r1, #128	@ 0x80
 8001870:	0289      	lsls	r1, r1, #10
 8001872:	430a      	orrs	r2, r1
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <HAL_TIM_MspPostInit+0x78>)
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	029b      	lsls	r3, r3, #10
 800187e:	4013      	ands	r3, r2
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001884:	0021      	movs	r1, r4
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2202      	movs	r2, #2
 800188a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2202      	movs	r2, #2
 8001890:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	187b      	adds	r3, r7, r1
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	2202      	movs	r2, #2
 80018a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	187a      	adds	r2, r7, r1
 80018a6:	2390      	movs	r3, #144	@ 0x90
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	0011      	movs	r1, r2
 80018ac:	0018      	movs	r0, r3
 80018ae:	f000 fa0f 	bl	8001cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b009      	add	sp, #36	@ 0x24
 80018b8:	bd90      	pop	{r4, r7, pc}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b08b      	sub	sp, #44	@ 0x2c
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	2414      	movs	r4, #20
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	0018      	movs	r0, r3
 80018ce:	2314      	movs	r3, #20
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f002 fde0 	bl	8004498 <memset>
  if(huart->Instance==USART2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001950 <HAL_UART_MspInit+0x90>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d132      	bne.n	8001948 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <HAL_UART_MspInit+0x94>)
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <HAL_UART_MspInit+0x94>)
 80018e8:	2180      	movs	r1, #128	@ 0x80
 80018ea:	0289      	lsls	r1, r1, #10
 80018ec:	430a      	orrs	r2, r1
 80018ee:	61da      	str	r2, [r3, #28]
 80018f0:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <HAL_UART_MspInit+0x94>)
 80018f2:	69da      	ldr	r2, [r3, #28]
 80018f4:	2380      	movs	r3, #128	@ 0x80
 80018f6:	029b      	lsls	r3, r3, #10
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_UART_MspInit+0x94>)
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <HAL_UART_MspInit+0x94>)
 8001904:	2180      	movs	r1, #128	@ 0x80
 8001906:	0289      	lsls	r1, r1, #10
 8001908:	430a      	orrs	r2, r1
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <HAL_UART_MspInit+0x94>)
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	029b      	lsls	r3, r3, #10
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800191a:	0021      	movs	r1, r4
 800191c:	187b      	adds	r3, r7, r1
 800191e:	220c      	movs	r2, #12
 8001920:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	187b      	adds	r3, r7, r1
 8001924:	2202      	movs	r2, #2
 8001926:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	187b      	adds	r3, r7, r1
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	187b      	adds	r3, r7, r1
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001934:	187b      	adds	r3, r7, r1
 8001936:	2201      	movs	r2, #1
 8001938:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	187a      	adds	r2, r7, r1
 800193c:	2390      	movs	r3, #144	@ 0x90
 800193e:	05db      	lsls	r3, r3, #23
 8001940:	0011      	movs	r1, r2
 8001942:	0018      	movs	r0, r3
 8001944:	f000 f9c4 	bl	8001cd0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001948:	46c0      	nop			@ (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b00b      	add	sp, #44	@ 0x2c
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	40004400 	.word	0x40004400
 8001954:	40021000 	.word	0x40021000

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800195c:	46c0      	nop			@ (mov r8, r8)
 800195e:	e7fd      	b.n	800195c <NMI_Handler+0x4>

08001960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001964:	46c0      	nop			@ (mov r8, r8)
 8001966:	e7fd      	b.n	8001964 <HardFault_Handler+0x4>

08001968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 f888 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	46c0      	nop			@ (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001990:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <TIM2_IRQHandler+0x14>)
 8001992:	0018      	movs	r0, r3
 8001994:	f001 fb0e 	bl	8002fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001998:	46c0      	nop			@ (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			@ (mov r8, r8)
 80019a0:	20000028 	.word	0x20000028

080019a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80019a8:	46c0      	nop			@ (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b0:	480d      	ldr	r0, [pc, #52]	@ (80019e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019b4:	f7ff fff6 	bl	80019a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b8:	480c      	ldr	r0, [pc, #48]	@ (80019ec <LoopForever+0x6>)
  ldr r1, =_edata
 80019ba:	490d      	ldr	r1, [pc, #52]	@ (80019f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <LoopForever+0xe>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c0:	e002      	b.n	80019c8 <LoopCopyDataInit>

080019c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c6:	3304      	adds	r3, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019cc:	d3f9      	bcc.n	80019c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ce:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d0:	4c0a      	ldr	r4, [pc, #40]	@ (80019fc <LoopForever+0x16>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d4:	e001      	b.n	80019da <LoopFillZerobss>

080019d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d8:	3204      	adds	r2, #4

080019da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019dc:	d3fb      	bcc.n	80019d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019de:	f002 fd63 	bl	80044a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019e2:	f7ff fd27 	bl	8001434 <main>

080019e6 <LoopForever>:

LoopForever:
    b LoopForever
 80019e6:	e7fe      	b.n	80019e6 <LoopForever>
  ldr   r0, =_estack
 80019e8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019f4:	08004588 	.word	0x08004588
  ldr r2, =_sbss
 80019f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019fc:	200000fc 	.word	0x200000fc

08001a00 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC1_COMP_IRQHandler>
	...

08001a04 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <HAL_Init+0x24>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_Init+0x24>)
 8001a0e:	2110      	movs	r1, #16
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f000 f809 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1a:	f7ff fecb 	bl	80017b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	40022000 	.word	0x40022000

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_InitTick+0x5c>)
 8001a36:	681c      	ldr	r4, [r3, #0]
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_InitTick+0x60>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	23fa      	movs	r3, #250	@ 0xfa
 8001a40:	0098      	lsls	r0, r3, #2
 8001a42:	f7fe fb61 	bl	8000108 <__udivsi3>
 8001a46:	0003      	movs	r3, r0
 8001a48:	0019      	movs	r1, r3
 8001a4a:	0020      	movs	r0, r4
 8001a4c:	f7fe fb5c 	bl	8000108 <__udivsi3>
 8001a50:	0003      	movs	r3, r0
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 f92f 	bl	8001cb6 <HAL_SYSTICK_Config>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e00f      	b.n	8001a80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d80b      	bhi.n	8001a7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	425b      	negs	r3, r3
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 f8fc 	bl	8001c6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_InitTick+0x64>)
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b003      	add	sp, #12
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_IncTick+0x1c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_IncTick+0x20>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	18d2      	adds	r2, r2, r3
 8001aa4:	4b03      	ldr	r3, [pc, #12]	@ (8001ab4 <HAL_IncTick+0x20>)
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	46c0      	nop			@ (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	200000f8 	.word	0x200000f8

08001ab8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b02      	ldr	r3, [pc, #8]	@ (8001ac8 <HAL_GetTick+0x10>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	200000f8 	.word	0x200000f8

08001acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff fff0 	bl	8001ab8 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	d005      	beq.n	8001af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <HAL_Delay+0x44>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	001a      	movs	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	189b      	adds	r3, r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	f7ff ffe0 	bl	8001ab8 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d8f7      	bhi.n	8001af4 <HAL_Delay+0x28>
  {
  }
}
 8001b04:	46c0      	nop			@ (mov r8, r8)
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b004      	add	sp, #16
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	20000008 	.word	0x20000008

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	1dfb      	adds	r3, r7, #7
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b26:	d809      	bhi.n	8001b3c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b28:	1dfb      	adds	r3, r7, #7
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	231f      	movs	r3, #31
 8001b30:	401a      	ands	r2, r3
 8001b32:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <__NVIC_EnableIRQ+0x30>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	4091      	lsls	r1, r2
 8001b38:	000a      	movs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
  }
}
 8001b3c:	46c0      	nop			@ (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b002      	add	sp, #8
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	0002      	movs	r2, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b5c:	d828      	bhi.n	8001bb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c1c <__NVIC_SetPriority+0xd4>)
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b25b      	sxtb	r3, r3
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	33c0      	adds	r3, #192	@ 0xc0
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	589b      	ldr	r3, [r3, r2]
 8001b6e:	1dfa      	adds	r2, r7, #7
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	0011      	movs	r1, r2
 8001b74:	2203      	movs	r2, #3
 8001b76:	400a      	ands	r2, r1
 8001b78:	00d2      	lsls	r2, r2, #3
 8001b7a:	21ff      	movs	r1, #255	@ 0xff
 8001b7c:	4091      	lsls	r1, r2
 8001b7e:	000a      	movs	r2, r1
 8001b80:	43d2      	mvns	r2, r2
 8001b82:	401a      	ands	r2, r3
 8001b84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	019b      	lsls	r3, r3, #6
 8001b8a:	22ff      	movs	r2, #255	@ 0xff
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	0018      	movs	r0, r3
 8001b94:	2303      	movs	r3, #3
 8001b96:	4003      	ands	r3, r0
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b9c:	481f      	ldr	r0, [pc, #124]	@ (8001c1c <__NVIC_SetPriority+0xd4>)
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	33c0      	adds	r3, #192	@ 0xc0
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bae:	e031      	b.n	8001c14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c20 <__NVIC_SetPriority+0xd8>)
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	230f      	movs	r3, #15
 8001bba:	400b      	ands	r3, r1
 8001bbc:	3b08      	subs	r3, #8
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3306      	adds	r3, #6
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	18d3      	adds	r3, r2, r3
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	1dfa      	adds	r2, r7, #7
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	0011      	movs	r1, r2
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	00d2      	lsls	r2, r2, #3
 8001bd6:	21ff      	movs	r1, #255	@ 0xff
 8001bd8:	4091      	lsls	r1, r2
 8001bda:	000a      	movs	r2, r1
 8001bdc:	43d2      	mvns	r2, r2
 8001bde:	401a      	ands	r2, r3
 8001be0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	019b      	lsls	r3, r3, #6
 8001be6:	22ff      	movs	r2, #255	@ 0xff
 8001be8:	401a      	ands	r2, r3
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	4003      	ands	r3, r0
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf8:	4809      	ldr	r0, [pc, #36]	@ (8001c20 <__NVIC_SetPriority+0xd8>)
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	001c      	movs	r4, r3
 8001c00:	230f      	movs	r3, #15
 8001c02:	4023      	ands	r3, r4
 8001c04:	3b08      	subs	r3, #8
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	3306      	adds	r3, #6
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	18c3      	adds	r3, r0, r3
 8001c10:	3304      	adds	r3, #4
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	46c0      	nop			@ (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b003      	add	sp, #12
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	1e5a      	subs	r2, r3, #1
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	045b      	lsls	r3, r3, #17
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d301      	bcc.n	8001c3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e010      	b.n	8001c5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <SysTick_Config+0x44>)
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	3a01      	subs	r2, #1
 8001c42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c44:	2301      	movs	r3, #1
 8001c46:	425b      	negs	r3, r3
 8001c48:	2103      	movs	r1, #3
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f7ff ff7c 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <SysTick_Config+0x44>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <SysTick_Config+0x44>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b002      	add	sp, #8
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	210f      	movs	r1, #15
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	1c02      	adds	r2, r0, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b25b      	sxtb	r3, r3
 8001c86:	0011      	movs	r1, r2
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff ff5d 	bl	8001b48 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b004      	add	sp, #16
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7ff ff33 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b002      	add	sp, #8
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff ffaf 	bl	8001c24 <SysTick_Config>
 8001cc6:	0003      	movs	r3, r0
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b002      	add	sp, #8
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cde:	e155      	b.n	8001f8c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4091      	lsls	r1, r2
 8001cea:	000a      	movs	r2, r1
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d100      	bne.n	8001cf8 <HAL_GPIO_Init+0x28>
 8001cf6:	e146      	b.n	8001f86 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d005      	beq.n	8001d10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d130      	bne.n	8001d72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	43da      	mvns	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	409a      	lsls	r2, r3
 8001d32:	0013      	movs	r3, r2
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d46:	2201      	movs	r2, #1
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
 8001d64:	0013      	movs	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2203      	movs	r2, #3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d017      	beq.n	8001dae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	2203      	movs	r2, #3
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	0013      	movs	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2203      	movs	r2, #3
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d123      	bne.n	8001e02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	08da      	lsrs	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3208      	adds	r2, #8
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	58d3      	ldr	r3, [r2, r3]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2207      	movs	r2, #7
 8001dcc:	4013      	ands	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2107      	movs	r1, #7
 8001de6:	400b      	ands	r3, r1
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	409a      	lsls	r2, r3
 8001dec:	0013      	movs	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	08da      	lsrs	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3208      	adds	r2, #8
 8001dfc:	0092      	lsls	r2, r2, #2
 8001dfe:	6939      	ldr	r1, [r7, #16]
 8001e00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	43da      	mvns	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	401a      	ands	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	23c0      	movs	r3, #192	@ 0xc0
 8001e3c:	029b      	lsls	r3, r3, #10
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d100      	bne.n	8001e44 <HAL_GPIO_Init+0x174>
 8001e42:	e0a0      	b.n	8001f86 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e44:	4b57      	ldr	r3, [pc, #348]	@ (8001fa4 <HAL_GPIO_Init+0x2d4>)
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <HAL_GPIO_Init+0x2d4>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	619a      	str	r2, [r3, #24]
 8001e50:	4b54      	ldr	r3, [pc, #336]	@ (8001fa4 <HAL_GPIO_Init+0x2d4>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2201      	movs	r2, #1
 8001e56:	4013      	ands	r3, r2
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e5c:	4a52      	ldr	r2, [pc, #328]	@ (8001fa8 <HAL_GPIO_Init+0x2d8>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	589b      	ldr	r3, [r3, r2]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	4013      	ands	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	409a      	lsls	r2, r3
 8001e76:	0013      	movs	r3, r2
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	2390      	movs	r3, #144	@ 0x90
 8001e84:	05db      	lsls	r3, r3, #23
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d019      	beq.n	8001ebe <HAL_GPIO_Init+0x1ee>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a47      	ldr	r2, [pc, #284]	@ (8001fac <HAL_GPIO_Init+0x2dc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0x1ea>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a46      	ldr	r2, [pc, #280]	@ (8001fb0 <HAL_GPIO_Init+0x2e0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <HAL_GPIO_Init+0x1e6>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a45      	ldr	r2, [pc, #276]	@ (8001fb4 <HAL_GPIO_Init+0x2e4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x1e2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a44      	ldr	r2, [pc, #272]	@ (8001fb8 <HAL_GPIO_Init+0x2e8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_GPIO_Init+0x1de>
 8001eaa:	2304      	movs	r3, #4
 8001eac:	e008      	b.n	8001ec0 <HAL_GPIO_Init+0x1f0>
 8001eae:	2305      	movs	r3, #5
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x1f0>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e004      	b.n	8001ec0 <HAL_GPIO_Init+0x1f0>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_Init+0x1f0>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_GPIO_Init+0x1f0>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	2103      	movs	r1, #3
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	0092      	lsls	r2, r2, #2
 8001ec8:	4093      	lsls	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ed0:	4935      	ldr	r1, [pc, #212]	@ (8001fa8 <HAL_GPIO_Init+0x2d8>)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ede:	4b37      	ldr	r3, [pc, #220]	@ (8001fbc <HAL_GPIO_Init+0x2ec>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	2380      	movs	r3, #128	@ 0x80
 8001ef4:	035b      	lsls	r3, r3, #13
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f02:	4b2e      	ldr	r3, [pc, #184]	@ (8001fbc <HAL_GPIO_Init+0x2ec>)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f08:	4b2c      	ldr	r3, [pc, #176]	@ (8001fbc <HAL_GPIO_Init+0x2ec>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43da      	mvns	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	2380      	movs	r3, #128	@ 0x80
 8001f1e:	039b      	lsls	r3, r3, #14
 8001f20:	4013      	ands	r3, r2
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f2c:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <HAL_GPIO_Init+0x2ec>)
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001f32:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <HAL_GPIO_Init+0x2ec>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	029b      	lsls	r3, r3, #10
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f56:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <HAL_GPIO_Init+0x2ec>)
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001f5c:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <HAL_GPIO_Init+0x2ec>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	43da      	mvns	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	4013      	ands	r3, r2
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <HAL_GPIO_Init+0x2ec>)
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	40da      	lsrs	r2, r3
 8001f94:	1e13      	subs	r3, r2, #0
 8001f96:	d000      	beq.n	8001f9a <HAL_GPIO_Init+0x2ca>
 8001f98:	e6a2      	b.n	8001ce0 <HAL_GPIO_Init+0x10>
  } 
}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b006      	add	sp, #24
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	48000400 	.word	0x48000400
 8001fb0:	48000800 	.word	0x48000800
 8001fb4:	48000c00 	.word	0x48000c00
 8001fb8:	48001000 	.word	0x48001000
 8001fbc:	40010400 	.word	0x40010400

08001fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	000a      	movs	r2, r1
 8001fca:	1cbb      	adds	r3, r7, #2
 8001fcc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	1cba      	adds	r2, r7, #2
 8001fd4:	8812      	ldrh	r2, [r2, #0]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001fda:	230f      	movs	r3, #15
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e003      	b.n	8001fec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001fec:	230f      	movs	r3, #15
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	781b      	ldrb	r3, [r3, #0]
  }
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b004      	add	sp, #16
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	0008      	movs	r0, r1
 8002004:	0011      	movs	r1, r2
 8002006:	1cbb      	adds	r3, r7, #2
 8002008:	1c02      	adds	r2, r0, #0
 800200a:	801a      	strh	r2, [r3, #0]
 800200c:	1c7b      	adds	r3, r7, #1
 800200e:	1c0a      	adds	r2, r1, #0
 8002010:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002012:	1c7b      	adds	r3, r7, #1
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d004      	beq.n	8002024 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800201a:	1cbb      	adds	r3, r7, #2
 800201c:	881a      	ldrh	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002022:	e003      	b.n	800202c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002024:	1cbb      	adds	r3, r7, #2
 8002026:	881a      	ldrh	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800202c:	46c0      	nop			@ (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	f000 fb76 	bl	8002734 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	4013      	ands	r3, r2
 8002050:	d100      	bne.n	8002054 <HAL_RCC_OscConfig+0x20>
 8002052:	e08e      	b.n	8002172 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002054:	4bc5      	ldr	r3, [pc, #788]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	220c      	movs	r2, #12
 800205a:	4013      	ands	r3, r2
 800205c:	2b04      	cmp	r3, #4
 800205e:	d00e      	beq.n	800207e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002060:	4bc2      	ldr	r3, [pc, #776]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	220c      	movs	r2, #12
 8002066:	4013      	ands	r3, r2
 8002068:	2b08      	cmp	r3, #8
 800206a:	d117      	bne.n	800209c <HAL_RCC_OscConfig+0x68>
 800206c:	4bbf      	ldr	r3, [pc, #764]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	23c0      	movs	r3, #192	@ 0xc0
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	401a      	ands	r2, r3
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	025b      	lsls	r3, r3, #9
 800207a:	429a      	cmp	r2, r3
 800207c:	d10e      	bne.n	800209c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207e:	4bbb      	ldr	r3, [pc, #748]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	@ 0x80
 8002084:	029b      	lsls	r3, r3, #10
 8002086:	4013      	ands	r3, r2
 8002088:	d100      	bne.n	800208c <HAL_RCC_OscConfig+0x58>
 800208a:	e071      	b.n	8002170 <HAL_RCC_OscConfig+0x13c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d000      	beq.n	8002096 <HAL_RCC_OscConfig+0x62>
 8002094:	e06c      	b.n	8002170 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	f000 fb4c 	bl	8002734 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_OscConfig+0x80>
 80020a4:	4bb1      	ldr	r3, [pc, #708]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4bb0      	ldr	r3, [pc, #704]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80020aa:	2180      	movs	r1, #128	@ 0x80
 80020ac:	0249      	lsls	r1, r1, #9
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e02f      	b.n	8002114 <HAL_RCC_OscConfig+0xe0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_OscConfig+0xa2>
 80020bc:	4bab      	ldr	r3, [pc, #684]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4baa      	ldr	r3, [pc, #680]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80020c2:	49ab      	ldr	r1, [pc, #684]	@ (8002370 <HAL_RCC_OscConfig+0x33c>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	4ba8      	ldr	r3, [pc, #672]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4ba7      	ldr	r3, [pc, #668]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80020ce:	49a9      	ldr	r1, [pc, #676]	@ (8002374 <HAL_RCC_OscConfig+0x340>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e01e      	b.n	8002114 <HAL_RCC_OscConfig+0xe0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d10e      	bne.n	80020fc <HAL_RCC_OscConfig+0xc8>
 80020de:	4ba3      	ldr	r3, [pc, #652]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4ba2      	ldr	r3, [pc, #648]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80020e4:	2180      	movs	r1, #128	@ 0x80
 80020e6:	02c9      	lsls	r1, r1, #11
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	4b9f      	ldr	r3, [pc, #636]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b9e      	ldr	r3, [pc, #632]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80020f2:	2180      	movs	r1, #128	@ 0x80
 80020f4:	0249      	lsls	r1, r1, #9
 80020f6:	430a      	orrs	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0xe0>
 80020fc:	4b9b      	ldr	r3, [pc, #620]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b9a      	ldr	r3, [pc, #616]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002102:	499b      	ldr	r1, [pc, #620]	@ (8002370 <HAL_RCC_OscConfig+0x33c>)
 8002104:	400a      	ands	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	4b98      	ldr	r3, [pc, #608]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b97      	ldr	r3, [pc, #604]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 800210e:	4999      	ldr	r1, [pc, #612]	@ (8002374 <HAL_RCC_OscConfig+0x340>)
 8002110:	400a      	ands	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d014      	beq.n	8002146 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fccc 	bl	8001ab8 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002126:	f7ff fcc7 	bl	8001ab8 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b64      	cmp	r3, #100	@ 0x64
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e2fd      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002138:	4b8c      	ldr	r3, [pc, #560]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	029b      	lsls	r3, r3, #10
 8002140:	4013      	ands	r3, r2
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0xf2>
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff fcb7 	bl	8001ab8 <HAL_GetTick>
 800214a:	0003      	movs	r3, r0
 800214c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff fcb2 	bl	8001ab8 <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	@ 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e2e8      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	4b82      	ldr	r3, [pc, #520]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	029b      	lsls	r3, r3, #10
 800216a:	4013      	ands	r3, r2
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x11c>
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2202      	movs	r2, #2
 8002178:	4013      	ands	r3, r2
 800217a:	d100      	bne.n	800217e <HAL_RCC_OscConfig+0x14a>
 800217c:	e06c      	b.n	8002258 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800217e:	4b7b      	ldr	r3, [pc, #492]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	220c      	movs	r2, #12
 8002184:	4013      	ands	r3, r2
 8002186:	d00e      	beq.n	80021a6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002188:	4b78      	ldr	r3, [pc, #480]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	220c      	movs	r2, #12
 800218e:	4013      	ands	r3, r2
 8002190:	2b08      	cmp	r3, #8
 8002192:	d11f      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1a0>
 8002194:	4b75      	ldr	r3, [pc, #468]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	23c0      	movs	r3, #192	@ 0xc0
 800219a:	025b      	lsls	r3, r3, #9
 800219c:	401a      	ands	r2, r3
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d116      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a6:	4b71      	ldr	r3, [pc, #452]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_OscConfig+0x188>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e2bb      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021bc:	4b6b      	ldr	r3, [pc, #428]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	22f8      	movs	r2, #248	@ 0xf8
 80021c2:	4393      	bics	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00da      	lsls	r2, r3, #3
 80021cc:	4b67      	ldr	r3, [pc, #412]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	e041      	b.n	8002258 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d024      	beq.n	8002226 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021dc:	4b63      	ldr	r3, [pc, #396]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b62      	ldr	r3, [pc, #392]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80021e2:	2101      	movs	r1, #1
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fc66 	bl	8001ab8 <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f2:	f7ff fc61 	bl	8001ab8 <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e297      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	4b59      	ldr	r3, [pc, #356]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2202      	movs	r2, #2
 800220a:	4013      	ands	r3, r2
 800220c:	d0f1      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220e:	4b57      	ldr	r3, [pc, #348]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	22f8      	movs	r2, #248	@ 0xf8
 8002214:	4393      	bics	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	00da      	lsls	r2, r3, #3
 800221e:	4b53      	ldr	r3, [pc, #332]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e018      	b.n	8002258 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002226:	4b51      	ldr	r3, [pc, #324]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b50      	ldr	r3, [pc, #320]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 800222c:	2101      	movs	r1, #1
 800222e:	438a      	bics	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7ff fc41 	bl	8001ab8 <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800223c:	f7ff fc3c 	bl	8001ab8 <HAL_GetTick>
 8002240:	0002      	movs	r2, r0
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e272      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	4b47      	ldr	r3, [pc, #284]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d1f1      	bne.n	800223c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2208      	movs	r2, #8
 800225e:	4013      	ands	r3, r2
 8002260:	d036      	beq.n	80022d0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d019      	beq.n	800229e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226a:	4b40      	ldr	r3, [pc, #256]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 800226c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800226e:	4b3f      	ldr	r3, [pc, #252]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002270:	2101      	movs	r1, #1
 8002272:	430a      	orrs	r2, r1
 8002274:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7ff fc1f 	bl	8001ab8 <HAL_GetTick>
 800227a:	0003      	movs	r3, r0
 800227c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff fc1a 	bl	8001ab8 <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e250      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	4b36      	ldr	r3, [pc, #216]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	2202      	movs	r2, #2
 8002298:	4013      	ands	r3, r2
 800229a:	d0f1      	beq.n	8002280 <HAL_RCC_OscConfig+0x24c>
 800229c:	e018      	b.n	80022d0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229e:	4b33      	ldr	r3, [pc, #204]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80022a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022a2:	4b32      	ldr	r3, [pc, #200]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80022a4:	2101      	movs	r1, #1
 80022a6:	438a      	bics	r2, r1
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022aa:	f7ff fc05 	bl	8001ab8 <HAL_GetTick>
 80022ae:	0003      	movs	r3, r0
 80022b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b4:	f7ff fc00 	bl	8001ab8 <HAL_GetTick>
 80022b8:	0002      	movs	r2, r0
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e236      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c6:	4b29      	ldr	r3, [pc, #164]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	2202      	movs	r2, #2
 80022cc:	4013      	ands	r3, r2
 80022ce:	d1f1      	bne.n	80022b4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2204      	movs	r2, #4
 80022d6:	4013      	ands	r3, r2
 80022d8:	d100      	bne.n	80022dc <HAL_RCC_OscConfig+0x2a8>
 80022da:	e0b5      	b.n	8002448 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022dc:	201f      	movs	r0, #31
 80022de:	183b      	adds	r3, r7, r0
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e4:	4b21      	ldr	r3, [pc, #132]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80022e6:	69da      	ldr	r2, [r3, #28]
 80022e8:	2380      	movs	r3, #128	@ 0x80
 80022ea:	055b      	lsls	r3, r3, #21
 80022ec:	4013      	ands	r3, r2
 80022ee:	d110      	bne.n	8002312 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b1e      	ldr	r3, [pc, #120]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 80022f6:	2180      	movs	r1, #128	@ 0x80
 80022f8:	0549      	lsls	r1, r1, #21
 80022fa:	430a      	orrs	r2, r1
 80022fc:	61da      	str	r2, [r3, #28]
 80022fe:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	2380      	movs	r3, #128	@ 0x80
 8002304:	055b      	lsls	r3, r3, #21
 8002306:	4013      	ands	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800230c:	183b      	adds	r3, r7, r0
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <HAL_RCC_OscConfig+0x344>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4013      	ands	r3, r2
 800231c:	d11a      	bne.n	8002354 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231e:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <HAL_RCC_OscConfig+0x344>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_RCC_OscConfig+0x344>)
 8002324:	2180      	movs	r1, #128	@ 0x80
 8002326:	0049      	lsls	r1, r1, #1
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232c:	f7ff fbc4 	bl	8001ab8 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002336:	f7ff fbbf 	bl	8001ab8 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	@ 0x64
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e1f5      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <HAL_RCC_OscConfig+0x344>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4013      	ands	r3, r2
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d10f      	bne.n	800237c <HAL_RCC_OscConfig+0x348>
 800235c:	4b03      	ldr	r3, [pc, #12]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	4b02      	ldr	r3, [pc, #8]	@ (800236c <HAL_RCC_OscConfig+0x338>)
 8002362:	2101      	movs	r1, #1
 8002364:	430a      	orrs	r2, r1
 8002366:	621a      	str	r2, [r3, #32]
 8002368:	e036      	b.n	80023d8 <HAL_RCC_OscConfig+0x3a4>
 800236a:	46c0      	nop			@ (mov r8, r8)
 800236c:	40021000 	.word	0x40021000
 8002370:	fffeffff 	.word	0xfffeffff
 8002374:	fffbffff 	.word	0xfffbffff
 8002378:	40007000 	.word	0x40007000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10c      	bne.n	800239e <HAL_RCC_OscConfig+0x36a>
 8002384:	4bca      	ldr	r3, [pc, #808]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	4bc9      	ldr	r3, [pc, #804]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800238a:	2101      	movs	r1, #1
 800238c:	438a      	bics	r2, r1
 800238e:	621a      	str	r2, [r3, #32]
 8002390:	4bc7      	ldr	r3, [pc, #796]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	4bc6      	ldr	r3, [pc, #792]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002396:	2104      	movs	r1, #4
 8002398:	438a      	bics	r2, r1
 800239a:	621a      	str	r2, [r3, #32]
 800239c:	e01c      	b.n	80023d8 <HAL_RCC_OscConfig+0x3a4>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x38c>
 80023a6:	4bc2      	ldr	r3, [pc, #776]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	4bc1      	ldr	r3, [pc, #772]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80023ac:	2104      	movs	r1, #4
 80023ae:	430a      	orrs	r2, r1
 80023b0:	621a      	str	r2, [r3, #32]
 80023b2:	4bbf      	ldr	r3, [pc, #764]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80023b4:	6a1a      	ldr	r2, [r3, #32]
 80023b6:	4bbe      	ldr	r3, [pc, #760]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	430a      	orrs	r2, r1
 80023bc:	621a      	str	r2, [r3, #32]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0x3a4>
 80023c0:	4bbb      	ldr	r3, [pc, #748]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	4bba      	ldr	r3, [pc, #744]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80023c6:	2101      	movs	r1, #1
 80023c8:	438a      	bics	r2, r1
 80023ca:	621a      	str	r2, [r3, #32]
 80023cc:	4bb8      	ldr	r3, [pc, #736]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80023ce:	6a1a      	ldr	r2, [r3, #32]
 80023d0:	4bb7      	ldr	r3, [pc, #732]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80023d2:	2104      	movs	r1, #4
 80023d4:	438a      	bics	r2, r1
 80023d6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d014      	beq.n	800240a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7ff fb6a 	bl	8001ab8 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e8:	e009      	b.n	80023fe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7ff fb65 	bl	8001ab8 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	4aaf      	ldr	r2, [pc, #700]	@ (80026b4 <HAL_RCC_OscConfig+0x680>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e19a      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fe:	4bac      	ldr	r3, [pc, #688]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	2202      	movs	r2, #2
 8002404:	4013      	ands	r3, r2
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x3b6>
 8002408:	e013      	b.n	8002432 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7ff fb55 	bl	8001ab8 <HAL_GetTick>
 800240e:	0003      	movs	r3, r0
 8002410:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002412:	e009      	b.n	8002428 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7ff fb50 	bl	8001ab8 <HAL_GetTick>
 8002418:	0002      	movs	r2, r0
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	4aa5      	ldr	r2, [pc, #660]	@ (80026b4 <HAL_RCC_OscConfig+0x680>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e185      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	4ba1      	ldr	r3, [pc, #644]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	2202      	movs	r2, #2
 800242e:	4013      	ands	r3, r2
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002432:	231f      	movs	r3, #31
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b9c      	ldr	r3, [pc, #624]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	4b9b      	ldr	r3, [pc, #620]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002442:	499d      	ldr	r1, [pc, #628]	@ (80026b8 <HAL_RCC_OscConfig+0x684>)
 8002444:	400a      	ands	r2, r1
 8002446:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2210      	movs	r2, #16
 800244e:	4013      	ands	r3, r2
 8002450:	d063      	beq.n	800251a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d12a      	bne.n	80024b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800245a:	4b95      	ldr	r3, [pc, #596]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800245c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800245e:	4b94      	ldr	r3, [pc, #592]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002460:	2104      	movs	r1, #4
 8002462:	430a      	orrs	r2, r1
 8002464:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002466:	4b92      	ldr	r3, [pc, #584]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800246a:	4b91      	ldr	r3, [pc, #580]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800246c:	2101      	movs	r1, #1
 800246e:	430a      	orrs	r2, r1
 8002470:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7ff fb21 	bl	8001ab8 <HAL_GetTick>
 8002476:	0003      	movs	r3, r0
 8002478:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800247c:	f7ff fb1c 	bl	8001ab8 <HAL_GetTick>
 8002480:	0002      	movs	r2, r0
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e152      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800248e:	4b88      	ldr	r3, [pc, #544]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002492:	2202      	movs	r2, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d0f1      	beq.n	800247c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002498:	4b85      	ldr	r3, [pc, #532]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800249a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249c:	22f8      	movs	r2, #248	@ 0xf8
 800249e:	4393      	bics	r3, r2
 80024a0:	0019      	movs	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	00da      	lsls	r2, r3, #3
 80024a8:	4b81      	ldr	r3, [pc, #516]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80024aa:	430a      	orrs	r2, r1
 80024ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80024ae:	e034      	b.n	800251a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	3305      	adds	r3, #5
 80024b6:	d111      	bne.n	80024dc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80024b8:	4b7d      	ldr	r3, [pc, #500]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80024ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024bc:	4b7c      	ldr	r3, [pc, #496]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80024be:	2104      	movs	r1, #4
 80024c0:	438a      	bics	r2, r1
 80024c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024c4:	4b7a      	ldr	r3, [pc, #488]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80024c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c8:	22f8      	movs	r2, #248	@ 0xf8
 80024ca:	4393      	bics	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	00da      	lsls	r2, r3, #3
 80024d4:	4b76      	ldr	r3, [pc, #472]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80024da:	e01e      	b.n	800251a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024dc:	4b74      	ldr	r3, [pc, #464]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80024de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024e0:	4b73      	ldr	r3, [pc, #460]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80024e2:	2104      	movs	r1, #4
 80024e4:	430a      	orrs	r2, r1
 80024e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024e8:	4b71      	ldr	r3, [pc, #452]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80024ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ec:	4b70      	ldr	r3, [pc, #448]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	438a      	bics	r2, r1
 80024f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7ff fae0 	bl	8001ab8 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024fe:	f7ff fadb 	bl	8001ab8 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e111      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002510:	4b67      	ldr	r3, [pc, #412]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002514:	2202      	movs	r2, #2
 8002516:	4013      	ands	r3, r2
 8002518:	d1f1      	bne.n	80024fe <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2220      	movs	r2, #32
 8002520:	4013      	ands	r3, r2
 8002522:	d05c      	beq.n	80025de <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002524:	4b62      	ldr	r3, [pc, #392]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	220c      	movs	r2, #12
 800252a:	4013      	ands	r3, r2
 800252c:	2b0c      	cmp	r3, #12
 800252e:	d00e      	beq.n	800254e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002530:	4b5f      	ldr	r3, [pc, #380]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	220c      	movs	r2, #12
 8002536:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002538:	2b08      	cmp	r3, #8
 800253a:	d114      	bne.n	8002566 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800253c:	4b5c      	ldr	r3, [pc, #368]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	23c0      	movs	r3, #192	@ 0xc0
 8002542:	025b      	lsls	r3, r3, #9
 8002544:	401a      	ands	r2, r3
 8002546:	23c0      	movs	r3, #192	@ 0xc0
 8002548:	025b      	lsls	r3, r3, #9
 800254a:	429a      	cmp	r2, r3
 800254c:	d10b      	bne.n	8002566 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800254e:	4b58      	ldr	r3, [pc, #352]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002550:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	029b      	lsls	r3, r3, #10
 8002556:	4013      	ands	r3, r2
 8002558:	d040      	beq.n	80025dc <HAL_RCC_OscConfig+0x5a8>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d03c      	beq.n	80025dc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0e6      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01b      	beq.n	80025a6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800256e:	4b50      	ldr	r3, [pc, #320]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002572:	4b4f      	ldr	r3, [pc, #316]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002574:	2180      	movs	r1, #128	@ 0x80
 8002576:	0249      	lsls	r1, r1, #9
 8002578:	430a      	orrs	r2, r1
 800257a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff fa9c 	bl	8001ab8 <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002586:	f7ff fa97 	bl	8001ab8 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0cd      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002598:	4b45      	ldr	r3, [pc, #276]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800259a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	029b      	lsls	r3, r3, #10
 80025a0:	4013      	ands	r3, r2
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x552>
 80025a4:	e01b      	b.n	80025de <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80025a6:	4b42      	ldr	r3, [pc, #264]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80025a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025aa:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80025ac:	4943      	ldr	r1, [pc, #268]	@ (80026bc <HAL_RCC_OscConfig+0x688>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7ff fa81 	bl	8001ab8 <HAL_GetTick>
 80025b6:	0003      	movs	r3, r0
 80025b8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025bc:	f7ff fa7c 	bl	8001ab8 <HAL_GetTick>
 80025c0:	0002      	movs	r2, r0
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0b2      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025ce:	4b38      	ldr	r3, [pc, #224]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80025d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	029b      	lsls	r3, r3, #10
 80025d6:	4013      	ands	r3, r2
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x588>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025dc:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d100      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5b4>
 80025e6:	e0a4      	b.n	8002732 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e8:	4b31      	ldr	r3, [pc, #196]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	220c      	movs	r2, #12
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d100      	bne.n	80025f6 <HAL_RCC_OscConfig+0x5c2>
 80025f4:	e078      	b.n	80026e8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d14c      	bne.n	8002698 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fe:	4b2c      	ldr	r3, [pc, #176]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b2b      	ldr	r3, [pc, #172]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002604:	492e      	ldr	r1, [pc, #184]	@ (80026c0 <HAL_RCC_OscConfig+0x68c>)
 8002606:	400a      	ands	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7ff fa55 	bl	8001ab8 <HAL_GetTick>
 800260e:	0003      	movs	r3, r0
 8002610:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff fa50 	bl	8001ab8 <HAL_GetTick>
 8002618:	0002      	movs	r2, r0
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e086      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	4b22      	ldr	r3, [pc, #136]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	2380      	movs	r3, #128	@ 0x80
 800262c:	049b      	lsls	r3, r3, #18
 800262e:	4013      	ands	r3, r2
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002632:	4b1f      	ldr	r3, [pc, #124]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002636:	220f      	movs	r2, #15
 8002638:	4393      	bics	r3, r2
 800263a:	0019      	movs	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002640:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002642:	430a      	orrs	r2, r1
 8002644:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002646:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a1e      	ldr	r2, [pc, #120]	@ (80026c4 <HAL_RCC_OscConfig+0x690>)
 800264c:	4013      	ands	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	431a      	orrs	r2, r3
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800265c:	430a      	orrs	r2, r1
 800265e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 8002666:	2180      	movs	r1, #128	@ 0x80
 8002668:	0449      	lsls	r1, r1, #17
 800266a:	430a      	orrs	r2, r1
 800266c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7ff fa23 	bl	8001ab8 <HAL_GetTick>
 8002672:	0003      	movs	r3, r0
 8002674:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002678:	f7ff fa1e 	bl	8001ab8 <HAL_GetTick>
 800267c:	0002      	movs	r2, r0
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e054      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268a:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	2380      	movs	r3, #128	@ 0x80
 8002690:	049b      	lsls	r3, r3, #18
 8002692:	4013      	ands	r3, r2
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x644>
 8002696:	e04c      	b.n	8002732 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <HAL_RCC_OscConfig+0x67c>)
 800269e:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <HAL_RCC_OscConfig+0x68c>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fa08 	bl	8001ab8 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ac:	e015      	b.n	80026da <HAL_RCC_OscConfig+0x6a6>
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	40021000 	.word	0x40021000
 80026b4:	00001388 	.word	0x00001388
 80026b8:	efffffff 	.word	0xefffffff
 80026bc:	fffeffff 	.word	0xfffeffff
 80026c0:	feffffff 	.word	0xfeffffff
 80026c4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7ff f9f6 	bl	8001ab8 <HAL_GetTick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e02c      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026da:	4b18      	ldr	r3, [pc, #96]	@ (800273c <HAL_RCC_OscConfig+0x708>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	049b      	lsls	r3, r3, #18
 80026e2:	4013      	ands	r3, r2
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x694>
 80026e6:	e024      	b.n	8002732 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e01f      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026f4:	4b11      	ldr	r3, [pc, #68]	@ (800273c <HAL_RCC_OscConfig+0x708>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026fa:	4b10      	ldr	r3, [pc, #64]	@ (800273c <HAL_RCC_OscConfig+0x708>)
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	23c0      	movs	r3, #192	@ 0xc0
 8002704:	025b      	lsls	r3, r3, #9
 8002706:	401a      	ands	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	429a      	cmp	r2, r3
 800270e:	d10e      	bne.n	800272e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	220f      	movs	r2, #15
 8002714:	401a      	ands	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d107      	bne.n	800272e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	23f0      	movs	r3, #240	@ 0xf0
 8002722:	039b      	lsls	r3, r3, #14
 8002724:	401a      	ands	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b008      	add	sp, #32
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000

08002740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0bf      	b.n	80028d4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002754:	4b61      	ldr	r3, [pc, #388]	@ (80028dc <HAL_RCC_ClockConfig+0x19c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2201      	movs	r2, #1
 800275a:	4013      	ands	r3, r2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d911      	bls.n	8002786 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b5e      	ldr	r3, [pc, #376]	@ (80028dc <HAL_RCC_ClockConfig+0x19c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2201      	movs	r2, #1
 8002768:	4393      	bics	r3, r2
 800276a:	0019      	movs	r1, r3
 800276c:	4b5b      	ldr	r3, [pc, #364]	@ (80028dc <HAL_RCC_ClockConfig+0x19c>)
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002774:	4b59      	ldr	r3, [pc, #356]	@ (80028dc <HAL_RCC_ClockConfig+0x19c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2201      	movs	r2, #1
 800277a:	4013      	ands	r3, r2
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0a6      	b.n	80028d4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2202      	movs	r2, #2
 800278c:	4013      	ands	r3, r2
 800278e:	d015      	beq.n	80027bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2204      	movs	r2, #4
 8002796:	4013      	ands	r3, r2
 8002798:	d006      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800279a:	4b51      	ldr	r3, [pc, #324]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4b50      	ldr	r3, [pc, #320]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 80027a0:	21e0      	movs	r1, #224	@ 0xe0
 80027a2:	00c9      	lsls	r1, r1, #3
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a8:	4b4d      	ldr	r3, [pc, #308]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	22f0      	movs	r2, #240	@ 0xf0
 80027ae:	4393      	bics	r3, r2
 80027b0:	0019      	movs	r1, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	4b4a      	ldr	r3, [pc, #296]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2201      	movs	r2, #1
 80027c2:	4013      	ands	r3, r2
 80027c4:	d04c      	beq.n	8002860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b44      	ldr	r3, [pc, #272]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	029b      	lsls	r3, r3, #10
 80027d6:	4013      	ands	r3, r2
 80027d8:	d120      	bne.n	800281c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e07a      	b.n	80028d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	4b3e      	ldr	r3, [pc, #248]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	@ 0x80
 80027ec:	049b      	lsls	r3, r3, #18
 80027ee:	4013      	ands	r3, r2
 80027f0:	d114      	bne.n	800281c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e06e      	b.n	80028d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027fe:	4b38      	ldr	r3, [pc, #224]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	029b      	lsls	r3, r3, #10
 8002806:	4013      	ands	r3, r2
 8002808:	d108      	bne.n	800281c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e062      	b.n	80028d4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280e:	4b34      	ldr	r3, [pc, #208]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2202      	movs	r2, #2
 8002814:	4013      	ands	r3, r2
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e05b      	b.n	80028d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800281c:	4b30      	ldr	r3, [pc, #192]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2203      	movs	r2, #3
 8002822:	4393      	bics	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4b2d      	ldr	r3, [pc, #180]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 800282c:	430a      	orrs	r2, r1
 800282e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002830:	f7ff f942 	bl	8001ab8 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002838:	e009      	b.n	800284e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283a:	f7ff f93d 	bl	8001ab8 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	4a27      	ldr	r2, [pc, #156]	@ (80028e4 <HAL_RCC_ClockConfig+0x1a4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e042      	b.n	80028d4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	220c      	movs	r2, #12
 8002854:	401a      	ands	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	429a      	cmp	r2, r3
 800285e:	d1ec      	bne.n	800283a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002860:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <HAL_RCC_ClockConfig+0x19c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2201      	movs	r2, #1
 8002866:	4013      	ands	r3, r2
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d211      	bcs.n	8002892 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_RCC_ClockConfig+0x19c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2201      	movs	r2, #1
 8002874:	4393      	bics	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <HAL_RCC_ClockConfig+0x19c>)
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002880:	4b16      	ldr	r3, [pc, #88]	@ (80028dc <HAL_RCC_ClockConfig+0x19c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2201      	movs	r2, #1
 8002886:	4013      	ands	r3, r2
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d001      	beq.n	8002892 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e020      	b.n	80028d4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2204      	movs	r2, #4
 8002898:	4013      	ands	r3, r2
 800289a:	d009      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a11      	ldr	r2, [pc, #68]	@ (80028e8 <HAL_RCC_ClockConfig+0x1a8>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	0019      	movs	r1, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028b0:	f000 f820 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b4:	0001      	movs	r1, r0
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a0>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	220f      	movs	r2, #15
 80028be:	4013      	ands	r3, r2
 80028c0:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <HAL_RCC_ClockConfig+0x1ac>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	000a      	movs	r2, r1
 80028c6:	40da      	lsrs	r2, r3
 80028c8:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <HAL_RCC_ClockConfig+0x1b0>)
 80028ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7ff f8ad 	bl	8001a2c <HAL_InitTick>
  
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b004      	add	sp, #16
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40022000 	.word	0x40022000
 80028e0:	40021000 	.word	0x40021000
 80028e4:	00001388 	.word	0x00001388
 80028e8:	fffff8ff 	.word	0xfffff8ff
 80028ec:	08004548 	.word	0x08004548
 80028f0:	20000000 	.word	0x20000000

080028f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800290e:	4b2d      	ldr	r3, [pc, #180]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	220c      	movs	r2, #12
 8002918:	4013      	ands	r3, r2
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d046      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0xb8>
 800291e:	d848      	bhi.n	80029b2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002920:	2b04      	cmp	r3, #4
 8002922:	d002      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x36>
 8002924:	2b08      	cmp	r3, #8
 8002926:	d003      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x3c>
 8002928:	e043      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800292a:	4b27      	ldr	r3, [pc, #156]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800292c:	613b      	str	r3, [r7, #16]
      break;
 800292e:	e043      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	0c9b      	lsrs	r3, r3, #18
 8002934:	220f      	movs	r2, #15
 8002936:	4013      	ands	r3, r2
 8002938:	4a24      	ldr	r2, [pc, #144]	@ (80029cc <HAL_RCC_GetSysClockFreq+0xd8>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800293e:	4b21      	ldr	r3, [pc, #132]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	220f      	movs	r2, #15
 8002944:	4013      	ands	r3, r2
 8002946:	4a22      	ldr	r2, [pc, #136]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	23c0      	movs	r3, #192	@ 0xc0
 8002950:	025b      	lsls	r3, r3, #9
 8002952:	401a      	ands	r2, r3
 8002954:	2380      	movs	r3, #128	@ 0x80
 8002956:	025b      	lsls	r3, r3, #9
 8002958:	429a      	cmp	r2, r3
 800295a:	d109      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	481a      	ldr	r0, [pc, #104]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002960:	f7fd fbd2 	bl	8000108 <__udivsi3>
 8002964:	0003      	movs	r3, r0
 8002966:	001a      	movs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4353      	muls	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	e01a      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	23c0      	movs	r3, #192	@ 0xc0
 8002974:	025b      	lsls	r3, r3, #9
 8002976:	401a      	ands	r2, r3
 8002978:	23c0      	movs	r3, #192	@ 0xc0
 800297a:	025b      	lsls	r3, r3, #9
 800297c:	429a      	cmp	r2, r3
 800297e:	d109      	bne.n	8002994 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	4814      	ldr	r0, [pc, #80]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002984:	f7fd fbc0 	bl	8000108 <__udivsi3>
 8002988:	0003      	movs	r3, r0
 800298a:	001a      	movs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4353      	muls	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e008      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	480c      	ldr	r0, [pc, #48]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002998:	f7fd fbb6 	bl	8000108 <__udivsi3>
 800299c:	0003      	movs	r3, r0
 800299e:	001a      	movs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4353      	muls	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	613b      	str	r3, [r7, #16]
      break;
 80029aa:	e005      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80029ac:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80029ae:	613b      	str	r3, [r7, #16]
      break;
 80029b0:	e002      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029b2:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029b4:	613b      	str	r3, [r7, #16]
      break;
 80029b6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029b8:	693b      	ldr	r3, [r7, #16]
}
 80029ba:	0018      	movs	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	b006      	add	sp, #24
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	40021000 	.word	0x40021000
 80029c8:	007a1200 	.word	0x007a1200
 80029cc:	08004560 	.word	0x08004560
 80029d0:	08004570 	.word	0x08004570
 80029d4:	02dc6c00 	.word	0x02dc6c00

080029d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029dc:	4b02      	ldr	r3, [pc, #8]	@ (80029e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	20000000 	.word	0x20000000

080029ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80029f0:	f7ff fff2 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 80029f4:	0001      	movs	r1, r0
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	2207      	movs	r2, #7
 80029fe:	4013      	ands	r3, r2
 8002a00:	4a04      	ldr	r2, [pc, #16]	@ (8002a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	40d9      	lsrs	r1, r3
 8002a06:	000b      	movs	r3, r1
}    
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	40021000 	.word	0x40021000
 8002a14:	08004558 	.word	0x08004558

08002a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	025b      	lsls	r3, r3, #9
 8002a30:	4013      	ands	r3, r2
 8002a32:	d100      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a34:	e08e      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	2017      	movs	r0, #23
 8002a38:	183b      	adds	r3, r7, r0
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3e:	4b6e      	ldr	r3, [pc, #440]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	2380      	movs	r3, #128	@ 0x80
 8002a44:	055b      	lsls	r3, r3, #21
 8002a46:	4013      	ands	r3, r2
 8002a48:	d110      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a50:	2180      	movs	r1, #128	@ 0x80
 8002a52:	0549      	lsls	r1, r1, #21
 8002a54:	430a      	orrs	r2, r1
 8002a56:	61da      	str	r2, [r3, #28]
 8002a58:	4b67      	ldr	r3, [pc, #412]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	055b      	lsls	r3, r3, #21
 8002a60:	4013      	ands	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a66:	183b      	adds	r3, r7, r0
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b63      	ldr	r3, [pc, #396]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	@ 0x80
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	d11a      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a78:	4b60      	ldr	r3, [pc, #384]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a7e:	2180      	movs	r1, #128	@ 0x80
 8002a80:	0049      	lsls	r1, r1, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7ff f817 	bl	8001ab8 <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7ff f812 	bl	8001ab8 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0a6      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b56      	ldr	r3, [pc, #344]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	@ 0x80
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aae:	4b52      	ldr	r3, [pc, #328]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ab0:	6a1a      	ldr	r2, [r3, #32]
 8002ab2:	23c0      	movs	r3, #192	@ 0xc0
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d034      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	23c0      	movs	r3, #192	@ 0xc0
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d02c      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ad0:	4b49      	ldr	r3, [pc, #292]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ada:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002adc:	6a1a      	ldr	r2, [r3, #32]
 8002ade:	4b46      	ldr	r3, [pc, #280]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ae0:	2180      	movs	r1, #128	@ 0x80
 8002ae2:	0249      	lsls	r1, r1, #9
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae8:	4b43      	ldr	r3, [pc, #268]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aea:	6a1a      	ldr	r2, [r3, #32]
 8002aec:	4b42      	ldr	r3, [pc, #264]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aee:	4945      	ldr	r1, [pc, #276]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002af4:	4b40      	ldr	r3, [pc, #256]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe ffd9 	bl	8001ab8 <HAL_GetTick>
 8002b06:	0003      	movs	r3, r0
 8002b08:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	e009      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fe ffd4 	bl	8001ab8 <HAL_GetTick>
 8002b10:	0002      	movs	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	4a3c      	ldr	r2, [pc, #240]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e067      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	4b35      	ldr	r3, [pc, #212]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	2202      	movs	r2, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b2a:	4b33      	ldr	r3, [pc, #204]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a34      	ldr	r2, [pc, #208]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	0019      	movs	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b3e:	2317      	movs	r3, #23
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b4e:	492f      	ldr	r1, [pc, #188]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b5e:	4b26      	ldr	r3, [pc, #152]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	2203      	movs	r2, #3
 8002b64:	4393      	bics	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	4b22      	ldr	r3, [pc, #136]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d009      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	4a23      	ldr	r2, [pc, #140]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2220      	movs	r2, #32
 8002b96:	4013      	ands	r3, r2
 8002b98:	d009      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b9a:	4b17      	ldr	r3, [pc, #92]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	4393      	bics	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002baa:	430a      	orrs	r2, r1
 8002bac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	2380      	movs	r3, #128	@ 0x80
 8002bb4:	029b      	lsls	r3, r3, #10
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d009      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bba:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	2280      	movs	r2, #128	@ 0x80
 8002bc0:	4393      	bics	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d009      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bda:	4b07      	ldr	r3, [pc, #28]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	2240      	movs	r2, #64	@ 0x40
 8002be0:	4393      	bics	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	4b03      	ldr	r3, [pc, #12]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bea:	430a      	orrs	r2, r1
 8002bec:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b006      	add	sp, #24
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	fffffcff 	.word	0xfffffcff
 8002c04:	fffeffff 	.word	0xfffeffff
 8002c08:	00001388 	.word	0x00001388
 8002c0c:	efffffff 	.word	0xefffffff
 8002c10:	fffcffff 	.word	0xfffcffff

08002c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e042      	b.n	8002cac <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	223d      	movs	r2, #61	@ 0x3d
 8002c2a:	5c9b      	ldrb	r3, [r3, r2]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d107      	bne.n	8002c42 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	223c      	movs	r2, #60	@ 0x3c
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7fe fddd 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223d      	movs	r2, #61	@ 0x3d
 8002c46:	2102      	movs	r1, #2
 8002c48:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3304      	adds	r3, #4
 8002c52:	0019      	movs	r1, r3
 8002c54:	0010      	movs	r0, r2
 8002c56:	f000 fc5d 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2246      	movs	r2, #70	@ 0x46
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	223e      	movs	r2, #62	@ 0x3e
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	223f      	movs	r2, #63	@ 0x3f
 8002c6e:	2101      	movs	r1, #1
 8002c70:	5499      	strb	r1, [r3, r2]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2240      	movs	r2, #64	@ 0x40
 8002c76:	2101      	movs	r1, #1
 8002c78:	5499      	strb	r1, [r3, r2]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2241      	movs	r2, #65	@ 0x41
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2242      	movs	r2, #66	@ 0x42
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2243      	movs	r2, #67	@ 0x43
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2244      	movs	r2, #68	@ 0x44
 8002c96:	2101      	movs	r1, #1
 8002c98:	5499      	strb	r1, [r3, r2]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2245      	movs	r2, #69	@ 0x45
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	223d      	movs	r2, #61	@ 0x3d
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	223d      	movs	r2, #61	@ 0x3d
 8002cc0:	5c9b      	ldrb	r3, [r3, r2]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d001      	beq.n	8002ccc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e033      	b.n	8002d34 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	223d      	movs	r2, #61	@ 0x3d
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	@ (8002d3c <HAL_TIM_Base_Start+0x88>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00f      	beq.n	8002cfe <HAL_TIM_Base_Start+0x4a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	2380      	movs	r3, #128	@ 0x80
 8002ce4:	05db      	lsls	r3, r3, #23
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d009      	beq.n	8002cfe <HAL_TIM_Base_Start+0x4a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a14      	ldr	r2, [pc, #80]	@ (8002d40 <HAL_TIM_Base_Start+0x8c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d004      	beq.n	8002cfe <HAL_TIM_Base_Start+0x4a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a12      	ldr	r2, [pc, #72]	@ (8002d44 <HAL_TIM_Base_Start+0x90>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d111      	bne.n	8002d22 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2207      	movs	r2, #7
 8002d06:	4013      	ands	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b06      	cmp	r3, #6
 8002d0e:	d010      	beq.n	8002d32 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d20:	e007      	b.n	8002d32 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b004      	add	sp, #16
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40000400 	.word	0x40000400
 8002d44:	40014000 	.word	0x40014000

08002d48 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a0d      	ldr	r2, [pc, #52]	@ (8002d8c <HAL_TIM_Base_Stop+0x44>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d10d      	bne.n	8002d78 <HAL_TIM_Base_Stop+0x30>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a0b      	ldr	r2, [pc, #44]	@ (8002d90 <HAL_TIM_Base_Stop+0x48>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	d107      	bne.n	8002d78 <HAL_TIM_Base_Stop+0x30>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2101      	movs	r1, #1
 8002d74:	438a      	bics	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	223d      	movs	r2, #61	@ 0x3d
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b002      	add	sp, #8
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	00001111 	.word	0x00001111
 8002d90:	00000444 	.word	0x00000444

08002d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e042      	b.n	8002e2c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	223d      	movs	r2, #61	@ 0x3d
 8002daa:	5c9b      	ldrb	r3, [r3, r2]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d107      	bne.n	8002dc2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	223c      	movs	r2, #60	@ 0x3c
 8002db6:	2100      	movs	r1, #0
 8002db8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f000 f839 	bl	8002e34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	223d      	movs	r2, #61	@ 0x3d
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	0010      	movs	r0, r2
 8002dd6:	f000 fb9d 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2246      	movs	r2, #70	@ 0x46
 8002dde:	2101      	movs	r1, #1
 8002de0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	223e      	movs	r2, #62	@ 0x3e
 8002de6:	2101      	movs	r1, #1
 8002de8:	5499      	strb	r1, [r3, r2]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	223f      	movs	r2, #63	@ 0x3f
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2240      	movs	r2, #64	@ 0x40
 8002df6:	2101      	movs	r1, #1
 8002df8:	5499      	strb	r1, [r3, r2]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2241      	movs	r2, #65	@ 0x41
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2242      	movs	r2, #66	@ 0x42
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2243      	movs	r2, #67	@ 0x43
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2244      	movs	r2, #68	@ 0x44
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2245      	movs	r2, #69	@ 0x45
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	223d      	movs	r2, #61	@ 0x3d
 8002e26:	2101      	movs	r1, #1
 8002e28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d108      	bne.n	8002e66 <HAL_TIM_PWM_Start+0x22>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	223e      	movs	r2, #62	@ 0x3e
 8002e58:	5c9b      	ldrb	r3, [r3, r2]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	1e5a      	subs	r2, r3, #1
 8002e60:	4193      	sbcs	r3, r2
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	e01f      	b.n	8002ea6 <HAL_TIM_PWM_Start+0x62>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d108      	bne.n	8002e7e <HAL_TIM_PWM_Start+0x3a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	223f      	movs	r2, #63	@ 0x3f
 8002e70:	5c9b      	ldrb	r3, [r3, r2]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	1e5a      	subs	r2, r3, #1
 8002e78:	4193      	sbcs	r3, r2
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	e013      	b.n	8002ea6 <HAL_TIM_PWM_Start+0x62>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d108      	bne.n	8002e96 <HAL_TIM_PWM_Start+0x52>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2240      	movs	r2, #64	@ 0x40
 8002e88:	5c9b      	ldrb	r3, [r3, r2]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	1e5a      	subs	r2, r3, #1
 8002e90:	4193      	sbcs	r3, r2
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	e007      	b.n	8002ea6 <HAL_TIM_PWM_Start+0x62>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2241      	movs	r2, #65	@ 0x41
 8002e9a:	5c9b      	ldrb	r3, [r3, r2]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	1e5a      	subs	r2, r3, #1
 8002ea2:	4193      	sbcs	r3, r2
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e074      	b.n	8002f98 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d104      	bne.n	8002ebe <HAL_TIM_PWM_Start+0x7a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	223e      	movs	r2, #62	@ 0x3e
 8002eb8:	2102      	movs	r1, #2
 8002eba:	5499      	strb	r1, [r3, r2]
 8002ebc:	e013      	b.n	8002ee6 <HAL_TIM_PWM_Start+0xa2>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d104      	bne.n	8002ece <HAL_TIM_PWM_Start+0x8a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	223f      	movs	r2, #63	@ 0x3f
 8002ec8:	2102      	movs	r1, #2
 8002eca:	5499      	strb	r1, [r3, r2]
 8002ecc:	e00b      	b.n	8002ee6 <HAL_TIM_PWM_Start+0xa2>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d104      	bne.n	8002ede <HAL_TIM_PWM_Start+0x9a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2240      	movs	r2, #64	@ 0x40
 8002ed8:	2102      	movs	r1, #2
 8002eda:	5499      	strb	r1, [r3, r2]
 8002edc:	e003      	b.n	8002ee6 <HAL_TIM_PWM_Start+0xa2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2241      	movs	r2, #65	@ 0x41
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6839      	ldr	r1, [r7, #0]
 8002eec:	2201      	movs	r2, #1
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fe34 	bl	8003b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a29      	ldr	r2, [pc, #164]	@ (8002fa0 <HAL_TIM_PWM_Start+0x15c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00e      	beq.n	8002f1c <HAL_TIM_PWM_Start+0xd8>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a28      	ldr	r2, [pc, #160]	@ (8002fa4 <HAL_TIM_PWM_Start+0x160>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_TIM_PWM_Start+0xd8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a26      	ldr	r2, [pc, #152]	@ (8002fa8 <HAL_TIM_PWM_Start+0x164>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_TIM_PWM_Start+0xd8>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a25      	ldr	r2, [pc, #148]	@ (8002fac <HAL_TIM_PWM_Start+0x168>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_TIM_PWM_Start+0xdc>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_TIM_PWM_Start+0xde>
 8002f20:	2300      	movs	r3, #0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2180      	movs	r1, #128	@ 0x80
 8002f32:	0209      	lsls	r1, r1, #8
 8002f34:	430a      	orrs	r2, r1
 8002f36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a18      	ldr	r2, [pc, #96]	@ (8002fa0 <HAL_TIM_PWM_Start+0x15c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00f      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x11e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	2380      	movs	r3, #128	@ 0x80
 8002f48:	05db      	lsls	r3, r3, #23
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d009      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x11e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a17      	ldr	r2, [pc, #92]	@ (8002fb0 <HAL_TIM_PWM_Start+0x16c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x11e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a11      	ldr	r2, [pc, #68]	@ (8002fa4 <HAL_TIM_PWM_Start+0x160>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d111      	bne.n	8002f86 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2207      	movs	r2, #7
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b06      	cmp	r3, #6
 8002f72:	d010      	beq.n	8002f96 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2101      	movs	r1, #1
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	e007      	b.n	8002f96 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b004      	add	sp, #16
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40014000 	.word	0x40014000
 8002fa8:	40014400 	.word	0x40014400
 8002fac:	40014800 	.word	0x40014800
 8002fb0:	40000400 	.word	0x40000400

08002fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d021      	beq.n	8003018 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d01d      	beq.n	8003018 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	4252      	negs	r2, r2
 8002fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 fa72 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 8003000:	e007      	b.n	8003012 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0018      	movs	r0, r3
 8003006:	f000 fa65 	bl	80034d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f000 fa71 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2204      	movs	r2, #4
 800301c:	4013      	ands	r3, r2
 800301e:	d022      	beq.n	8003066 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2204      	movs	r2, #4
 8003024:	4013      	ands	r3, r2
 8003026:	d01e      	beq.n	8003066 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2205      	movs	r2, #5
 800302e:	4252      	negs	r2, r2
 8003030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2202      	movs	r2, #2
 8003036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	23c0      	movs	r3, #192	@ 0xc0
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4013      	ands	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	0018      	movs	r0, r3
 800304a:	f000 fa4b 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 800304e:	e007      	b.n	8003060 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	0018      	movs	r0, r3
 8003054:	f000 fa3e 	bl	80034d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	0018      	movs	r0, r3
 800305c:	f000 fa4a 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2208      	movs	r2, #8
 800306a:	4013      	ands	r3, r2
 800306c:	d021      	beq.n	80030b2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2208      	movs	r2, #8
 8003072:	4013      	ands	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2209      	movs	r2, #9
 800307c:	4252      	negs	r2, r2
 800307e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2204      	movs	r2, #4
 8003084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	2203      	movs	r2, #3
 800308e:	4013      	ands	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f000 fa25 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 800309a:	e007      	b.n	80030ac <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fa18 	bl	80034d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	0018      	movs	r0, r3
 80030a8:	f000 fa24 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2210      	movs	r2, #16
 80030b6:	4013      	ands	r3, r2
 80030b8:	d022      	beq.n	8003100 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2210      	movs	r2, #16
 80030be:	4013      	ands	r3, r2
 80030c0:	d01e      	beq.n	8003100 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2211      	movs	r2, #17
 80030c8:	4252      	negs	r2, r2
 80030ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2208      	movs	r2, #8
 80030d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	23c0      	movs	r3, #192	@ 0xc0
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4013      	ands	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 f9fe 	bl	80034e4 <HAL_TIM_IC_CaptureCallback>
 80030e8:	e007      	b.n	80030fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f000 f9f1 	bl	80034d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f000 f9fd 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2201      	movs	r2, #1
 8003104:	4013      	ands	r3, r2
 8003106:	d00c      	beq.n	8003122 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	4013      	ands	r3, r2
 800310e:	d008      	beq.n	8003122 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2202      	movs	r2, #2
 8003116:	4252      	negs	r2, r2
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	0018      	movs	r0, r3
 800311e:	f000 f9d1 	bl	80034c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2280      	movs	r2, #128	@ 0x80
 8003126:	4013      	ands	r3, r2
 8003128:	d00c      	beq.n	8003144 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2280      	movs	r2, #128	@ 0x80
 800312e:	4013      	ands	r3, r2
 8003130:	d008      	beq.n	8003144 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2281      	movs	r2, #129	@ 0x81
 8003138:	4252      	negs	r2, r2
 800313a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	0018      	movs	r0, r3
 8003140:	f000 fd96 	bl	8003c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2240      	movs	r2, #64	@ 0x40
 8003148:	4013      	ands	r3, r2
 800314a:	d00c      	beq.n	8003166 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	4013      	ands	r3, r2
 8003152:	d008      	beq.n	8003166 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2241      	movs	r2, #65	@ 0x41
 800315a:	4252      	negs	r2, r2
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	0018      	movs	r0, r3
 8003162:	f000 f9cf 	bl	8003504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2220      	movs	r2, #32
 800316a:	4013      	ands	r3, r2
 800316c:	d00c      	beq.n	8003188 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	4013      	ands	r3, r2
 8003174:	d008      	beq.n	8003188 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2221      	movs	r2, #33	@ 0x21
 800317c:	4252      	negs	r2, r2
 800317e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f000 fd6c 	bl	8003c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003188:	46c0      	nop			@ (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b004      	add	sp, #16
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800319c:	2317      	movs	r3, #23
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	223c      	movs	r2, #60	@ 0x3c
 80031a8:	5c9b      	ldrb	r3, [r3, r2]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e0ad      	b.n	800330e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	223c      	movs	r2, #60	@ 0x3c
 80031b6:	2101      	movs	r1, #1
 80031b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d100      	bne.n	80031c2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80031c0:	e076      	b.n	80032b0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d900      	bls.n	80031ca <HAL_TIM_PWM_ConfigChannel+0x3a>
 80031c8:	e095      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d04e      	beq.n	800326e <HAL_TIM_PWM_ConfigChannel+0xde>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d900      	bls.n	80031d8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80031d6:	e08e      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d021      	beq.n	8003228 <HAL_TIM_PWM_ConfigChannel+0x98>
 80031e4:	e087      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	0011      	movs	r1, r2
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 fa1e 	bl	8003630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2108      	movs	r1, #8
 8003200:	430a      	orrs	r2, r1
 8003202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2104      	movs	r1, #4
 8003210:	438a      	bics	r2, r1
 8003212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6999      	ldr	r1, [r3, #24]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	691a      	ldr	r2, [r3, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	619a      	str	r2, [r3, #24]
      break;
 8003226:	e06b      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f000 fa85 	bl	8003740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2180      	movs	r1, #128	@ 0x80
 8003242:	0109      	lsls	r1, r1, #4
 8003244:	430a      	orrs	r2, r1
 8003246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4931      	ldr	r1, [pc, #196]	@ (8003318 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003254:	400a      	ands	r2, r1
 8003256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6999      	ldr	r1, [r3, #24]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	021a      	lsls	r2, r3, #8
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	619a      	str	r2, [r3, #24]
      break;
 800326c:	e048      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	0011      	movs	r1, r2
 8003276:	0018      	movs	r0, r3
 8003278:	f000 fae6 	bl	8003848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2108      	movs	r1, #8
 8003288:	430a      	orrs	r2, r1
 800328a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2104      	movs	r1, #4
 8003298:	438a      	bics	r2, r1
 800329a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69d9      	ldr	r1, [r3, #28]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	61da      	str	r2, [r3, #28]
      break;
 80032ae:	e027      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	0011      	movs	r1, r2
 80032b8:	0018      	movs	r0, r3
 80032ba:	f000 fb4b 	bl	8003954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2180      	movs	r1, #128	@ 0x80
 80032ca:	0109      	lsls	r1, r1, #4
 80032cc:	430a      	orrs	r2, r1
 80032ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	490f      	ldr	r1, [pc, #60]	@ (8003318 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80032dc:	400a      	ands	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69d9      	ldr	r1, [r3, #28]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	021a      	lsls	r2, r3, #8
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	61da      	str	r2, [r3, #28]
      break;
 80032f4:	e004      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80032f6:	2317      	movs	r3, #23
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
      break;
 80032fe:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	223c      	movs	r2, #60	@ 0x3c
 8003304:	2100      	movs	r1, #0
 8003306:	5499      	strb	r1, [r3, r2]

  return status;
 8003308:	2317      	movs	r3, #23
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	781b      	ldrb	r3, [r3, #0]
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b006      	add	sp, #24
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	fffffbff 	.word	0xfffffbff

0800331c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	230f      	movs	r3, #15
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	223c      	movs	r2, #60	@ 0x3c
 8003332:	5c9b      	ldrb	r3, [r3, r2]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_TIM_ConfigClockSource+0x20>
 8003338:	2302      	movs	r3, #2
 800333a:	e0bc      	b.n	80034b6 <HAL_TIM_ConfigClockSource+0x19a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	223c      	movs	r2, #60	@ 0x3c
 8003340:	2101      	movs	r1, #1
 8003342:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	223d      	movs	r2, #61	@ 0x3d
 8003348:	2102      	movs	r1, #2
 800334a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2277      	movs	r2, #119	@ 0x77
 8003358:	4393      	bics	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4a58      	ldr	r2, [pc, #352]	@ (80034c0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2280      	movs	r2, #128	@ 0x80
 8003372:	0192      	lsls	r2, r2, #6
 8003374:	4293      	cmp	r3, r2
 8003376:	d040      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0xde>
 8003378:	2280      	movs	r2, #128	@ 0x80
 800337a:	0192      	lsls	r2, r2, #6
 800337c:	4293      	cmp	r3, r2
 800337e:	d900      	bls.n	8003382 <HAL_TIM_ConfigClockSource+0x66>
 8003380:	e088      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
 8003382:	2280      	movs	r2, #128	@ 0x80
 8003384:	0152      	lsls	r2, r2, #5
 8003386:	4293      	cmp	r3, r2
 8003388:	d100      	bne.n	800338c <HAL_TIM_ConfigClockSource+0x70>
 800338a:	e088      	b.n	800349e <HAL_TIM_ConfigClockSource+0x182>
 800338c:	2280      	movs	r2, #128	@ 0x80
 800338e:	0152      	lsls	r2, r2, #5
 8003390:	4293      	cmp	r3, r2
 8003392:	d900      	bls.n	8003396 <HAL_TIM_ConfigClockSource+0x7a>
 8003394:	e07e      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
 8003396:	2b70      	cmp	r3, #112	@ 0x70
 8003398:	d018      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0xb0>
 800339a:	d900      	bls.n	800339e <HAL_TIM_ConfigClockSource+0x82>
 800339c:	e07a      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
 800339e:	2b60      	cmp	r3, #96	@ 0x60
 80033a0:	d04f      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x126>
 80033a2:	d900      	bls.n	80033a6 <HAL_TIM_ConfigClockSource+0x8a>
 80033a4:	e076      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
 80033a6:	2b50      	cmp	r3, #80	@ 0x50
 80033a8:	d03b      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x106>
 80033aa:	d900      	bls.n	80033ae <HAL_TIM_ConfigClockSource+0x92>
 80033ac:	e072      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
 80033ae:	2b40      	cmp	r3, #64	@ 0x40
 80033b0:	d057      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x146>
 80033b2:	d900      	bls.n	80033b6 <HAL_TIM_ConfigClockSource+0x9a>
 80033b4:	e06e      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
 80033b6:	2b30      	cmp	r3, #48	@ 0x30
 80033b8:	d063      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x166>
 80033ba:	d86b      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d060      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x166>
 80033c0:	d868      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d05d      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x166>
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d05b      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x166>
 80033ca:	e063      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033dc:	f000 fb9e 	bl	8003b1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2277      	movs	r2, #119	@ 0x77
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]
      break;
 80033f8:	e052      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800340a:	f000 fb87 	bl	8003b1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2180      	movs	r1, #128	@ 0x80
 800341a:	01c9      	lsls	r1, r1, #7
 800341c:	430a      	orrs	r2, r1
 800341e:	609a      	str	r2, [r3, #8]
      break;
 8003420:	e03e      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800342e:	001a      	movs	r2, r3
 8003430:	f000 fafa 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2150      	movs	r1, #80	@ 0x50
 800343a:	0018      	movs	r0, r3
 800343c:	f000 fb54 	bl	8003ae8 <TIM_ITRx_SetConfig>
      break;
 8003440:	e02e      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800344e:	001a      	movs	r2, r3
 8003450:	f000 fb18 	bl	8003a84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2160      	movs	r1, #96	@ 0x60
 800345a:	0018      	movs	r0, r3
 800345c:	f000 fb44 	bl	8003ae8 <TIM_ITRx_SetConfig>
      break;
 8003460:	e01e      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800346e:	001a      	movs	r2, r3
 8003470:	f000 fada 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2140      	movs	r1, #64	@ 0x40
 800347a:	0018      	movs	r0, r3
 800347c:	f000 fb34 	bl	8003ae8 <TIM_ITRx_SetConfig>
      break;
 8003480:	e00e      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	0019      	movs	r1, r3
 800348c:	0010      	movs	r0, r2
 800348e:	f000 fb2b 	bl	8003ae8 <TIM_ITRx_SetConfig>
      break;
 8003492:	e005      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003494:	230f      	movs	r3, #15
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
      break;
 800349c:	e000      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800349e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	223d      	movs	r2, #61	@ 0x3d
 80034a4:	2101      	movs	r1, #1
 80034a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	223c      	movs	r2, #60	@ 0x3c
 80034ac:	2100      	movs	r1, #0
 80034ae:	5499      	strb	r1, [r3, r2]

  return status;
 80034b0:	230f      	movs	r3, #15
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	781b      	ldrb	r3, [r3, #0]
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b004      	add	sp, #16
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	ffff00ff 	.word	0xffff00ff

080034c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034cc:	46c0      	nop			@ (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034dc:	46c0      	nop			@ (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b002      	add	sp, #8
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034fc:	46c0      	nop			@ (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	b002      	add	sp, #8
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800350c:	46c0      	nop			@ (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	b002      	add	sp, #8
 8003512:	bd80      	pop	{r7, pc}

08003514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3b      	ldr	r2, [pc, #236]	@ (8003614 <TIM_Base_SetConfig+0x100>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d008      	beq.n	800353e <TIM_Base_SetConfig+0x2a>
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	2380      	movs	r3, #128	@ 0x80
 8003530:	05db      	lsls	r3, r3, #23
 8003532:	429a      	cmp	r2, r3
 8003534:	d003      	beq.n	800353e <TIM_Base_SetConfig+0x2a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a37      	ldr	r2, [pc, #220]	@ (8003618 <TIM_Base_SetConfig+0x104>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d108      	bne.n	8003550 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2270      	movs	r2, #112	@ 0x70
 8003542:	4393      	bics	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a30      	ldr	r2, [pc, #192]	@ (8003614 <TIM_Base_SetConfig+0x100>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <TIM_Base_SetConfig+0x76>
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	2380      	movs	r3, #128	@ 0x80
 800355c:	05db      	lsls	r3, r3, #23
 800355e:	429a      	cmp	r2, r3
 8003560:	d013      	beq.n	800358a <TIM_Base_SetConfig+0x76>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2c      	ldr	r2, [pc, #176]	@ (8003618 <TIM_Base_SetConfig+0x104>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00f      	beq.n	800358a <TIM_Base_SetConfig+0x76>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2b      	ldr	r2, [pc, #172]	@ (800361c <TIM_Base_SetConfig+0x108>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00b      	beq.n	800358a <TIM_Base_SetConfig+0x76>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a2a      	ldr	r2, [pc, #168]	@ (8003620 <TIM_Base_SetConfig+0x10c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <TIM_Base_SetConfig+0x76>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a29      	ldr	r2, [pc, #164]	@ (8003624 <TIM_Base_SetConfig+0x110>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d003      	beq.n	800358a <TIM_Base_SetConfig+0x76>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a28      	ldr	r2, [pc, #160]	@ (8003628 <TIM_Base_SetConfig+0x114>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d108      	bne.n	800359c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a27      	ldr	r2, [pc, #156]	@ (800362c <TIM_Base_SetConfig+0x118>)
 800358e:	4013      	ands	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2280      	movs	r2, #128	@ 0x80
 80035a0:	4393      	bics	r3, r2
 80035a2:	001a      	movs	r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a13      	ldr	r2, [pc, #76]	@ (8003614 <TIM_Base_SetConfig+0x100>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00b      	beq.n	80035e2 <TIM_Base_SetConfig+0xce>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a14      	ldr	r2, [pc, #80]	@ (8003620 <TIM_Base_SetConfig+0x10c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d007      	beq.n	80035e2 <TIM_Base_SetConfig+0xce>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a13      	ldr	r2, [pc, #76]	@ (8003624 <TIM_Base_SetConfig+0x110>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_Base_SetConfig+0xce>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a12      	ldr	r2, [pc, #72]	@ (8003628 <TIM_Base_SetConfig+0x114>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d103      	bne.n	80035ea <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d106      	bne.n	800360a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2201      	movs	r2, #1
 8003602:	4393      	bics	r3, r2
 8003604:	001a      	movs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	611a      	str	r2, [r3, #16]
  }
}
 800360a:	46c0      	nop			@ (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	b004      	add	sp, #16
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40002000 	.word	0x40002000
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800
 800362c:	fffffcff 	.word	0xfffffcff

08003630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	2201      	movs	r2, #1
 8003646:	4393      	bics	r3, r2
 8003648:	001a      	movs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2270      	movs	r2, #112	@ 0x70
 800365e:	4393      	bics	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2203      	movs	r2, #3
 8003666:	4393      	bics	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2202      	movs	r2, #2
 8003678:	4393      	bics	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a27      	ldr	r2, [pc, #156]	@ (8003728 <TIM_OC1_SetConfig+0xf8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_OC1_SetConfig+0x76>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a26      	ldr	r2, [pc, #152]	@ (800372c <TIM_OC1_SetConfig+0xfc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <TIM_OC1_SetConfig+0x76>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a25      	ldr	r2, [pc, #148]	@ (8003730 <TIM_OC1_SetConfig+0x100>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_OC1_SetConfig+0x76>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a24      	ldr	r2, [pc, #144]	@ (8003734 <TIM_OC1_SetConfig+0x104>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10c      	bne.n	80036c0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2208      	movs	r2, #8
 80036aa:	4393      	bics	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2204      	movs	r2, #4
 80036bc:	4393      	bics	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a19      	ldr	r2, [pc, #100]	@ (8003728 <TIM_OC1_SetConfig+0xf8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <TIM_OC1_SetConfig+0xb0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a18      	ldr	r2, [pc, #96]	@ (800372c <TIM_OC1_SetConfig+0xfc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d007      	beq.n	80036e0 <TIM_OC1_SetConfig+0xb0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a17      	ldr	r2, [pc, #92]	@ (8003730 <TIM_OC1_SetConfig+0x100>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_OC1_SetConfig+0xb0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a16      	ldr	r2, [pc, #88]	@ (8003734 <TIM_OC1_SetConfig+0x104>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d111      	bne.n	8003704 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4a15      	ldr	r2, [pc, #84]	@ (8003738 <TIM_OC1_SetConfig+0x108>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4a14      	ldr	r2, [pc, #80]	@ (800373c <TIM_OC1_SetConfig+0x10c>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b006      	add	sp, #24
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	40012c00 	.word	0x40012c00
 800372c:	40014000 	.word	0x40014000
 8003730:	40014400 	.word	0x40014400
 8003734:	40014800 	.word	0x40014800
 8003738:	fffffeff 	.word	0xfffffeff
 800373c:	fffffdff 	.word	0xfffffdff

08003740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	2210      	movs	r2, #16
 8003756:	4393      	bics	r3, r2
 8003758:	001a      	movs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a2e      	ldr	r2, [pc, #184]	@ (8003828 <TIM_OC2_SetConfig+0xe8>)
 800376e:	4013      	ands	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a2d      	ldr	r2, [pc, #180]	@ (800382c <TIM_OC2_SetConfig+0xec>)
 8003776:	4013      	ands	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2220      	movs	r2, #32
 800378a:	4393      	bics	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a24      	ldr	r2, [pc, #144]	@ (8003830 <TIM_OC2_SetConfig+0xf0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10d      	bne.n	80037be <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2280      	movs	r2, #128	@ 0x80
 80037a6:	4393      	bics	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2240      	movs	r2, #64	@ 0x40
 80037ba:	4393      	bics	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003830 <TIM_OC2_SetConfig+0xf0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00b      	beq.n	80037de <TIM_OC2_SetConfig+0x9e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003834 <TIM_OC2_SetConfig+0xf4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <TIM_OC2_SetConfig+0x9e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <TIM_OC2_SetConfig+0xf8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d003      	beq.n	80037de <TIM_OC2_SetConfig+0x9e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a18      	ldr	r2, [pc, #96]	@ (800383c <TIM_OC2_SetConfig+0xfc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d113      	bne.n	8003806 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4a17      	ldr	r2, [pc, #92]	@ (8003840 <TIM_OC2_SetConfig+0x100>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4a16      	ldr	r2, [pc, #88]	@ (8003844 <TIM_OC2_SetConfig+0x104>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	621a      	str	r2, [r3, #32]
}
 8003820:	46c0      	nop			@ (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b006      	add	sp, #24
 8003826:	bd80      	pop	{r7, pc}
 8003828:	ffff8fff 	.word	0xffff8fff
 800382c:	fffffcff 	.word	0xfffffcff
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40014000 	.word	0x40014000
 8003838:	40014400 	.word	0x40014400
 800383c:	40014800 	.word	0x40014800
 8003840:	fffffbff 	.word	0xfffffbff
 8003844:	fffff7ff 	.word	0xfffff7ff

08003848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	4a33      	ldr	r2, [pc, #204]	@ (800392c <TIM_OC3_SetConfig+0xe4>)
 800385e:	401a      	ands	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2270      	movs	r2, #112	@ 0x70
 8003874:	4393      	bics	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2203      	movs	r2, #3
 800387c:	4393      	bics	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	4a28      	ldr	r2, [pc, #160]	@ (8003930 <TIM_OC3_SetConfig+0xe8>)
 800388e:	4013      	ands	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a24      	ldr	r2, [pc, #144]	@ (8003934 <TIM_OC3_SetConfig+0xec>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d10d      	bne.n	80038c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	4a23      	ldr	r2, [pc, #140]	@ (8003938 <TIM_OC3_SetConfig+0xf0>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	4a1f      	ldr	r2, [pc, #124]	@ (800393c <TIM_OC3_SetConfig+0xf4>)
 80038be:	4013      	ands	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003934 <TIM_OC3_SetConfig+0xec>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_OC3_SetConfig+0x9a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003940 <TIM_OC3_SetConfig+0xf8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <TIM_OC3_SetConfig+0x9a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003944 <TIM_OC3_SetConfig+0xfc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_OC3_SetConfig+0x9a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003948 <TIM_OC3_SetConfig+0x100>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d113      	bne.n	800390a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4a19      	ldr	r2, [pc, #100]	@ (800394c <TIM_OC3_SetConfig+0x104>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4a18      	ldr	r2, [pc, #96]	@ (8003950 <TIM_OC3_SetConfig+0x108>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	621a      	str	r2, [r3, #32]
}
 8003924:	46c0      	nop			@ (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b006      	add	sp, #24
 800392a:	bd80      	pop	{r7, pc}
 800392c:	fffffeff 	.word	0xfffffeff
 8003930:	fffffdff 	.word	0xfffffdff
 8003934:	40012c00 	.word	0x40012c00
 8003938:	fffff7ff 	.word	0xfffff7ff
 800393c:	fffffbff 	.word	0xfffffbff
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800
 800394c:	ffffefff 	.word	0xffffefff
 8003950:	ffffdfff 	.word	0xffffdfff

08003954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4a26      	ldr	r2, [pc, #152]	@ (8003a04 <TIM_OC4_SetConfig+0xb0>)
 800396a:	401a      	ands	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a22      	ldr	r2, [pc, #136]	@ (8003a08 <TIM_OC4_SetConfig+0xb4>)
 8003980:	4013      	ands	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a21      	ldr	r2, [pc, #132]	@ (8003a0c <TIM_OC4_SetConfig+0xb8>)
 8003988:	4013      	ands	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a10 <TIM_OC4_SetConfig+0xbc>)
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	031b      	lsls	r3, r3, #12
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a19      	ldr	r2, [pc, #100]	@ (8003a14 <TIM_OC4_SetConfig+0xc0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00b      	beq.n	80039cc <TIM_OC4_SetConfig+0x78>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a18      	ldr	r2, [pc, #96]	@ (8003a18 <TIM_OC4_SetConfig+0xc4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_OC4_SetConfig+0x78>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a17      	ldr	r2, [pc, #92]	@ (8003a1c <TIM_OC4_SetConfig+0xc8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_OC4_SetConfig+0x78>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a16      	ldr	r2, [pc, #88]	@ (8003a20 <TIM_OC4_SetConfig+0xcc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d109      	bne.n	80039e0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4a15      	ldr	r2, [pc, #84]	@ (8003a24 <TIM_OC4_SetConfig+0xd0>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	019b      	lsls	r3, r3, #6
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b006      	add	sp, #24
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	ffffefff 	.word	0xffffefff
 8003a08:	ffff8fff 	.word	0xffff8fff
 8003a0c:	fffffcff 	.word	0xfffffcff
 8003a10:	ffffdfff 	.word	0xffffdfff
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800
 8003a24:	ffffbfff 	.word	0xffffbfff

08003a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	4393      	bics	r3, r2
 8003a42:	001a      	movs	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	22f0      	movs	r2, #240	@ 0xf0
 8003a52:	4393      	bics	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	220a      	movs	r2, #10
 8003a64:	4393      	bics	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	621a      	str	r2, [r3, #32]
}
 8003a7c:	46c0      	nop			@ (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b006      	add	sp, #24
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	4393      	bics	r3, r2
 8003a9e:	001a      	movs	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae4 <TIM_TI2_ConfigInputStage+0x60>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	031b      	lsls	r3, r3, #12
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	22a0      	movs	r2, #160	@ 0xa0
 8003ac0:	4393      	bics	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b006      	add	sp, #24
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	ffff0fff 	.word	0xffff0fff

08003ae8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2270      	movs	r2, #112	@ 0x70
 8003afc:	4393      	bics	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	2207      	movs	r2, #7
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	609a      	str	r2, [r3, #8]
}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b004      	add	sp, #16
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	4a09      	ldr	r2, [pc, #36]	@ (8003b58 <TIM_ETR_SetConfig+0x3c>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	021a      	lsls	r2, r3, #8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	46c0      	nop			@ (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b006      	add	sp, #24
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	ffff00ff 	.word	0xffff00ff

08003b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	221f      	movs	r2, #31
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2201      	movs	r2, #1
 8003b70:	409a      	lsls	r2, r3
 8003b72:	0013      	movs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	43d2      	mvns	r2, r2
 8003b7e:	401a      	ands	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	211f      	movs	r1, #31
 8003b8c:	400b      	ands	r3, r1
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4099      	lsls	r1, r3
 8003b92:	000b      	movs	r3, r1
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	46c0      	nop			@ (mov r8, r8)
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b006      	add	sp, #24
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	223c      	movs	r2, #60	@ 0x3c
 8003bb2:	5c9b      	ldrb	r3, [r3, r2]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e047      	b.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	223c      	movs	r2, #60	@ 0x3c
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	223d      	movs	r2, #61	@ 0x3d
 8003bc8:	2102      	movs	r1, #2
 8003bca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2270      	movs	r2, #112	@ 0x70
 8003be0:	4393      	bics	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a16      	ldr	r2, [pc, #88]	@ (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00f      	beq.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	@ 0x80
 8003c06:	05db      	lsls	r3, r3, #23
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d009      	beq.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a11      	ldr	r2, [pc, #68]	@ (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a10      	ldr	r2, [pc, #64]	@ (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d10c      	bne.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2280      	movs	r2, #128	@ 0x80
 8003c24:	4393      	bics	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	223d      	movs	r2, #61	@ 0x3d
 8003c3e:	2101      	movs	r1, #1
 8003c40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	223c      	movs	r2, #60	@ 0x3c
 8003c46:	2100      	movs	r1, #0
 8003c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b004      	add	sp, #16
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40014000 	.word	0x40014000

08003c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c68:	46c0      	nop			@ (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c78:	46c0      	nop			@ (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e044      	b.n	8003d1c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2278      	movs	r2, #120	@ 0x78
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7fd fe0b 	bl	80018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2224      	movs	r2, #36	@ 0x24
 8003cae:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2101      	movs	r1, #1
 8003cbc:	438a      	bics	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f000 f9b4 	bl	8004038 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f000 f828 	bl	8003d28 <UART_SetConfig>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e01c      	b.n	8003d1c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	490d      	ldr	r1, [pc, #52]	@ (8003d24 <HAL_UART_Init+0xa4>)
 8003cee:	400a      	ands	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	212a      	movs	r1, #42	@ 0x2a
 8003cfe:	438a      	bics	r2, r1
 8003d00:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f000 fa43 	bl	80041a0 <UART_CheckIdleState>
 8003d1a:	0003      	movs	r3, r0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b002      	add	sp, #8
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	ffffb7ff 	.word	0xffffb7ff

08003d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d30:	231e      	movs	r3, #30
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4aaf      	ldr	r2, [pc, #700]	@ (8004014 <UART_SetConfig+0x2ec>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4aaa      	ldr	r2, [pc, #680]	@ (8004018 <UART_SetConfig+0x2f0>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	0019      	movs	r1, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4aa1      	ldr	r2, [pc, #644]	@ (800401c <UART_SetConfig+0x2f4>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a9d      	ldr	r2, [pc, #628]	@ (8004020 <UART_SetConfig+0x2f8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d127      	bne.n	8003dfe <UART_SetConfig+0xd6>
 8003dae:	4b9d      	ldr	r3, [pc, #628]	@ (8004024 <UART_SetConfig+0x2fc>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	2203      	movs	r2, #3
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d00d      	beq.n	8003dd6 <UART_SetConfig+0xae>
 8003dba:	d81b      	bhi.n	8003df4 <UART_SetConfig+0xcc>
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d014      	beq.n	8003dea <UART_SetConfig+0xc2>
 8003dc0:	d818      	bhi.n	8003df4 <UART_SetConfig+0xcc>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <UART_SetConfig+0xa4>
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d00a      	beq.n	8003de0 <UART_SetConfig+0xb8>
 8003dca:	e013      	b.n	8003df4 <UART_SetConfig+0xcc>
 8003dcc:	231f      	movs	r3, #31
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	e065      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003dd6:	231f      	movs	r3, #31
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	2202      	movs	r2, #2
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e060      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003de0:	231f      	movs	r3, #31
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	2204      	movs	r2, #4
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	e05b      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003dea:	231f      	movs	r3, #31
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	2208      	movs	r2, #8
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	e056      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003df4:	231f      	movs	r3, #31
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	2210      	movs	r2, #16
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e051      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a89      	ldr	r2, [pc, #548]	@ (8004028 <UART_SetConfig+0x300>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d134      	bne.n	8003e72 <UART_SetConfig+0x14a>
 8003e08:	4b86      	ldr	r3, [pc, #536]	@ (8004024 <UART_SetConfig+0x2fc>)
 8003e0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e0c:	23c0      	movs	r3, #192	@ 0xc0
 8003e0e:	029b      	lsls	r3, r3, #10
 8003e10:	4013      	ands	r3, r2
 8003e12:	22c0      	movs	r2, #192	@ 0xc0
 8003e14:	0292      	lsls	r2, r2, #10
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d017      	beq.n	8003e4a <UART_SetConfig+0x122>
 8003e1a:	22c0      	movs	r2, #192	@ 0xc0
 8003e1c:	0292      	lsls	r2, r2, #10
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d822      	bhi.n	8003e68 <UART_SetConfig+0x140>
 8003e22:	2280      	movs	r2, #128	@ 0x80
 8003e24:	0292      	lsls	r2, r2, #10
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d019      	beq.n	8003e5e <UART_SetConfig+0x136>
 8003e2a:	2280      	movs	r2, #128	@ 0x80
 8003e2c:	0292      	lsls	r2, r2, #10
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d81a      	bhi.n	8003e68 <UART_SetConfig+0x140>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <UART_SetConfig+0x118>
 8003e36:	2280      	movs	r2, #128	@ 0x80
 8003e38:	0252      	lsls	r2, r2, #9
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00a      	beq.n	8003e54 <UART_SetConfig+0x12c>
 8003e3e:	e013      	b.n	8003e68 <UART_SetConfig+0x140>
 8003e40:	231f      	movs	r3, #31
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e02b      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003e4a:	231f      	movs	r3, #31
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	2202      	movs	r2, #2
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e026      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003e54:	231f      	movs	r3, #31
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	2204      	movs	r2, #4
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	e021      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003e5e:	231f      	movs	r3, #31
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	2208      	movs	r2, #8
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e01c      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003e68:	231f      	movs	r3, #31
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e017      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a6d      	ldr	r2, [pc, #436]	@ (800402c <UART_SetConfig+0x304>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d104      	bne.n	8003e86 <UART_SetConfig+0x15e>
 8003e7c:	231f      	movs	r3, #31
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e00d      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a69      	ldr	r2, [pc, #420]	@ (8004030 <UART_SetConfig+0x308>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d104      	bne.n	8003e9a <UART_SetConfig+0x172>
 8003e90:	231f      	movs	r3, #31
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	e003      	b.n	8003ea2 <UART_SetConfig+0x17a>
 8003e9a:	231f      	movs	r3, #31
 8003e9c:	18fb      	adds	r3, r7, r3
 8003e9e:	2210      	movs	r2, #16
 8003ea0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d15c      	bne.n	8003f68 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003eae:	231f      	movs	r3, #31
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d015      	beq.n	8003ee4 <UART_SetConfig+0x1bc>
 8003eb8:	dc18      	bgt.n	8003eec <UART_SetConfig+0x1c4>
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d00d      	beq.n	8003eda <UART_SetConfig+0x1b2>
 8003ebe:	dc15      	bgt.n	8003eec <UART_SetConfig+0x1c4>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <UART_SetConfig+0x1a2>
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d005      	beq.n	8003ed4 <UART_SetConfig+0x1ac>
 8003ec8:	e010      	b.n	8003eec <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eca:	f7fe fd8f 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	61bb      	str	r3, [r7, #24]
        break;
 8003ed2:	e012      	b.n	8003efa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed4:	4b57      	ldr	r3, [pc, #348]	@ (8004034 <UART_SetConfig+0x30c>)
 8003ed6:	61bb      	str	r3, [r7, #24]
        break;
 8003ed8:	e00f      	b.n	8003efa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eda:	f7fe fd0b 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	61bb      	str	r3, [r7, #24]
        break;
 8003ee2:	e00a      	b.n	8003efa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee4:	2380      	movs	r3, #128	@ 0x80
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	61bb      	str	r3, [r7, #24]
        break;
 8003eea:	e006      	b.n	8003efa <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ef0:	231e      	movs	r3, #30
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]
        break;
 8003ef8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d100      	bne.n	8003f02 <UART_SetConfig+0x1da>
 8003f00:	e07a      	b.n	8003ff8 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	005a      	lsls	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	18d2      	adds	r2, r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	0019      	movs	r1, r3
 8003f14:	0010      	movs	r0, r2
 8003f16:	f7fc f8f7 	bl	8000108 <__udivsi3>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b0f      	cmp	r3, #15
 8003f22:	d91c      	bls.n	8003f5e <UART_SetConfig+0x236>
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	2380      	movs	r3, #128	@ 0x80
 8003f28:	025b      	lsls	r3, r3, #9
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d217      	bcs.n	8003f5e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	200e      	movs	r0, #14
 8003f34:	183b      	adds	r3, r7, r0
 8003f36:	210f      	movs	r1, #15
 8003f38:	438a      	bics	r2, r1
 8003f3a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2207      	movs	r2, #7
 8003f44:	4013      	ands	r3, r2
 8003f46:	b299      	uxth	r1, r3
 8003f48:	183b      	adds	r3, r7, r0
 8003f4a:	183a      	adds	r2, r7, r0
 8003f4c:	8812      	ldrh	r2, [r2, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	183a      	adds	r2, r7, r0
 8003f58:	8812      	ldrh	r2, [r2, #0]
 8003f5a:	60da      	str	r2, [r3, #12]
 8003f5c:	e04c      	b.n	8003ff8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f5e:	231e      	movs	r3, #30
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e047      	b.n	8003ff8 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f68:	231f      	movs	r3, #31
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d015      	beq.n	8003f9e <UART_SetConfig+0x276>
 8003f72:	dc18      	bgt.n	8003fa6 <UART_SetConfig+0x27e>
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d00d      	beq.n	8003f94 <UART_SetConfig+0x26c>
 8003f78:	dc15      	bgt.n	8003fa6 <UART_SetConfig+0x27e>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <UART_SetConfig+0x25c>
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d005      	beq.n	8003f8e <UART_SetConfig+0x266>
 8003f82:	e010      	b.n	8003fa6 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f84:	f7fe fd32 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	61bb      	str	r3, [r7, #24]
        break;
 8003f8c:	e012      	b.n	8003fb4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f8e:	4b29      	ldr	r3, [pc, #164]	@ (8004034 <UART_SetConfig+0x30c>)
 8003f90:	61bb      	str	r3, [r7, #24]
        break;
 8003f92:	e00f      	b.n	8003fb4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f94:	f7fe fcae 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	61bb      	str	r3, [r7, #24]
        break;
 8003f9c:	e00a      	b.n	8003fb4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9e:	2380      	movs	r3, #128	@ 0x80
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	61bb      	str	r3, [r7, #24]
        break;
 8003fa4:	e006      	b.n	8003fb4 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003faa:	231e      	movs	r3, #30
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
        break;
 8003fb2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01e      	beq.n	8003ff8 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	085a      	lsrs	r2, r3, #1
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	18d2      	adds	r2, r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	0019      	movs	r1, r3
 8003fca:	0010      	movs	r0, r2
 8003fcc:	f7fc f89c 	bl	8000108 <__udivsi3>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	2b0f      	cmp	r3, #15
 8003fd8:	d90a      	bls.n	8003ff0 <UART_SetConfig+0x2c8>
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	2380      	movs	r3, #128	@ 0x80
 8003fde:	025b      	lsls	r3, r3, #9
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d205      	bcs.n	8003ff0 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	e003      	b.n	8003ff8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003ff0:	231e      	movs	r3, #30
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004004:	231e      	movs	r3, #30
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	781b      	ldrb	r3, [r3, #0]
}
 800400a:	0018      	movs	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	b008      	add	sp, #32
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	efff69f3 	.word	0xefff69f3
 8004018:	ffffcfff 	.word	0xffffcfff
 800401c:	fffff4ff 	.word	0xfffff4ff
 8004020:	40013800 	.word	0x40013800
 8004024:	40021000 	.word	0x40021000
 8004028:	40004400 	.word	0x40004400
 800402c:	40004800 	.word	0x40004800
 8004030:	40004c00 	.word	0x40004c00
 8004034:	007a1200 	.word	0x007a1200

08004038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	2208      	movs	r2, #8
 8004046:	4013      	ands	r3, r2
 8004048:	d00b      	beq.n	8004062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4a4a      	ldr	r2, [pc, #296]	@ (800417c <UART_AdvFeatureConfig+0x144>)
 8004052:	4013      	ands	r3, r2
 8004054:	0019      	movs	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	2201      	movs	r2, #1
 8004068:	4013      	ands	r3, r2
 800406a:	d00b      	beq.n	8004084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4a43      	ldr	r2, [pc, #268]	@ (8004180 <UART_AdvFeatureConfig+0x148>)
 8004074:	4013      	ands	r3, r2
 8004076:	0019      	movs	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	2202      	movs	r2, #2
 800408a:	4013      	ands	r3, r2
 800408c:	d00b      	beq.n	80040a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4a3b      	ldr	r2, [pc, #236]	@ (8004184 <UART_AdvFeatureConfig+0x14c>)
 8004096:	4013      	ands	r3, r2
 8004098:	0019      	movs	r1, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	2204      	movs	r2, #4
 80040ac:	4013      	ands	r3, r2
 80040ae:	d00b      	beq.n	80040c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4a34      	ldr	r2, [pc, #208]	@ (8004188 <UART_AdvFeatureConfig+0x150>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	0019      	movs	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	2210      	movs	r2, #16
 80040ce:	4013      	ands	r3, r2
 80040d0:	d00b      	beq.n	80040ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a2c      	ldr	r2, [pc, #176]	@ (800418c <UART_AdvFeatureConfig+0x154>)
 80040da:	4013      	ands	r3, r2
 80040dc:	0019      	movs	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ee:	2220      	movs	r2, #32
 80040f0:	4013      	ands	r3, r2
 80040f2:	d00b      	beq.n	800410c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	4a25      	ldr	r2, [pc, #148]	@ (8004190 <UART_AdvFeatureConfig+0x158>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	0019      	movs	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	2240      	movs	r2, #64	@ 0x40
 8004112:	4013      	ands	r3, r2
 8004114:	d01d      	beq.n	8004152 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a1d      	ldr	r2, [pc, #116]	@ (8004194 <UART_AdvFeatureConfig+0x15c>)
 800411e:	4013      	ands	r3, r2
 8004120:	0019      	movs	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004132:	2380      	movs	r3, #128	@ 0x80
 8004134:	035b      	lsls	r3, r3, #13
 8004136:	429a      	cmp	r2, r3
 8004138:	d10b      	bne.n	8004152 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4a15      	ldr	r2, [pc, #84]	@ (8004198 <UART_AdvFeatureConfig+0x160>)
 8004142:	4013      	ands	r3, r2
 8004144:	0019      	movs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	2280      	movs	r2, #128	@ 0x80
 8004158:	4013      	ands	r3, r2
 800415a:	d00b      	beq.n	8004174 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	4a0e      	ldr	r2, [pc, #56]	@ (800419c <UART_AdvFeatureConfig+0x164>)
 8004164:	4013      	ands	r3, r2
 8004166:	0019      	movs	r1, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }
}
 8004174:	46c0      	nop			@ (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	b002      	add	sp, #8
 800417a:	bd80      	pop	{r7, pc}
 800417c:	ffff7fff 	.word	0xffff7fff
 8004180:	fffdffff 	.word	0xfffdffff
 8004184:	fffeffff 	.word	0xfffeffff
 8004188:	fffbffff 	.word	0xfffbffff
 800418c:	ffffefff 	.word	0xffffefff
 8004190:	ffffdfff 	.word	0xffffdfff
 8004194:	ffefffff 	.word	0xffefffff
 8004198:	ff9fffff 	.word	0xff9fffff
 800419c:	fff7ffff 	.word	0xfff7ffff

080041a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b092      	sub	sp, #72	@ 0x48
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2284      	movs	r2, #132	@ 0x84
 80041ac:	2100      	movs	r1, #0
 80041ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041b0:	f7fd fc82 	bl	8001ab8 <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2208      	movs	r2, #8
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d12c      	bne.n	8004220 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c8:	2280      	movs	r2, #128	@ 0x80
 80041ca:	0391      	lsls	r1, r2, #14
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4a46      	ldr	r2, [pc, #280]	@ (80042e8 <UART_CheckIdleState+0x148>)
 80041d0:	9200      	str	r2, [sp, #0]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f000 f88c 	bl	80042f0 <UART_WaitOnFlagUntilTimeout>
 80041d8:	1e03      	subs	r3, r0, #0
 80041da:	d021      	beq.n	8004220 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041dc:	f3ef 8310 	mrs	r3, PRIMASK
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041e6:	2301      	movs	r3, #1
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ec:	f383 8810 	msr	PRIMASK, r3
}
 80041f0:	46c0      	nop			@ (mov r8, r8)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2180      	movs	r1, #128	@ 0x80
 80041fe:	438a      	bics	r2, r1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004208:	f383 8810 	msr	PRIMASK, r3
}
 800420c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2278      	movs	r2, #120	@ 0x78
 8004218:	2100      	movs	r1, #0
 800421a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e05f      	b.n	80042e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2204      	movs	r2, #4
 8004228:	4013      	ands	r3, r2
 800422a:	2b04      	cmp	r3, #4
 800422c:	d146      	bne.n	80042bc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800422e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004230:	2280      	movs	r2, #128	@ 0x80
 8004232:	03d1      	lsls	r1, r2, #15
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4a2c      	ldr	r2, [pc, #176]	@ (80042e8 <UART_CheckIdleState+0x148>)
 8004238:	9200      	str	r2, [sp, #0]
 800423a:	2200      	movs	r2, #0
 800423c:	f000 f858 	bl	80042f0 <UART_WaitOnFlagUntilTimeout>
 8004240:	1e03      	subs	r3, r0, #0
 8004242:	d03b      	beq.n	80042bc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004244:	f3ef 8310 	mrs	r3, PRIMASK
 8004248:	60fb      	str	r3, [r7, #12]
  return(result);
 800424a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424c:	637b      	str	r3, [r7, #52]	@ 0x34
 800424e:	2301      	movs	r3, #1
 8004250:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f383 8810 	msr	PRIMASK, r3
}
 8004258:	46c0      	nop			@ (mov r8, r8)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4921      	ldr	r1, [pc, #132]	@ (80042ec <UART_CheckIdleState+0x14c>)
 8004266:	400a      	ands	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f383 8810 	msr	PRIMASK, r3
}
 8004274:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004276:	f3ef 8310 	mrs	r3, PRIMASK
 800427a:	61bb      	str	r3, [r7, #24]
  return(result);
 800427c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004280:	2301      	movs	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f383 8810 	msr	PRIMASK, r3
}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2101      	movs	r1, #1
 8004298:	438a      	bics	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	f383 8810 	msr	PRIMASK, r3
}
 80042a6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2280      	movs	r2, #128	@ 0x80
 80042ac:	2120      	movs	r1, #32
 80042ae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2278      	movs	r2, #120	@ 0x78
 80042b4:	2100      	movs	r1, #0
 80042b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e011      	b.n	80042e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2280      	movs	r2, #128	@ 0x80
 80042c6:	2120      	movs	r1, #32
 80042c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2278      	movs	r2, #120	@ 0x78
 80042da:	2100      	movs	r1, #0
 80042dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	0018      	movs	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b010      	add	sp, #64	@ 0x40
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	01ffffff 	.word	0x01ffffff
 80042ec:	fffffedf 	.word	0xfffffedf

080042f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	1dfb      	adds	r3, r7, #7
 80042fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004300:	e051      	b.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	3301      	adds	r3, #1
 8004306:	d04e      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004308:	f7fd fbd6 	bl	8001ab8 <HAL_GetTick>
 800430c:	0002      	movs	r2, r0
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e051      	b.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2204      	movs	r2, #4
 800432a:	4013      	ands	r3, r2
 800432c:	d03b      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b80      	cmp	r3, #128	@ 0x80
 8004332:	d038      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b40      	cmp	r3, #64	@ 0x40
 8004338:	d035      	beq.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	2208      	movs	r2, #8
 8004342:	4013      	ands	r3, r2
 8004344:	2b08      	cmp	r3, #8
 8004346:	d111      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2208      	movs	r2, #8
 800434e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	0018      	movs	r0, r3
 8004354:	f000 f83c 	bl	80043d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2284      	movs	r2, #132	@ 0x84
 800435c:	2108      	movs	r1, #8
 800435e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2278      	movs	r2, #120	@ 0x78
 8004364:	2100      	movs	r1, #0
 8004366:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e02c      	b.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	2380      	movs	r3, #128	@ 0x80
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	401a      	ands	r2, r3
 8004378:	2380      	movs	r3, #128	@ 0x80
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	429a      	cmp	r2, r3
 800437e:	d112      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2280      	movs	r2, #128	@ 0x80
 8004386:	0112      	lsls	r2, r2, #4
 8004388:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	0018      	movs	r0, r3
 800438e:	f000 f81f 	bl	80043d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2284      	movs	r2, #132	@ 0x84
 8004396:	2120      	movs	r1, #32
 8004398:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2278      	movs	r2, #120	@ 0x78
 800439e:	2100      	movs	r1, #0
 80043a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e00f      	b.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	4013      	ands	r3, r2
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	425a      	negs	r2, r3
 80043b6:	4153      	adcs	r3, r2
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	001a      	movs	r2, r3
 80043bc:	1dfb      	adds	r3, r7, #7
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d09e      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b004      	add	sp, #16
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08e      	sub	sp, #56	@ 0x38
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8310 	mrs	r3, PRIMASK
 80043dc:	617b      	str	r3, [r7, #20]
  return(result);
 80043de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80043e2:	2301      	movs	r3, #1
 80043e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f383 8810 	msr	PRIMASK, r3
}
 80043ec:	46c0      	nop			@ (mov r8, r8)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4926      	ldr	r1, [pc, #152]	@ (8004494 <UART_EndRxTransfer+0xc4>)
 80043fa:	400a      	ands	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004400:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800440a:	f3ef 8310 	mrs	r3, PRIMASK
 800440e:	623b      	str	r3, [r7, #32]
  return(result);
 8004410:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004412:	633b      	str	r3, [r7, #48]	@ 0x30
 8004414:	2301      	movs	r3, #1
 8004416:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	f383 8810 	msr	PRIMASK, r3
}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2101      	movs	r1, #1
 800442c:	438a      	bics	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004436:	f383 8810 	msr	PRIMASK, r3
}
 800443a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004440:	2b01      	cmp	r3, #1
 8004442:	d118      	bne.n	8004476 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004444:	f3ef 8310 	mrs	r3, PRIMASK
 8004448:	60bb      	str	r3, [r7, #8]
  return(result);
 800444a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800444e:	2301      	movs	r3, #1
 8004450:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f383 8810 	msr	PRIMASK, r3
}
 8004458:	46c0      	nop			@ (mov r8, r8)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2110      	movs	r1, #16
 8004466:	438a      	bics	r2, r1
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f383 8810 	msr	PRIMASK, r3
}
 8004474:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2280      	movs	r2, #128	@ 0x80
 800447a:	2120      	movs	r1, #32
 800447c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b00e      	add	sp, #56	@ 0x38
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	fffffedf 	.word	0xfffffedf

08004498 <memset>:
 8004498:	0003      	movs	r3, r0
 800449a:	1882      	adds	r2, r0, r2
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	7019      	strb	r1, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <__libc_init_array>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	2600      	movs	r6, #0
 80044ac:	4c0c      	ldr	r4, [pc, #48]	@ (80044e0 <__libc_init_array+0x38>)
 80044ae:	4d0d      	ldr	r5, [pc, #52]	@ (80044e4 <__libc_init_array+0x3c>)
 80044b0:	1b64      	subs	r4, r4, r5
 80044b2:	10a4      	asrs	r4, r4, #2
 80044b4:	42a6      	cmp	r6, r4
 80044b6:	d109      	bne.n	80044cc <__libc_init_array+0x24>
 80044b8:	2600      	movs	r6, #0
 80044ba:	f000 f819 	bl	80044f0 <_init>
 80044be:	4c0a      	ldr	r4, [pc, #40]	@ (80044e8 <__libc_init_array+0x40>)
 80044c0:	4d0a      	ldr	r5, [pc, #40]	@ (80044ec <__libc_init_array+0x44>)
 80044c2:	1b64      	subs	r4, r4, r5
 80044c4:	10a4      	asrs	r4, r4, #2
 80044c6:	42a6      	cmp	r6, r4
 80044c8:	d105      	bne.n	80044d6 <__libc_init_array+0x2e>
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	00b3      	lsls	r3, r6, #2
 80044ce:	58eb      	ldr	r3, [r5, r3]
 80044d0:	4798      	blx	r3
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7ee      	b.n	80044b4 <__libc_init_array+0xc>
 80044d6:	00b3      	lsls	r3, r6, #2
 80044d8:	58eb      	ldr	r3, [r5, r3]
 80044da:	4798      	blx	r3
 80044dc:	3601      	adds	r6, #1
 80044de:	e7f2      	b.n	80044c6 <__libc_init_array+0x1e>
 80044e0:	08004580 	.word	0x08004580
 80044e4:	08004580 	.word	0x08004580
 80044e8:	08004584 	.word	0x08004584
 80044ec:	08004580 	.word	0x08004580

080044f0 <_init>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f6:	bc08      	pop	{r3}
 80044f8:	469e      	mov	lr, r3
 80044fa:	4770      	bx	lr

080044fc <_fini>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004502:	bc08      	pop	{r3}
 8004504:	469e      	mov	lr, r3
 8004506:	4770      	bx	lr
